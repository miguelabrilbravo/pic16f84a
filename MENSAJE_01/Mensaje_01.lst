MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************ Mensaje_01.asm ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; En la pantalla del módulo LCD se visualiza un mensaje de menos de 16 caracteres grabado
                      00010 ; en la memoria ROM mediante la directiva DT.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 
2007   3FF1           00014         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00015         LIST       P=16F84A
                      00016         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F84A processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00208         LIST
                      00017 
                      00018         CBLOCK  0x0C
  0000000C            00019         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00020                                         ; respecto del comienzo de todos los mensajes
                      00021                                         ; (posición de la etiqueta "Mensajes").
  0000000D            00022         LCD_ValorCaracter               ; Valor del código ASCII del carácter a 
                      00023         ENDC                            ; visualizar.
                      00024 
                      00025 ; ZONA DE CÓDIGOS ********************************************************************
                      00026 
0000                  00027         ORG     0
0000                  00028 Inicio
0000   201D           00029         call    LCD_Inicializa
0001   018C           00030         clrf    LCD_ApuntaCaracter      ; Se visualizará la primera posición del mensaje.
0002                  00031 LCD_VisualizaOtroCaracter
0002   080C           00032         movf    LCD_ApuntaCaracter,W
0003   200C           00033         call    Mensajes                ; Obtiene el código ASCII del carácter apuntado.
0004   008D           00034         movwf   LCD_ValorCaracter       ; Guarda el valor de carácter.
0005   088D           00035         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0006   1903           00036         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0007   280B           00037         goto    Fin                     ; de mensaje, sale fuera.
0008                  00038 LCD_NoUltimoCaracter
0008   2061           00039         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0009   0A8C           00040         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
000A   2802           00041         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
000B   0063           00042 Fin     sleep                           ; Pasa a modo bajo consumo.
                      00043 
                      00044 ; Subrutina "Mensajes" ---------------------------------------------------------------
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00045 ;
000C                  00046 Mensajes
000C   0782           00047         addwf   PCL,F
000D                  00048 Mensaje0                                ; Posición inicial del mensaje.
000D   3448 346F 346C 00049         DT "Hola!, que tal?", 0x00
       3461 3421 342C 
       3420 3471 3475 
       3465 3420 3474 
       3461 346C 343F 
       3400 
                      00050 
                      00051         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  0000000E            00025         LCD_Dato
  0000000F            00026         LCD_GuardaDato
  00000010            00027         LCD_GuardaTRISB
  00000011            00028         LCD_Auxiliar1
  00000012            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
001D                  00045 LCD_Inicializa
001D   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
001E   1005           00047         bcf     LCD_PinRS               ; R/W y E.
001F   1105           00048         bcf     LCD_PinEnable
0020   1085           00049         bcf     LCD_PinRW
0021   1283           00050         bcf     STATUS,RP0
0022   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado le indica
                      00052                                         ; que se va a escribir en el LCD.
0023   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD poniendo E=0.
0024   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando poniendo RS=0.
0025   20C1           00055         call    Retardo_20ms
0026   3030           00056         movlw   b'00110000'     
0027   2035           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0028   20C5           00058         call    Retardo_5ms     
0029   3030           00059         movlw   b'00110000'     
002A   2035           00060         call    LCD_EscribeLCD
002B   20AE           00061         call    Retardo_200micros
002C   3030           00062         movlw   b'00110000'     
002D   2035           00063         call    LCD_EscribeLCD
002E   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
002F   2035           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
0030   205E           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
0031   205C           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
0032   205A           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
0033   204C           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
0034   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el pin
                      00078 ; Enable del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B que
                      00079 ; no son utilizadas para el LCD (pines RB3:RB0), primero se lee estas líneas y después se
                      00080 ; vuelve a enviar este dato sin cambiarlo.
                      00081 
                      00082 
0035                  00083 LCD_EscribeLCD
0035   39F0           00084    andlw   b'11110000'            ; Se queda con el nibble alto del dato que es el
0036   008E           00085    movwf   LCD_Dato            ; que hay que enviar y lo guarda.
0037   0806           00086    movf   LCD_BusDatos,W         ; Lee la información actual de la parte baja
0038   390F           00087    andlw   b'00001111'            ; del Puerto B, que no se debe alterar.
0039   048E           00088    iorwf   LCD_Dato,F            ; Enviará la parte alta del dato de entrada
                      00089                            ; y en la parte baja lo que había antes.
003A   1683           00090    bsf      STATUS,RP0            ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
003B   0806           00091    movf   TRISB,W               ; Guarda la configuración que tenía antes TRISB.
003C   0090           00092    movwf   LCD_GuardaTRISB
003D   300F           00093    movlw   b'00001111'            ; Las 4 líneas inferiores del Puerto B se dejan
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

003E   0586           00094    andwf   PORTB,F               ; como estaban y las 4 superiores como salida.
003F   1283           00095    bcf      STATUS,RP0            ; Acceso al Banco 0.
                      00096 ;LINEAS MODIFICADAS PARA QUE FUNCIONE 
0040   1C05           00097    btfss   LCD_PinRS            ; Debe garantizar una correcta escritura manteniendo
0041   20C7           00098    call   Retardo_2ms            ; 2 ms en modo comando y 50 µs en modo cáracter.
0042   20B3           00099    call   Retardo_50micros
                      00100 ;LINEAS MODIFICADAS PARA QUE FUNCIONE
                      00101  
0043   080E           00102    movf   LCD_Dato,W            ; Recupera el dato a enviar.
0044   0086           00103    movwf   LCD_BusDatos         ; Envía el dato al módulo LCD.
0045   1505           00104    bsf      LCD_PinEnable         ; Permite funcionamiento del LCD mediante un pequeño
0046   1105           00105    bcf      LCD_PinEnable         ; pulso y termina impidiendo el funcionamiento del LCD.
0047   1683           00106    bsf      STATUS,RP0            ; Acceso al Banco 1. Restaura el antiguo valor en
0048   0810           00107    movf   LCD_GuardaTRISB,W      ; la configuración del Puerto B.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0049   0086           00108    movwf   TRISB                                        ;REALMENTE ES TRISB 
                      00109 ;       movwf   PORTB                                   ;REALMENTE ES TRISB 
004A   1283           00110    bcf      STATUS,RP0            ; Acceso al Banco 0.
004B   0008           00111    return
                      00112 
                      00113 
                      00114 
                      00115 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00116 ;
                      00117 ;Los comandos que pueden ser ejecutados son:
                      00118 ;
004C                  00119 LCD_CursorIncr                          ; Cursor en modo incrementar.
004C   3006           00120         movlw   b'00000110'
004D   285F           00121         goto    LCD_EnviaComando
004E                  00122 LCD_Linea1                              ; Cursor al principio de la Línea 1.
004E   3080           00123         movlw   b'10000000'             ; Dirección 00h de la DDRAM
004F   285F           00124         goto    LCD_EnviaComando
0050                  00125 LCD_Linea2                              ; Cursor al principio de la Línea 2.
0050   30C0           00126         movlw   b'11000000'             ; Dirección 40h de la DDRAM
0051   285F           00127         goto    LCD_EnviaComando
0052                  00128 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
0052   3880           00129         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
0053   285F           00130         goto    LCD_EnviaComando        ; registro W.
0054                  00131 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
0054   38C0           00132         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
0055   285F           00133         goto    LCD_EnviaComando        ; registro W.
0056                  00134 LCD_OFF                         ; Pantalla apagada.
0056   3008           00135         movlw   b'00001000'
0057   285F           00136         goto    LCD_EnviaComando
0058                  00137 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
0058   300E           00138         movlw   b'00001110'
0059   285F           00139         goto    LCD_EnviaComando
005A                  00140 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
005A   300C           00141         movlw   b'00001100'
005B   285F           00142         goto    LCD_EnviaComando
005C                  00143 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
005C   3001           00144         movlw   b'00000001'             ; cursor a principio de la línea 1.
005D   285F           00145         goto    LCD_EnviaComando
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005E                  00146 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
005E   3028           00147         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00148 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00149 
                      00150 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00151 ;
                      00152 ; "LCD_EnviaComando". Escribe un comando en el registro del módulo LCD. La palabra de
                      00153 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00154 ; "LCD_Caracter". Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00155 ; a través del registro W. Trabaja en Modo Dato.
                      00156 ;
005F                  00157 LCD_EnviaComando
005F   1005           00158         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0060   2863           00159         goto    LCD_Envia
0061                  00160 LCD_Caracter
0061   1405           00161         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
0062   206B           00162         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
0063                  00163 LCD_Envia
0063   008F           00164         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
0064   2035           00165         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
0065   0E0F           00166         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00167                                         ; nibble bajo del dato a enviar a parte alta del byte.
0066   2035           00168         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
0067   1C05           00169         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
0068   20C7           00170         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
0069   20B3           00171         call    Retardo_50micros
006A   0008           00172         return  
                      00173 
                      00174 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00175 ;
                      00176 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00177 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00178 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00179 ;
                      00180 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00181 ; que puedan ser visualizado en el módulo LM016L.
                      00182 ; 
                      00183 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00184 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00185 
006B                  00186 LCD_CodigoCGROM
006B   008E           00187         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
006C                  00188 LCD_EnheMinuscula                       ; un carácter especial.
006C   3CF1           00189         sublw   'ñ'                     ; ¿Es la "ñ"?
006D   1D03           00190         btfss   STATUS,Z
006E   2872           00191         goto    LCD_EnheMayuscula       ; No es "ñ".
006F   30EE           00192         movlw   b'11101110'             ; Código CGROM de la "ñ".
0070   008E           00193         movwf   LCD_Dato
0071   287F           00194         goto    LCD_FinCGROM
0072                  00195 LCD_EnheMayuscula
0072   080E           00196         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0073   3CD1           00197         sublw   'Ñ'                     ; ¿Es la "Ñ"?
0074   1D03           00198         btfss   STATUS,Z
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0075   2879           00199         goto    LCD_Grado               ; No es "Ñ".
0076   30EE           00200         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
0077   008E           00201         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
0078   287F           00202         goto    LCD_FinCGROM    
0079                  00203 LCD_Grado
0079   080E           00204         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
007A   3CBA           00205         sublw   'º'                     ; ¿Es el símbolo "º"?
007B   1D03           00206         btfss   STATUS,Z
007C   287F           00207         goto    LCD_FinCGROM            ; No es "º".
007D   30DF           00208         movlw   b'11011111'             ; Código CGROM del símbolo "º".
007E   008E           00209         movwf   LCD_Dato
007F                  00210 LCD_FinCGROM
007F   080E           00211         movf    LCD_Dato,W              ; En (W) el código buscado.
0080   0008           00212         return
                      00213 
                      00214 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00215 ;
                      00216 ; Visualiza espacios en blanco.
                      00217 
0081                  00218 LCD_LineaEnBlanco
0081   3010           00219         movlw   LCD_CaracteresPorLinea
0082   2888           00220         goto    LCD_EnviaBlancos
0083                  00221 LCD_UnEspacioBlanco
0083   3001           00222         movlw   .1
0084   2888           00223         goto    LCD_EnviaBlancos
0085                  00224 LCD_DosEspaciosBlancos
0085   3002           00225         movlw   .2
0086   2888           00226         goto    LCD_EnviaBlancos
0087                  00227 LCD_TresEspaciosBlancos
0087   3003           00228         movlw   .3
0088                  00229 LCD_EnviaBlancos
0088   0091           00230         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
0089                  00231 LCD_EnviaOtroBlanco     
0089   3020           00232         movlw   ' '                     ; Esto es un espacio en blanco.
008A   2061           00233         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
008B   0B91           00234         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
008C   2889           00235         goto    LCD_EnviaOtroBlanco
008D   0008           00236         return
                      00237 
                      00238 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00239 ;
                      00240 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00241 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00242 ;
                      00243 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00244 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00245 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00246 ;
                      00247 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00248 ;
008E                  00249 LCD_Byte
008E   0092           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
008F   39F0           00251         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0090   1D03           00252         btfss   STATUS,Z                ; Si es cero lo apaga.
0091   2896           00253         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0092   3020           00254         movlw   ' '                     ; Visualiza un espacio en blanco.
0093   2061           00255         call    LCD_Caracter
0094   2898           00256         goto    LCD_VisualizaBajo
                      00257 
0095                  00258 LCD_ByteCompleto
0095   0092           00259         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0096                  00260 LCD_VisualizaAlto
0096   0E12           00261         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0097   2099           00262         call    LCD_Nibble              ; Lo visualiza.
0098                  00263 LCD_VisualizaBajo
0098   0812           00264         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00265 ;       call    LCD_Nibble              ; Lo visualiza.
                      00266 ;       return
                      00267 
                      00268 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00269 ;
                      00270 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00271 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00272 ; - Si (W)=b'01010110', se visualizará "6". 
                      00273 ; - Si (W)=b'10101110', se visualizará "E". 
                      00274 ;
0099                  00275 LCD_Nibble
0099   390F           00276         andlw   b'00001111'             ; Se queda con la parte baja.
009A   0091           00277         movwf   LCD_Auxiliar1           ; Lo guarda.
009B   3C09           00278         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
009C   1C03           00279         btfss   STATUS,C        
009D   28A1           00280         goto    LCD_EnviaByteLetra
009E   0811           00281         movf    LCD_Auxiliar1,W
009F   3E30           00282         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00A0   28A3           00283         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00A1                  00284 LCD_EnviaByteLetra
00A1   0811           00285         movf    LCD_Auxiliar1,W
00A2   3E37           00286         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
00A3                  00287 LCD_FinVisualizaDigito
00A3   2861           00288         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00289                                         ; para no sobrecargar la pila.
                      00290                                         
                      00291 ;       ===================================================================
                      00292 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00293 ;         E. Palacios, F. Remiro y L. López.
                      00294 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00295 ;       ===================================================================
                      00052         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000013            00021         R_ContA                         ; Contadores para los retardos.
  00000014            00022         R_ContB
  00000015            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
00A4                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
00A4   0000           00033         nop                             ; Aporta 1 ciclo máquina.
00A5   0000           00034         nop                             ; Aporta 1 ciclo máquina.
00A6   0000           00035         nop                             ; Aporta 1 ciclo máquina.
00A7   0000           00036         nop                             ; Aporta 1 ciclo máquina.
00A8   0000           00037         nop                             ; Aporta 1 ciclo máquina.
00A9                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
00A9   0000           00039         nop                             ; Aporta 1 ciclo máquina.
00AA                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
00AA   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
00AB                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
00AB   0000           00046         nop                             ; Aporta 1 ciclo máquina.
00AC   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
00AD   28B7           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00AE                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
00AE   0000           00050         nop                             ; Aporta 1 ciclo máquina.
00AF   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00B0   28B7           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00B1                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
00B1   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00B2   28B7           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00B3                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
00B3   0000           00057         nop                             ; Aporta 1 ciclo máquina.
00B4   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00B5   28B7           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00B6                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
00B6   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
00B7                  00066 RetardoMicros
00B7   0093           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
00B8                  00068 Rmicros_Bucle
00B8   0B93           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00B9   28B8           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
00BA   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
00BB                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
00BB   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00BC   28CA           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00BD                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
00BD   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00BE   28CA           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00BF                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
00BF   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C0   28CA           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C1                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
00C1   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C2   28CA           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C3                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
00C3   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C4   28CA           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C5                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
00C5   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C6   28CA           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C7                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
00C7   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C8   28CA           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C9                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
00C9   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
00CA                  00111 Retardos_ms
00CA   0094           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
00CB                  00113 R1ms_BucleExterno
00CB   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CC   0093           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
00CD                  00116 R1ms_BucleInterno
00CD   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
00CE   0B93           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
00CF   28CD           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
00D0   0B94           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00D1   28CB           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
00D2   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
00D3                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
00D3   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00D4   28DE           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00D5                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
00D5   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00D6   28DE           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00D7                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
00D7   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00D8   28DE           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00D9                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
00D9   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00DA   28DE           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00DB                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
00DB   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00DC   28DE           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00DD                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
00DD   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
00DE                  00160 Retardo_1Decima
00DE   0095           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
00DF                  00162 R1Decima_BucleExterno2
00DF   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
00E0   0094           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
00E1                  00165 R1Decima_BucleExterno
00E1   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
00E2   0093           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E3                  00168 R1Decima_BucleInterno          
00E3   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
00E4   0B93           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
00E5   28E3           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
00E6   0B94           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
00E7   28E1           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
00E8   0B95           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00E9   28DF           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
00EA   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00191 
                      00192 ;       ===================================================================
                      00193 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00194 ;         E. Palacios, F. Remiro y L. López.
                      00195 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00196 ;       ===================================================================
                      00197 
                      00198 
                      00199 
                      00200 
                      00053         END
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE 12


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
Fin                               0000000B
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000000
LCD_2Lineas4Bits5x7               0000005E
LCD_ApuntaCaracter                0000000C
LCD_Auxiliar1                     00000011
LCD_Auxiliar2                     00000012
LCD_Borra                         0000005C
LCD_BusDatos                      PORTB
LCD_Byte                          0000008E
LCD_ByteCompleto                  00000095
LCD_Caracter                      00000061
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   0000006B
LCD_CursorIncr                    0000004C
LCD_CursorOFF                     0000005A
LCD_CursorON                      00000058
LCD_Dato                          0000000E
LCD_DosEspaciosBlancos            00000085
LCD_EnheMayuscula                 00000072
LCD_EnheMinuscula                 0000006C
LCD_Envia                         00000063
LCD_EnviaBlancos                  00000088
LCD_EnviaByteLetra                000000A1
LCD_EnviaComando                  0000005F
LCD_EnviaOtroBlanco               00000089
LCD_EscribeLCD                    00000035
LCD_FinCGROM                      0000007F
LCD_FinVisualizaDigito            000000A3
LCD_Grado                         00000079
LCD_GuardaDato                    0000000F
LCD_GuardaTRISB                   00000010
LCD_Inicializa                    0000001D
LCD_Linea1                        0000004E
LCD_Linea2                        00000050
LCD_LineaEnBlanco                 00000081
LCD_Nibble                        00000099
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

LCD_NoUltimoCaracter              00000008
LCD_OFF                           00000056
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                00000052
LCD_PosicionLinea2                00000054
LCD_TresEspaciosBlancos           00000087
LCD_UnEspacioBlanco               00000083
LCD_ValorCaracter                 0000000D
LCD_VisualizaAlto                 00000096
LCD_VisualizaBajo                 00000098
LCD_VisualizaOtroCaracter         00000002
Mensaje0                          0000000D
Mensajes                          0000000C
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
R1Decima_BucleExterno             000000E1
R1Decima_BucleExterno2            000000DF
R1Decima_BucleInterno             000000E3
R1ms_BucleExterno                 000000CB
R1ms_BucleInterno                 000000CD
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000013
R_ContB                           00000014
R_ContC                           00000015
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

RetardoMicros                     000000B7
Retardo_100micros                 000000B1
Retardo_100ms                     000000BD
Retardo_10micros                  000000A4
Retardo_10ms                      000000C3
Retardo_10s                       000000D5
Retardo_1Decima                   000000DE
Retardo_1ms                       000000C9
Retardo_1s                        000000DB
Retardo_200micros                 000000AE
Retardo_200ms                     000000BB
Retardo_20micros                  000000B6
Retardo_20ms                      000000C1
Retardo_20s                       000000D3
Retardo_2ms                       000000C7
Retardo_2s                        000000D9
Retardo_4micros                   000000AA
Retardo_500micros                 000000AB
Retardo_500ms                     000000DD
Retardo_50micros                  000000B3
Retardo_50ms                      000000BF
Retardo_5micros                   000000A9
Retardo_5ms                       000000C5
Retardo_5s                        000000D7
Retardos_ms                       000000CA
Rmicros_Bucle                     000000B8
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
MPASM  5.51                    MENSAJE_01.ASM   6-7-2023  19:14:50         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

Z                                 00000002
_CONFIG                           00002007
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
__DEBUG                           1


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXX----- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   235
Program Memory Words Free:   789


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

