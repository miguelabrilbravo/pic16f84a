MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*********************************** Int_Reloj_04.asm ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Programa para un reloj digital en tiempo real con puesta en hora. Visualiza los datos
                      00010 ; en formato: 
                      00011 ; - "Mensaje Publicitario" (Primera Línea) 
                      00012 ; - "Horas:Minutos:Segundos", (Segunda Línea) 
                      00013 ; (por ejemplo  "Editorial  Ra-Ma" (Primera Linea)
                      00014 ;               " 8:47:39" (Segunda Línea).
                      00015 ;
                      00016 ; Las temporizaciones necesarias del reloj, se logran mediante el Timer 0 que
                      00017 ; produce una interrupción cada 50 milisegundos.
                      00018 
                      00019 ; La "PuestaEnHora" se logra mediante dos pulsadores: "MODO" e "INCREMENTAR".
                      00020 ; Su modo de operación es:
                      00021 ;   1º. Pulsa MODO, las "Horas" se ponen intermitente y se ajustan mediante el
                      00022 ;       pulsador INCREMENTAR.
                      00023 ;   2º. Pulsa MODO y pasa a ajustar los "Minutos" de forma similar.
                      00024 ;   3º. Pulsa "MODO" y se acabó la "PuestaEnHora", pasando a visualización normal.
                      00025 ;
                      00026 ; ZONA DE DATOS **********************************************************************
                      00027 
2007   3FF1           00028         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00029         LIST       P=16F84A
                      00030         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00031 
                      00032         CBLOCK  0x0C
  0000000C            00033         Hora                                    ; Guarda las horas.
  0000000D            00034         Minuto                                  ; Guarda los minutos.
  0000000E            00035         Segundo                                 ; Guarda los segundos.
  0000000F            00036         MedioSegundo                            ; Incrementa cada medio segundo.
  00000010            00037         Registro50ms                            ; Incrementa cada 50ms
  00000011            00038         Intermitencia                           ; Para lograr la intermitencia.
  00000012            00039         FlagsAjuste                             ; Guarda los flags para establecer los 
                      00040         ENDC                                    ; ajustes de hora y minuto.
                      00041 ;
                      00042 #DEFINE  ModoPulsador           PORTB,7         ; Los pulsadores se conectan a estos
                      00043 #DEFINE  IncrementarPulsador    PORTB,6         ; pines del Puerto B.
                      00044 #DEFINE  F_AjusteHora           FlagsAjuste,1   ; Flags utilizados en la puesta en hora.
                      00045 #DEFINE  F_AjusteMinuto         FlagsAjuste,0
                      00046 #DEFINE  F_Intermitencia        Intermitencia,0 ; Si es 0, apaga en intermitencia.
  FFFFFF3D            00047 TMR0_Carga50ms          EQU     -d'195'         ; Para conseguir la interrupción del
                      00048                                                 ; Timer 0 cada 50 ms.
                      00049 ; ZONA DE CÓDIGOS ********************************************************************
                      00050 
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000                  00051         ORG     0
0000   2817           00052         goto    Inicio
0004                  00053         ORG     4
0004   282C           00054         goto    ServicioInterrupcion
                      00055 
0005                  00056 Mensajes
0005   0782           00057         addwf   PCL,F
0006                  00058 MensajePublicitario
0006   3445 3464 3469 00059         DT "Editorial  Ra-Ma", 0x00
       3474 346F 3472 
       3469 3461 346C 
       3420 3420 3452 
       3461 342D 344D 
       3461 3400 
                      00060 
0017   20F1           00061 Inicio  call    LCD_Inicializa
0018   3006           00062         movlw   MensajePublicitario
0019   2175           00063         call    LCD_Mensaje
001A   1683           00064         bsf     STATUS,RP0              ; Acceso al Banco 1.
001B   3007           00065         movlw   b'00000111'             ; Prescaler de 256 para el TMR0 y habilita
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
001C   0081           00066         movwf   OPTION_REG              ; resistencias de Pull-Up del Puerto B.
001D   1786           00067         bsf     ModoPulsador            ; Configurados como entrada.
001E   1706           00068         bsf     IncrementarPulsador
001F   1283           00069         bcf     STATUS,RP0              ; Acceso al Banco 0.
0020   0192           00070         clrf    FlagsAjuste             ; Inicializa todos los flags de la puesta en hora.
0021   018C           00071         clrf    Hora                    ; Inicializa todos los datos del reloj. 
0022   018D           00072         clrf    Minuto
0023   018E           00073         clrf    Segundo
0024   018F           00074         clrf    MedioSegundo
0025   0190           00075         clrf    Registro50ms
0026   303D           00076         movlw   TMR0_Carga50ms          ; Carga el TMR0.
0027   0081           00077         movwf   TMR0            
0028   30A8           00078         movlw   b'10101000'             ; Activa interrupción del TMR0 (TOIE), por cambio
0029   008B           00079         movwf   INTCON                  ; líneas del Puerto B (RBIE) y la general (GIE).
002A   209B           00080         call    PuestaEnHoraReset       ; Puesta en hora por primera vez.
                      00081         
                      00082 ; La sección "Principal" es el programa de mantenimiento. Solo espera las interrupciones.
                      00083 ; No se puede poner en modo de bajo consumo porque la instrucción "sleep" detiene el Timer 0.
                      00084 
002B                  00085 Principal
002B   282B           00086         goto    Principal
                      00087 
                      00088 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
                      00089 ;
                      00090 ; Detecta qué ha producido la interrupción y ejecuta la subrutina de atención correspondiente.
                      00091 
002C                  00092 ServicioInterrupcion
002C   190B           00093         btfsc   INTCON,T0IF             ; Si es una interrupción procedente del
002D   2037           00094         call    Reloj                   ; desbordamiento del Timer 0, actualiza el reloj.
002E   1C0B           00095         btfss   INTCON,RBIF             ; Si es una interrupción RBI, lee los pulsadores.
002F   2834           00096         goto    FinInterrupcion
0030   1F86           00097         btfss   ModoPulsador            ; ¿Está presionado el pulsador de "MODO"?.
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0031   2098           00098         call    PuestaEnHora            ; Sí, pasa a poner en hora.
0032   1F06           00099         btfss   IncrementarPulsador     ; ¿Pulsado "INCREMENTAR"?.
0033   206E           00100         call    Incrementar             ; Sí, pasa a incrementar el registro de tiempo
0034                  00101 FinInterrupcion                         ; correspondiente.
0034   100B           00102         bcf     INTCON,RBIF
0035   110B           00103         bcf     INTCON,T0IF
0036   0009           00104         retfie
                      00105 
                      00106 ; Subrutina "Reloj" ---------------------------------------------------------------------
                      00107 ;
                      00108 ; Esta subrutina actualiza los contadores Horas, Minutos, Segundos y Registro50ms.
                      00109 ; Se ejecuta debido a la petición de interrupción del Timer 0 cada 50 ms.
                      00110 ;
                      00111 ; Como el PIC trabaja a una frecuencia de 4 MHz, el TMR0 evoluciona cada µs y se desborda cada
                      00112 ; 195 x 256 = 49920 microsegundos. Sumádole el retardo de 71 µs y el pequeño tiempo de los
                      00113 ; saltos iniciales y de carga del contador, resulta un total de 50000 µs exactos. Es decir, el
                      00114 ; TMR0 producirá una interrupción cada 50 ms exactos, comprobado experimentalmente con la
                      00115 ; ventana "Stopwatch" del simulador del MPLAB.
                      00116 
0037   20B9           00117 Reloj   call    Retardo_50micros        ; Retardo de 71 microsegundos para
0038   20BC           00118         call    Retardo_20micros        ; ajustar a 50 milisegundos exactos.
0039   0000           00119         nop
003A   303D           00120         movlw   TMR0_Carga50ms          ; Carga el Timer 0.
003B   0081           00121         movwf   TMR0
003C   207B           00122         call    IncrementaRegistro50ms
003D   1C03           00123         btfss   STATUS,C                ; ¿Ha contado 10 veces 50 ms = 1/2 segundo?.
003E   2851           00124         goto    FinReloj                ; No. Pues sale sin visualizar el reloj.
                      00125 
                      00126 ; Si está en "ModoAjusteHora", o "ModoAjusteMinuto" conmuta el flag de intermitencia y 
                      00127 ; salta a visualizar el reloj.
                      00128 ;
003F   0892           00129         movf    FlagsAjuste,F
0040   1903           00130         btfsc   STATUS,Z
0041   2845           00131         goto    IncrementaReloj
0042   3001           00132         movlw   b'00000001'             ; Conmuta el flag F_Intermitencia cada 500 ms.
0043   0691           00133         xorwf   Intermitencia,F
0044   2850           00134         goto    ActualizaReloj          ; Visualiza el reloj y sale.
0045                  00135 IncrementaReloj
0045   1411           00136         bsf     F_Intermitencia         ; Se mantendrá siempre encendido durante
0046   2081           00137         call    IncrementaMedioSegundo  ; el funcionamiento normal.
0047   1C03           00138         btfss   STATUS,C                ; ¿Ha pasado 1 segundo?.
0048   2850           00139         goto    ActualizaReloj          ; No. Pues sale visualizando el reloj.
0049   2086           00140         call    IncrementaSegundos      ; Sí. Incrementa el segundero.
004A   1C03           00141         btfss   STATUS,C                ; ¿Han pasado 60 segundos?.
004B   2850           00142         goto    ActualizaReloj          ; No. Pues sale visualizando el reloj.
004C   208C           00143         call    IncrementaMinutos       ; Sí. Incrementa el minutero.
004D   1C03           00144         btfss   STATUS,C                ; ¿Han pasado 60 minutos?.
004E   2850           00145         goto    ActualizaReloj          ; No. Pues sale visualizando el reloj.
004F   2092           00146         call    IncrementaHoras         ; Sí. Incrementa las horas.
0050                  00147 ActualizaReloj
0050   2052           00148         call    VisualizaReloj          ; Visualiza el reloj.
0051                  00149 FinReloj
0051   0008           00150         return
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151 
                      00152 ; Subrutina "VisualizaReloj" ------------------------------------------------------------
                      00153 ;
                      00154 ; Visualiza el reloj en la segunda línea en formato: " 8:47:39".
                      00155 ; Cuando se ajusta una variable, ésta debe aparecer en intermitencia. Para ello, utiliza
                      00156 ; el flag "F_Intermitencia" que conmuta cada 500 ms en la subrutina "Reloj".
                      00157 ;
0052                  00158 VisualizaReloj
0052   3004           00159         movlw   .4                      ; Para centrar visualización
0053   2128           00160         call    LCD_PosicionLinea2      ; en la segunda línea.
0054   1C92           00161         btfss   F_AjusteHora            ; ¿Está en la puesta en hora?.
0055   2858           00162         goto    EnciendeHoras           ; No. Visualización normal.
0056   1C11           00163         btfss   F_Intermitencia         ; Sí. Intermitencia si procede.
0057   285C           00164         goto    ApagaHoras              ; Apaga las horas en la intermitencia.
0058                  00165 EnciendeHoras
0058   080C           00166         movf    Hora,W                  ; Va a visualizar las horas. 
0059   219D           00167         call    BIN_a_BCD               ; Lo pasa a BCD.
005A   215F           00168         call    LCD_Byte                ; Visualiza rechazando cero de las decenas.
005B   285D           00169         goto    VisualizaMinutos
005C                  00170 ApagaHoras
005C   2156           00171         call    LCD_DosEspaciosBlancos  ; Visualiza dos espacios en blanco.
                      00172 ;
005D                  00173 VisualizaMinutos
005D   303A           00174         movlw   ':'                     ; Envía ":" para separar datos.
005E   2135           00175         call    LCD_Caracter
005F   1C12           00176         btfss   F_AjusteMinuto          ; ¿Está en la puesta en hora?.
0060   2863           00177         goto    EnciendeMinutos
0061   1C11           00178         btfss   F_Intermitencia
0062   2867           00179         goto    ApagaMinutos
0063                  00180 EnciendeMinutos
0063   080D           00181         movf    Minuto,W                ; Visualiza minutos.
0064   219D           00182         call    BIN_a_BCD               ; Lo pasa a BCD.
0065   2166           00183         call    LCD_ByteCompleto
0066   2868           00184         goto    VisualizaSegundos
0067                  00185 ApagaMinutos
0067   2156           00186         call    LCD_DosEspaciosBlancos  ; Visualiza dos espacios en blanco.
                      00187 ;
0068                  00188 VisualizaSegundos
0068   303A           00189         movlw   ':'                     ; Envía ":" para separar datos.
0069   2135           00190         call    LCD_Caracter
006A   080E           00191         movf    Segundo,W               ; Visualiza segundos.
006B   219D           00192         call    BIN_a_BCD               ; Lo pasa a BCD.
006C   2166           00193         call    LCD_ByteCompleto
006D   0008           00194         return
                      00195 ;
                      00196 ; Subrutina "Incrementar" ---------------------------------------------------------------
                      00197 ;
                      00198 ; Subrutina de atención a la interrupción por cambio de la línea RB6 al cual se ha conectado
                      00199 ; el pulsador "INCREMENTAR". Incrementa según corresponda una sola de las variables.
                      00200 
006E                  00201 Incrementar
006E   20C7           00202         call    Retardo_20ms            ; Espera se estabilicen niveles de tensión.     
006F   1B06           00203         btfsc   IncrementarPulsador     ; Si es un rebote sale fuera.
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0070   287A           00204         goto    FinIncrementar
0071   1411           00205         bsf     F_Intermitencia         ; Visualiza siempre mientras incrementa.
0072   1892           00206         btfsc   F_AjusteHora
0073   2092           00207         call    IncrementaHoras
0074   1812           00208         btfsc   F_AjusteMinuto
0075   208C           00209         call    IncrementaMinutos
0076   2052           00210         call    VisualizaReloj          ; Visualiza mientras espera que deje
0077   20C1           00211         call    Retardo_200ms           ; de pulsar.
0078   1F06           00212         btfss   IncrementarPulsador     ; Mientras permanezca pulsado,
0079   286E           00213         goto    Incrementar             ; incrementa el digito.
007A                  00214 FinIncrementar
007A   0008           00215         return
                      00216 
                      00217 ; Subrutina "IncrementaRegistro50ms" ----------------------------------------------------
                      00218 ;
                      00219 ; Incrementa el valor de la variable Registro50ms. Cuando llega a 10, lo cual supone 
                      00220 ; medio segundo (50 ms x 10 = 500 ms), lo resetea y sale con el Carry a "1".
                      00221 ;
007B                  00222 IncrementaRegistro50ms
007B   0A90           00223         incf    Registro50ms,F
007C   300A           00224         movlw   .10
007D   0210           00225         subwf   Registro50ms,W          ; (W) = (Registro50ms) - 10
007E   1803           00226         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Registro50ms) < 10?
007F   0190           00227         clrf    Registro50ms            ; Lo inicializa si ha superado su valor máximo.
0080   0008           00228         return
                      00229 
                      00230 ; Subrutina "IncrementaMedioSegundo" --------------------------------------------------------
                      00231 ;
                      00232 ; Incrementa el valor de la variable MedioSegundo. Su bit de menor peso se pondrá a "1" una
                      00233 ; vez por segundo.
                      00234 
0081                  00235 IncrementaMedioSegundo
0081   0A8F           00236         incf    MedioSegundo,F          ; Incrementa.
0082   1403           00237         bsf     STATUS,C                ; Supone que ha llegado al segundo.
0083   1C0F           00238         btfss   MedioSegundo,0          ; El bit 0 se pondrá a uno cada segundo.
0084   1003           00239         bcf     STATUS,C
0085   0008           00240         return
                      00241 
                      00242 ; Subrutina "IncrementaSegundos" -----------------------------------------------------------
                      00243 ;
                      00244 ; Incrementa el valor de la variable Segundo. Si es igual al valor máximo de 60, lo resetea
                      00245 ; y sale con el Carry a "1".
                      00246 
0086                  00247 IncrementaSegundos
0086   0A8E           00248         incf    Segundo,F               ; Incrementa los segundos.
0087   303C           00249         movlw   .60
0088   020E           00250         subwf   Segundo,W               ; ¿Ha superado valor máximo?. (W)=(Segundo)-60.
0089   1803           00251         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Segundo) < 60?
008A   018E           00252         clrf    Segundo                 ; Lo inicializa si ha superado su valor máximo.
008B   0008           00253         return
                      00254 
                      00255 ; Subrutina "IncrementaMinutos" -----------------------------------------------------------
                      00256 ;
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00257 ; Incrementa el valor de la variable Minuto. Si igual el valor máximo de 60, lo resetea
                      00258 ; y sale con el Carry a "1".
                      00259 ;
008C                  00260 IncrementaMinutos
008C   0A8D           00261         incf    Minuto,F                ; Incrementa los minutos.
008D   303C           00262         movlw   .60
008E   020D           00263         subwf   Minuto,W                ; ¿Ha superado su valor máximo?. (W)=(Minuto)-60.
008F   1803           00264         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Minuto)<60?
0090   018D           00265         clrf    Minuto                  ; Lo inicializa si ha superado su valor máximo.
0091   0008           00266         return
                      00267 
                      00268 ; Subrutina "IncrementaHoras" -----------------------------------------------------------
                      00269 ;
                      00270 ; Incrementa el valor de la variable Hora. Si igual el valor máximo de 24, lo resetea
                      00271 ; y sale con el Carry a "1".
                      00272 ;
0092                  00273 IncrementaHoras
0092   0A8C           00274         incf    Hora,F                  ; Incrementa las horas.
0093   3018           00275         movlw   .24
0094   020C           00276         subwf   Hora,W                  ; ¿Ha superado su valor máximo?. (W)=(Hora)-24.
0095   1803           00277         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Hora)<24?
0096   018C           00278         clrf    Hora                    ; Lo inicializa si ha superado su valor máximo.
0097   0008           00279         return
                      00280 ;
                      00281 ; Subrutina "PuestaEnHora" --------------------------------------------------------------
                      00282 ;
                      00283 ; Subrutina de atención a la interrupción producida por el pulsador "MODO" que pone en hora
                      00284 ; el reloj. Cada vez que pulsa, el uno es desplazado a través del registro (FlagsAjuste),
                      00285 ; pasando a ajustar secuencialmente: horas y minutos.
                      00286 ;
                      00287 ; Para comprender el funcionamiento de esta subrutina hay que saber, que el registro FlagsModos
                      00288 ; contiene 2 flags que permite diferenciar cada uno de los ajustes de registros de tiempo.
                      00289 ; - "F_AjusteHora":     bit 1 de "FlagsAjuste", para ajustar las horas.
                      00290 ; - "F_AjusteMinuto":   bit 0 de "FlagsAjuste", para ajustar los minutos.
                      00291 ;
                      00292 ; Así pues el contenido del registro"FlagAjuste" identifica los siguientes ajustes:
                      00293 ; - (FlagsAjuste)=00000010. Está ajustando el registro "Hora".
                      00294 ; - (FlagsAjuste)=00000001. Está ajustando el registro "Minuto".
                      00295 ; - (FlagsAjuste)=00000000. Está en visualización normal del reloj en tiempo real.
                      00296 
                      00297 ; Pueden ocurrir tres casos:
                      00298 ;     - Que pulse "MODO" estando en modo de visualización normal que se identifica porque
                      00299 ;       (FlagsAjuste)=0. En este caso debe activar el flag F_AjusteHora, es decir carga
                      00300 ;       (FlagsAjuste)=b'00000010', ya que "F_AjusteHora" es el bit 1 del registro FlagsAjuste.
                      00301 ;     - Que pulse "MODO" estando ya en la puesta en hora, en cuyo caso debe pasar al ajuste
                      00302 ;       del siguiente registro de tiempo (minutos). Esto lo hace mediante un desplazamiento a
                      00303 ;       derechas. Así por ejemplo, si antes estaba ajustando las horas (FlagsAjuste)=b'00000010',
                      00304 ;       pasará a (FlagsAjuste)=b'00000001' identificado como ajuste de los minutos.
                      00305 ;     - Que pulse "MODO" estando en el último ajuste correspondiente a los minutos,
                      00306 ;       (FlagsAjuste)=b'00000001', pasará a (FlagsAjuste)=b'00000000', indicando que la puesta
                      00307 ;       en hora ha terminado y pasa a visualización normal del reloj en tiempo real.
                      00308 ;
0098                  00309 PuestaEnHora
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0098   20C7           00310         call    Retardo_20ms            ; Espera se estabilicen niveles.        
0099   1B86           00311         btfsc   ModoPulsador            ; Si es un rebote sale fuera.
009A   28A6           00312         goto    FinPuestaEnHora
009B                  00313 PuestaEnHoraReset                       ; Al pulsar "MODO" se apaga la variable de
009B   1011           00314         bcf     F_Intermitencia         ; tiempo que se va a ajustar.
009C   0892           00315         movf    FlagsAjuste,F           ; Si antes estaba en funcionamiento normal, ahora
009D   1D03           00316         btfss   STATUS,Z                ; pasa a ajustar la hora.
009E   28A4           00317         goto    AjustaSiguiente         ; Sino pasa a ajustar la variable de tiempo siguiente.
009F   1492           00318         bsf     F_AjusteHora            ; Pasa a ajustar la hora.
00A0   018E           00319         clrf    Segundo                 ; Inicializa contador de segundos y el resto.
00A1   018F           00320         clrf    MedioSegundo
00A2   0190           00321         clrf    Registro50ms
00A3   28A6           00322         goto    FinPuestaEnHora
00A4                  00323 AjustaSiguiente                         ; Desplaza un uno a la derecha del registro
00A4   1003           00324         bcf     STATUS,C                ; FlagsAjuste para ajustar secuencialmente
00A5   0C92           00325         rrf     FlagsAjuste,F           ; cada uno de los registros de tiempo: 
00A6                  00326 FinPuestaEnHora                         ; hora y minuto.
00A6   2052           00327         call    VisualizaReloj
00A7   1F86           00328         btfss   ModoPulsador            ; Ahora espera deje de pulsar.
00A8   28A6           00329         goto    FinPuestaEnHora
00A9   0008           00330         return
                      00331 
                      00332         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000013            00021         R_ContA                         ; Contadores para los retardos.
  00000014            00022         R_ContB
  00000015            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00031 ;
00AA                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
00AA   0000           00033         nop                             ; Aporta 1 ciclo máquina.
00AB   0000           00034         nop                             ; Aporta 1 ciclo máquina.
00AC   0000           00035         nop                             ; Aporta 1 ciclo máquina.
00AD   0000           00036         nop                             ; Aporta 1 ciclo máquina.
00AE   0000           00037         nop                             ; Aporta 1 ciclo máquina.
00AF                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
00AF   0000           00039         nop                             ; Aporta 1 ciclo máquina.
00B0                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
00B0   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
00B1                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
00B1   0000           00046         nop                             ; Aporta 1 ciclo máquina.
00B2   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
00B3   28BD           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00B4                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
00B4   0000           00050         nop                             ; Aporta 1 ciclo máquina.
00B5   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00B6   28BD           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00B7                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
00B7   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00B8   28BD           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00B9                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
00B9   0000           00057         nop                             ; Aporta 1 ciclo máquina.
00BA   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00BB   28BD           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00BC                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
00BC   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
00BD                  00066 RetardoMicros
00BD   0093           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
00BE                  00068 Rmicros_Bucle
00BE   0B93           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00BF   28BE           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
00C0   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
00C1                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
00C1   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C2   28D0           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C3                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
00C3   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C4   28D0           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C5                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
00C5   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C6   28D0           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C7                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
00C7   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C8   28D0           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C9                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
00C9   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00CA   28D0           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00CB                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
00CB   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00CC   28D0           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00CD                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
00CD   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00CE   28D0           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00CF                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
00CF   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
00D0                  00111 Retardos_ms
00D0   0094           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
00D1                  00113 R1ms_BucleExterno
00D1   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
00D2   0093           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
00D3                  00116 R1ms_BucleInterno
00D3   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
00D4   0B93           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
00D5   28D3           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
00D6   0B94           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00D7   28D1           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
00D8   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
00D9                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D9   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00DA   28E4           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00DB                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
00DB   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00DC   28E4           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00DD                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
00DD   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00DE   28E4           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00DF                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
00DF   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00E0   28E4           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00E1                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
00E1   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00E2   28E4           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00E3                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
00E3   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
00E4                  00160 Retardo_1Decima
00E4   0095           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
00E5                  00162 R1Decima_BucleExterno2
00E5   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
00E6   0094           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
00E7                  00165 R1Decima_BucleExterno
00E7   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
00E8   0093           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
00E9                  00168 R1Decima_BucleInterno          
00E9   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
00EA   0B93           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
00EB   28E9           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
00EC   0B94           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
00ED   28E7           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
00EE   0B95           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00EF   28E5           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
00F0   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00190 ;                       (N=  5, M=100 y K=249).
                      00333         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000016            00025         LCD_Dato
  00000017            00026         LCD_GuardaDato
  00000018            00027         LCD_GuardaTRISB
  00000019            00028         LCD_Auxiliar1
  0000001A            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
00F1                  00045 LCD_Inicializa
00F1   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
00F2   1005           00047         bcf     LCD_PinRS               ; R/W y E.
00F3   1105           00048         bcf     LCD_PinEnable
00F4   1085           00049         bcf     LCD_PinRW
00F5   1283           00050         bcf     STATUS,RP0
00F6   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00052                                         ; que se va a escribir en el LCD.
00F7   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
00F8   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00F9   20C7           00055         call    Retardo_20ms
00FA   3030           00056         movlw   b'00110000'     
00FB   2109           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
00FC   20CB           00058         call    Retardo_5ms     
00FD   3030           00059         movlw   b'00110000'     
00FE   2109           00060         call    LCD_EscribeLCD
00FF   20B4           00061         call    Retardo_200micros
0100   3030           00062         movlw   b'00110000'     
0101   2109           00063         call    LCD_EscribeLCD
0102   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
0103   2109           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
0104   2132           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
0105   2130           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
0106   212E           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
0107   2120           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
0108   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
0109                  00082 LCD_EscribeLCD
0109   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
010A   0096           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
010B   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
010C   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
010D   0496           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
010E   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
010F   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
0110   0098           00091         movwf   LCD_GuardaTRISB
0111   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
0112   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
0113   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
0114   0816           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
0115   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
0116   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
0117   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
0118   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
0119   20CD           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
011A   20B9           00102         call    Retardo_50micros
011B   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

011C   0818           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
011D   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
011E   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
011F   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
0120                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
0120   3006           00114         movlw   b'00000110'
0121   2933           00115         goto    LCD_EnviaComando
0122                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
0122   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
0123   2933           00118         goto    LCD_EnviaComando
0124                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
0124   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
0125   2933           00121         goto    LCD_EnviaComando
0126                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
0126   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
0127   2933           00124         goto    LCD_EnviaComando        ; registro W.
0128                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
0128   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
0129   2933           00127         goto    LCD_EnviaComando        ; registro W.
012A                  00128 LCD_OFF                         ; Pantalla apagada.
012A   3008           00129         movlw   b'00001000'
012B   2933           00130         goto    LCD_EnviaComando
012C                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
012C   300E           00132         movlw   b'00001110'
012D   2933           00133         goto    LCD_EnviaComando
012E                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
012E   300C           00135         movlw   b'00001100'
012F   2933           00136         goto    LCD_EnviaComando
0130                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
0130   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
0131   2933           00139         goto    LCD_EnviaComando
0132                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
0132   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
0133                  00151 LCD_EnviaComando
0133   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0134   2937           00153         goto    LCD_Envia
0135                  00154 LCD_Caracter
0135   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
0136   213C           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0137                  00157 LCD_Envia
0137   0097           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
0138   2109           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
0139   0E17           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
013A   2109           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
013B   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
013C                  00177 LCD_CodigoCGROM
013C   0096           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
013D                  00179 LCD_EnheMinuscula                       ; un carácter especial.
013D   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
013E   1D03           00181         btfss   STATUS,Z
013F   2943           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
0140   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
0141   0096           00184         movwf   LCD_Dato
0142   2950           00185         goto    LCD_FinCGROM
0143                  00186 LCD_EnheMayuscula
0143   0816           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0144   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
0145   1D03           00189         btfss   STATUS,Z
0146   294A           00190         goto    LCD_Grado               ; No es "Ñ".
0147   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
0148   0096           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
0149   2950           00193         goto    LCD_FinCGROM    
014A                  00194 LCD_Grado
014A   0816           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
014B   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
014C   1D03           00197         btfss   STATUS,Z
014D   2950           00198         goto    LCD_FinCGROM            ; No es "º".
014E   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
014F   0096           00200         movwf   LCD_Dato
0150                  00201 LCD_FinCGROM
0150   0816           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
0151   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
0152                  00209 LCD_LineaEnBlanco
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0152   3010           00210         movlw   LCD_CaracteresPorLinea
0153   2959           00211         goto    LCD_EnviaBlancos
0154                  00212 LCD_UnEspacioBlanco
0154   3001           00213         movlw   .1
0155   2959           00214         goto    LCD_EnviaBlancos
0156                  00215 LCD_DosEspaciosBlancos
0156   3002           00216         movlw   .2
0157   2959           00217         goto    LCD_EnviaBlancos
0158                  00218 LCD_TresEspaciosBlancos
0158   3003           00219         movlw   .3
0159                  00220 LCD_EnviaBlancos
0159   0099           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
015A                  00222 LCD_EnviaOtroBlanco     
015A   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
015B   2135           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
015C   0B99           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
015D   295A           00226         goto    LCD_EnviaOtroBlanco
015E   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
015F                  00240 LCD_Byte
015F   009A           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0160   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
0161   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0162   2967           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0163   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0164   2135           00246         call    LCD_Caracter
0165   2969           00247         goto    LCD_VisualizaBajo
                      00248 
0166                  00249 LCD_ByteCompleto
0166   009A           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0167                  00251 LCD_VisualizaAlto
0167   0E1A           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0168   216A           00253         call    LCD_Nibble              ; Lo visualiza.
0169                  00254 LCD_VisualizaBajo
0169   081A           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
016A                  00266 LCD_Nibble
016A   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
016B   0099           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
016C   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
016D   1C03           00270         btfss   STATUS,C        
016E   2972           00271         goto    LCD_EnviaByteLetra
016F   0819           00272         movf    LCD_Auxiliar1,W
0170   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
0171   2974           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0172                  00275 LCD_EnviaByteLetra
0172   0819           00276         movf    LCD_Auxiliar1,W
0173   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0174                  00278 LCD_FinVisualizaDigito
0174   2935           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00334         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  0000001B            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  0000001C            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
0175                  00042 LCD_Mensaje
0175   009B           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
0176   3005           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0177   029B           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
0178   039B           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0179                  00047 LCD_VisualizaOtroCaracter
0179   081B           00048         movf    LCD_ApuntaCaracter,W
017A   2005           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
017B   009C           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
017C   089C           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
017D   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
017E   2982           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
017F                  00054 LCD_NoUltimoCaracter
017F   2135           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0180   0A9B           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
0181   2979           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
0182                  00058 LCD_FinMensaje
0182   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  0000001D            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
0183                  00073 LCD_MensajeMovimiento
0183   009B           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0184   3005           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0185   029B           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
0186   039B           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0187                  00078 LCD_PrimeraPosicion
0187   019D           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
0188   2130           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
0189                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
0189   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
018A   021D           00083         subwf   LCD_CursorPosicion,W
018B   1D03           00084         btfss   STATUS,Z
018C   2992           00085         goto    LCD_NoEsFinalLinea
018D                  00086 LCD_EsFinalLinea
018D   20C1           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

018E   20C1           00088         call    Retardo_200ms
018F   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
0190   029B           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
0191   2987           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
0192                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
0192   081B           00093         movf    LCD_ApuntaCaracter,W
0193   2005           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0194   009C           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0195   089C           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0196   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0197   299C           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
0198                  00099 LCD_NoUltimoCaracter2
0198   2135           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0199   0A9D           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
019A   0A9B           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
019B   2989           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
019C                  00105 LCD_FinMovimiento                       ; de la línea.
019C   0008           00106         return                          ; Vuelve al programa principal.
                      00335         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10 tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  0000001E            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  0000001F            00022         BCD_Decenas                     ; la última asignada.
  00000020            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
019D                  00026 BIN_a_BCD
019D   019E           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
019E   019F           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
019F   00A0           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
01A0                  00030 BCD_Resta10
01A0   300A           00031         movlw   .10                     ; A las unidades se le va restando 10 en cada
01A1   0220           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
01A2   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?.
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01A3   29AD           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
01A4                  00035 BCD_IncrementaDecenas
01A4   00A0           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
01A5   0A9F           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
01A6   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
01A7   021F           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
01A8   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?.
01A9   29A0           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
01AA                  00042 BCD_IncrementaCentenas                  ; las unidades.
01AA   019F           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
01AB   0A9E           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
01AC   29A0           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
01AD                  00046 BIN_BCD_Fin
01AD   0E1F           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
01AE   0720           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
01AF   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal, no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00336         END
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 20


SYMBOL TABLE
  LABEL                             VALUE 

ActualizaReloj                    00000050
AjustaSiguiente                   000000A4
ApagaHoras                        0000005C
ApagaMinutos                      00000067
BCD_Centenas                      0000001E
BCD_Decenas                       0000001F
BCD_IncrementaCentenas            000001AA
BCD_IncrementaDecenas             000001A4
BCD_Resta10                       000001A0
BCD_Unidades                      00000020
BIN_BCD_Fin                       000001AD
BIN_a_BCD                         0000019D
C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
EnciendeHoras                     00000058
EnciendeMinutos                   00000063
F                                 00000001
FSR                               00000004
F_AjusteHora                      FlagsAjuste,1
F_AjusteMinuto                    FlagsAjuste,0
F_Intermitencia                   Intermitencia,0
FinIncrementar                    0000007A
FinInterrupcion                   00000034
FinPuestaEnHora                   000000A6
FinReloj                          00000051
FlagsAjuste                       00000012
GIE                               00000007
Hora                              0000000C
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
IncrementaHoras                   00000092
IncrementaMedioSegundo            00000081
IncrementaMinutos                 0000008C
IncrementaRegistro50ms            0000007B
IncrementaReloj                   00000045
IncrementaSegundos                00000086
Incrementar                       0000006E
IncrementarPulsador               PORTB,6
Inicio                            00000017
Intermitencia                     00000011
LCD_2Lineas4Bits5x7               00000132
LCD_ApuntaCaracter                0000001B
LCD_Auxiliar1                     00000019
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 21


SYMBOL TABLE
  LABEL                             VALUE 

LCD_Auxiliar2                     0000001A
LCD_Borra                         00000130
LCD_BusDatos                      PORTB
LCD_Byte                          0000015F
LCD_ByteCompleto                  00000166
LCD_Caracter                      00000135
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   0000013C
LCD_CursorIncr                    00000120
LCD_CursorOFF                     0000012E
LCD_CursorON                      0000012C
LCD_CursorPosicion                0000001D
LCD_Dato                          00000016
LCD_DosEspaciosBlancos            00000156
LCD_EnheMayuscula                 00000143
LCD_EnheMinuscula                 0000013D
LCD_Envia                         00000137
LCD_EnviaBlancos                  00000159
LCD_EnviaByteLetra                00000172
LCD_EnviaComando                  00000133
LCD_EnviaOtroBlanco               0000015A
LCD_EsFinalLinea                  0000018D
LCD_EscribeLCD                    00000109
LCD_FinCGROM                      00000150
LCD_FinMensaje                    00000182
LCD_FinMovimiento                 0000019C
LCD_FinVisualizaDigito            00000174
LCD_Grado                         0000014A
LCD_GuardaDato                    00000017
LCD_GuardaTRISB                   00000018
LCD_Inicializa                    000000F1
LCD_Linea1                        00000122
LCD_Linea2                        00000124
LCD_LineaEnBlanco                 00000152
LCD_Mensaje                       00000175
LCD_MensajeMovimiento             00000183
LCD_Nibble                        0000016A
LCD_NoEsFinalLinea                00000192
LCD_NoUltimoCaracter              0000017F
LCD_NoUltimoCaracter2             00000198
LCD_OFF                           0000012A
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                00000126
LCD_PosicionLinea2                00000128
LCD_PrimeraPosicion               00000187
LCD_TresEspaciosBlancos           00000158
LCD_UnEspacioBlanco               00000154
LCD_ValorCaracter                 0000001C
LCD_VisualizaAlto                 00000167
LCD_VisualizaBajo                 00000169
LCD_VisualizaCaracter             00000189
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 22


SYMBOL TABLE
  LABEL                             VALUE 

LCD_VisualizaOtroCaracter         00000179
MedioSegundo                      0000000F
MensajePublicitario               00000006
Mensajes                          00000005
Minuto                            0000000D
ModoPulsador                      PORTB,7
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         0000002B
PuestaEnHora                      00000098
PuestaEnHoraReset                 0000009B
R1Decima_BucleExterno             000000E7
R1Decima_BucleExterno2            000000E5
R1Decima_BucleInterno             000000E9
R1ms_BucleExterno                 000000D1
R1ms_BucleInterno                 000000D3
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000013
R_ContB                           00000014
R_ContC                           00000015
Registro50ms                      00000010
Reloj                             00000037
RetardoMicros                     000000BD
Retardo_100micros                 000000B7
Retardo_100ms                     000000C3
Retardo_10micros                  000000AA
Retardo_10ms                      000000C9
Retardo_10s                       000000DB
Retardo_1Decima                   000000E4
Retardo_1ms                       000000CF
Retardo_1s                        000000E1
Retardo_200micros                 000000B4
Retardo_200ms                     000000C1
Retardo_20micros                  000000BC
Retardo_20ms                      000000C7
Retardo_20s                       000000D9
Retardo_2ms                       000000CD
Retardo_2s                        000000DF
Retardo_4micros                   000000B0
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 23


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_500micros                 000000B1
Retardo_500ms                     000000E3
Retardo_50micros                  000000B9
Retardo_50ms                      000000C5
Retardo_5micros                   000000AF
Retardo_5ms                       000000CB
Retardo_5s                        000000DD
Retardos_ms                       000000D0
Rmicros_Bucle                     000000BE
STATUS                            00000003
Segundo                           0000000E
ServicioInterrupcion              0000002C
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0_Carga50ms                    FFFFFF3D
TRISA                             00000085
TRISB                             00000086
VisualizaMinutos                  0000005D
VisualizaReloj                    00000052
VisualizaSegundos                 00000068
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM 03.50 Released                         INT_RELOJ_04.ASM   10-9-2003  11:55:51         PAGE 24


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   429
Program Memory Words Free:   595


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

