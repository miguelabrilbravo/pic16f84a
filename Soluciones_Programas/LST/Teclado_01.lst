MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************** Teclado_01.asm **********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; El módulo LCD visualiza el orden de la tecla pulsada expresado en decimal. Utiliza 
                      00010 ; técnica "Polling" o lectura constante del puerto al que está conectado el teclado.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 
2007   3FF1           00014         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00015         LIST       P=16F84A
                      00016         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00017 
                      00018         CBLOCK  0x0C
                      00019         ENDC
                      00020 
                      00021 ; ZONA DE CÓDIGOS ********************************************************************
                      00022 
0000                  00023         ORG     0
0000                  00024 Inicio
0000   205B           00025         call    LCD_Inicializa
0001   2020           00026         call    Teclado_Inicializa      ; Configura las líneas del teclado.
0002                  00027 Principal
0002   202D           00028         call    Teclado_LeeOrdenTecla   ; Lee el teclado.
0003   1C03           00029         btfss   STATUS,C                ; ¿Pulsa alguna tecla?, ¿C=1?
0004   2808           00030         goto    Fin                     ; No, por tanto sale.
0005   2048           00031         call    BIN_a_BCD               ; Lo pasa a BCD.
0006   20D0           00032         call    LCD_ByteCompleto        ; Visualiza en pantalla.
0007   2025           00033         call    Teclado_EsperaDejePulsar; No sale hasta que levante el dedo.
0008   2802           00034 Fin     goto    Principal
                      00035 
                      00036         INCLUDE  <TECLADO.INC>          ; Subrutinas de control del teclado.
                      00001 ;**************************** Librería "TECLADO.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para la gestión de un teclado organizado en una matriz de 4 x 4 y 
                      00010 ; conectado al Puerto B según la disposición siguiente:
                      00011 ;
                      00012 ;                RB4 RB5 RB6 RB7
                      00013 ;                  ^    ^    ^    ^
                      00014 ;               |----|----|----|----|
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00015 ;       RB0 --> |  0 |  1 |  2 |  3 |
                      00016 ;               |----|----|----|----|
                      00017 ;       RB1 --> |  4 |  5 |  6 |  7 |
                      00018 ;               |----|----|----|----|
                      00019 ;       RB2 --> |  8 |  9 | 10| 11|
                      00020 ;               |----|----|----|----|
                      00021 ;       RB3 --> | 12| 13| 14| 15|
                      00022 ;               |----|----|----|----|
                      00023 ;
                      00024 ; Los números que se han dibujado dentro de cada cuadrado es el número de orden de las teclas
                      00025 ; que no tiene por qué coincidir con lo serigrafiado sobre ellas. El paso del número de orden
                      00026 ; de la tecla al valor que hay serigrafiado sobre la misma, se hace con una tabla de conversión.
                      00027 ;
                      00028 ; ZONA DE DATOS **********************************************************************
                      00029 ;
                      00030         CBLOCK
  0000000C            00031         Tecl_TeclaOrden                 ; Orden de la tecla a chequear.
                      00032         ENDC
                      00033 
  0000000F            00034 Tecl_UltimaTecla        EQU     d'15'           ; Valor de orden de la última tecla utilizada.
                      00035 
                      00036 ; Subrutina "Teclado_LeeHex" ************************************************************
                      00037 ;
                      00038 ; Cada tecla tiene asignado un número de orden que es contabilizado en la variable
                      00039 ; Tecl_TeclaOrden. Para convertir a su valor según el tipo de teclado en concreto, se
                      00040 ; utiliza una tabla de conversión. 
                      00041 ; A continuación, se expone la relación entre el número de orden de la tecla y los
                      00042 ; valores correspondientes para el teclado hexadecimal más utilizado.
                      00043 ;
                      00044 ;           ORDEN DE TECLA:             TECLADO HEX. UTILIZADO:
                      00045 ;                0   1   2   3                  1  2  3  F
                      00046 ;                4   5   6   7                  4  5  6  E
                      00047 ;                8   9  10  11                  7  8  9  D
                      00048 ;               12  13  14  15                  A  0  B  C
                      00049 ;
                      00050 ; Así, en este ejemplo, la tecla "7" ocupa el orden 8, la tecla "F" ocupa el orden 3 y la
                      00051 ; tecla "9" el orden 10.
                      00052 
                      00053 ; Si cambia el teclado, también hay cambiar de tabla de conversión.
                      00054 ;
                      00055 ; Entrada:      En (W) el orden de la tecla pulsada.
                      00056 ; Salida:       En (W) el valor hexadecimal para este teclado concreto.
                      00057 ;
0009                  00058 Teclado_LeeHex
0009   202D           00059         call    Teclado_LeeOrdenTecla   ; Lee el Orden de la tecla pulsada
000A   1C03           00060         btfss   STATUS,C                ; ¿Pulsa alguna tecla?, ¿C=1?
000B   280E           00061         goto    Tecl_FinLeeHex          ; No, por tanto sale.
000C   200F           00062         call    Tecl_ConvierteOrdenEnHex        ; Lo convierte en su valor real mediante tabla.
000D   1403           00063         bsf     STATUS,C                ; Vuelve a posicionar el Carry, porque la
000E                  00064 Tecl_FinLeeHex                          ; instrucción "addwf PCL,F" lo pone a 0.
000E   0008           00065         return
                      00066 ;
000F                  00067 Tecl_ConvierteOrdenEnHex                        ; Según el teclado utilizado resulta:
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F   0782           00068         addwf   PCL,F
0010   3401 3402 3403 00069         DT      1h,2h,3h,0Fh            ; Primera fila del teclado.
       340F 
0014   3404 3405 3406 00070         DT      4h,5h,6h,0Eh            ; Segunda fila del teclado
       340E 
0018   3407 3408 3409 00071         DT      7h,8h,9h,0Dh            ; Tercera fila del teclado.
       340D 
001C   340A 3400 340B 00072         DT      0Ah,0h,0Bh,0Ch          ; Cuarta fila del teclado.
       340C 
0020                  00073 Teclado_FinTablaHex
                      00074 ;
                      00075 ; Esta tabla se sitúa al principio de la librería con el propósito que no supere la
                      00076 ; posición 0FFh de memoria ROM de programa. De todas formas, en caso que así fuera 
                      00077 ; visualizaría el siguiente mensaje de error en el proceso de ensamblado:
                      00078 ;
                      00079         IF (Teclado_FinTablaHex > 0xFF)
                      00080                 ERROR   "Atención: La tabla ha superado el tamaño de la página de los"
                      00081                 MESSG   "primeros 256 bytes de memoria ROM. NO funcionará correctamente."
                      00082         ENDIF
                      00083         
                      00084 ; Subrutina "Teclado_Inicializa" --------------------------------------------------------
                      00085 ;
                      00086 ; Esta subrutina configura las líneas del Puerto B según la conexión del teclado realizada
                      00087 ; y comprueba que no hay pulsada tecla alguna al principio.
                      00088 
0020                  00089 Teclado_Inicializa
0020   1683           00090         bsf     STATUS,RP0              ; Configura las líneas del puerto:
0021   30F0           00091         movlw   b'11110000'             ; <RB7:RB4> entradas, <RB3:RB0> salidas
0022   0086           00092         movwf   PORTB
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0023   1381           00093         bcf     OPTION_REG,NOT_RBPU     ; Habilita resistencia de Pull-Up del Puerto B.
0024   1283           00094         bcf     STATUS,RP0              ; Acceso al banco 0.
                      00095 ;       call    Teclado_EsperaDejePulsar
                      00096 ;       return
                      00097 ;
                      00098 ; Subrutina "Teclado_EsperaDejePulsar" --------------------------------------------------
                      00099 ;
                      00100 ;Permanece en esta subrutina mientras siga pulsada la tecla.
                      00101 ;
  000000F0            00102 Teclado_Comprobacion    EQU     b'11110000'
                      00103 
0025                  00104 Teclado_EsperaDejePulsar:
0025   30F0           00105         movlw   Teclado_Comprobacion    ; Pone a cero las cuatro líneas de salida del 
0026   0086           00106         movwf   PORTB                   ; Puerto B.
0027                  00107 Teclado_SigueEsperando
0027   20FC           00108         call    Retardo_20ms            ; Espera a que se estabilicen los niveles de tensión.
0028   0806           00109         movf    PORTB,W         ; Lee el Puerto B.
0029   3CF0           00110         sublw   Teclado_Comprobacion    ; Si es lo mismo que escribió es que ya no pulsa 
002A   1D03           00111         btfss   STATUS,Z                ; tecla alguna.
002B   2827           00112         goto    Teclado_SigueEsperando
002C   0008           00113         return
                      00114 ;
                      00115 ; Subrutina "Teclado_LeeOrdenTecla" -----------------------------------------------------
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00116 ;
                      00117 ; Lee el teclado, obteniendo el orden de la tecla pulsada. 
                      00118 ;
                      00119 ; Salida:       En (W) el número de orden de la tecla pulsada. Además Carry se pone a "1" si
                      00120 ;               se pulsa una tecla ó a "0" si no se pulsa tecla alguna.
                      00121 ;
002D                  00122 Teclado_LeeOrdenTecla:
002D   018C           00123         clrf    Tecl_TeclaOrden         ; Todavía no ha empezado a chequear el teclado.
002E   30FE           00124         movlw   b'11111110'             ; Va a chequear primera fila.
002F                  00125 Tecl_ChequeaFila                                ; (Ver esquema de conexión).
002F   0086           00126         movwf   PORTB                   ; Activa la fila correspondiente.
0030                  00127 Tecl_Columna1
0030   1E06           00128         btfss   PORTB,4                 ; Chequea 1ª columna buscando un cero. 
0031   2845           00129         goto    Tecl_GuardaValor                ; Sí, es cero y por tanto guarda su valor y sale.
0032   0A8C           00130         incf    Tecl_TeclaOrden,F               ; Va a chequear la siguiente tecla.
0033                  00131 Tecl_Columna2                           ; Repite proceso para las siguientes 
0033   1E86           00132         btfss   PORTB,5                 ; columnas.
0034   2845           00133         goto    Tecl_GuardaValor
0035   0A8C           00134         incf    Tecl_TeclaOrden,F
0036                  00135 Tecl_Columna3           
0036   1F06           00136         btfss   PORTB,6
0037   2845           00137         goto    Tecl_GuardaValor
0038   0A8C           00138         incf    Tecl_TeclaOrden,F
0039                  00139 Tecl_Columna4           
0039   1F86           00140         btfss   PORTB,7
003A   2845           00141         goto    Tecl_GuardaValor
003B   0A8C           00142         incf    Tecl_TeclaOrden,F
                      00143 ;
                      00144 ; Comprueba si ha chequeado la última tecla, en cuyo caso sale. Para ello testea si
                      00145 ; el contenido del registro Tecl_TeclaOrden es igual al número de teclas del teclado.
                      00146 ;
003C                  00147 Tecl_TerminaColumnas
003C   300F           00148         movlw   Tecl_UltimaTecla
003D   020C           00149         subwf   Tecl_TeclaOrden,W               ; (W) = (Tecl_TeclaOrden)-Tecl_UltimaTecla.
003E   1803           00150         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Tecl_TeclaOrden)<15?.
003F   2843           00151         goto    Tecl_NoPulsada          ; No, se ha llegado al final del chequeo.
0040   1403           00152         bsf     STATUS,C                ; Sí. Va a chequear la siguiente fila.
0041   0D06           00153         rlf     PORTB,W         ; Apunta a la siguiente fila.
0042   282F           00154         goto    Tecl_ChequeaFila        
0043                  00155 Tecl_NoPulsada
0043   1003           00156         bcf     STATUS,C                ; Posiciona C=0, indicando que no ha pulsado
0044   2847           00157         goto    Tecl_FinTecladoLee      ; tecla alguna y sale.
0045                  00158 Tecl_GuardaValor
0045   080C           00159         movf    Tecl_TeclaOrden,W               ; El orden de la tecla pulsada en (W) y sale.
0046   1403           00160         bsf     STATUS,C                ; Como hay tecla tecla pulsada, pone C=1. 
0047                  00161 Tecl_FinTecladoLee
0047   0008           00162         return
                      00163         
                      00164 ;       ===================================================================
                      00165 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00166 ;         E. Palacios, F. Remiro y L. López.
                      00167 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00168 ;       ===================================================================
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00037         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10 tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  0000000D            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  0000000E            00022         BCD_Decenas                     ; la última asignada.
  0000000F            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
0048                  00026 BIN_a_BCD
0048   018D           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
0049   018E           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
004A   008F           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
004B                  00030 BCD_Resta10
004B   300A           00031         movlw   .10                     ; A las unidades se le va restando 10 en cada
004C   020F           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
004D   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?.
004E   2858           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
004F                  00035 BCD_IncrementaDecenas
004F   008F           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
0050   0A8E           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
0051   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
0052   020E           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
0053   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?.
0054   284B           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
0055                  00042 BCD_IncrementaCentenas                  ; las unidades.
0055   018E           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
0056   0A8D           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
0057   284B           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
0058                  00046 BIN_BCD_Fin
0058   0E0E           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
0059   070F           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
005A   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal, no aquí.
                      00052 
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00038         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000010            00025         LCD_Dato
  00000011            00026         LCD_GuardaDato
  00000012            00027         LCD_GuardaTRISB
  00000013            00028         LCD_Auxiliar1
  00000014            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
005B                  00045 LCD_Inicializa
005B   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
005C   1005           00047         bcf     LCD_PinRS               ; R/W y E.
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005D   1105           00048         bcf     LCD_PinEnable
005E   1085           00049         bcf     LCD_PinRW
005F   1283           00050         bcf     STATUS,RP0
0060   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
0061   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
0062   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0063   20FC           00055         call    Retardo_20ms
0064   3030           00056         movlw   b'00110000'     
0065   2073           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0066   2100           00058         call    Retardo_5ms     
0067   3030           00059         movlw   b'00110000'     
0068   2073           00060         call    LCD_EscribeLCD
0069   20E9           00061         call    Retardo_200micros
006A   3030           00062         movlw   b'00110000'     
006B   2073           00063         call    LCD_EscribeLCD
006C   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
006D   2073           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
006E   209C           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
006F   209A           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
0070   2098           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
0071   208A           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
0072   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
0073                  00082 LCD_EscribeLCD
0073   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
0074   0090           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
0075   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
0076   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
0077   0490           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
0078   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0079   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
007A   0092           00091         movwf   LCD_GuardaTRISB
007B   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
007C   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
007D   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
007E   0810           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
007F   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
0080   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
0081   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0082   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
0083   2102           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
0084   20EE           00102         call    Retardo_50micros
0085   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
0086   0812           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
0087   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
0088   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
0089   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
008A                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
008A   3006           00114         movlw   b'00000110'
008B   289D           00115         goto    LCD_EnviaComando
008C                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
008C   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
008D   289D           00118         goto    LCD_EnviaComando
008E                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
008E   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
008F   289D           00121         goto    LCD_EnviaComando
0090                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
0090   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
0091   289D           00124         goto    LCD_EnviaComando        ; registro W.
0092                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
0092   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
0093   289D           00127         goto    LCD_EnviaComando        ; registro W.
0094                  00128 LCD_OFF                         ; Pantalla apagada.
0094   3008           00129         movlw   b'00001000'
0095   289D           00130         goto    LCD_EnviaComando
0096                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
0096   300E           00132         movlw   b'00001110'
0097   289D           00133         goto    LCD_EnviaComando
0098                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
0098   300C           00135         movlw   b'00001100'
0099   289D           00136         goto    LCD_EnviaComando
009A                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
009A   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
009B   289D           00139         goto    LCD_EnviaComando
009C                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
009C   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
009D                  00151 LCD_EnviaComando
009D   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

009E   28A1           00153         goto    LCD_Envia
009F                  00154 LCD_Caracter
009F   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00A0   20A6           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00A1                  00157 LCD_Envia
00A1   0091           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00A2   2073           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00A3   0E11           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
00A4   2073           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00A5   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00A6                  00177 LCD_CodigoCGROM
00A6   0090           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00A7                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00A7   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00A8   1D03           00181         btfss   STATUS,Z
00A9   28AD           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00AA   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00AB   0090           00184         movwf   LCD_Dato
00AC   28BA           00185         goto    LCD_FinCGROM
00AD                  00186 LCD_EnheMayuscula
00AD   0810           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00AE   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00AF   1D03           00189         btfss   STATUS,Z
00B0   28B4           00190         goto    LCD_Grado               ; No es "Ñ".
00B1   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00B2   0090           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00B3   28BA           00193         goto    LCD_FinCGROM    
00B4                  00194 LCD_Grado
00B4   0810           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00B5   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00B6   1D03           00197         btfss   STATUS,Z
00B7   28BA           00198         goto    LCD_FinCGROM            ; No es "º".
00B8   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00B9   0090           00200         movwf   LCD_Dato
00BA                  00201 LCD_FinCGROM
00BA   0810           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
00BB   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
00BC                  00209 LCD_LineaEnBlanco
00BC   3010           00210         movlw   LCD_CaracteresPorLinea
00BD   28C3           00211         goto    LCD_EnviaBlancos
00BE                  00212 LCD_UnEspacioBlanco
00BE   3001           00213         movlw   .1
00BF   28C3           00214         goto    LCD_EnviaBlancos
00C0                  00215 LCD_DosEspaciosBlancos
00C0   3002           00216         movlw   .2
00C1   28C3           00217         goto    LCD_EnviaBlancos
00C2                  00218 LCD_TresEspaciosBlancos
00C2   3003           00219         movlw   .3
00C3                  00220 LCD_EnviaBlancos
00C3   0093           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00C4                  00222 LCD_EnviaOtroBlanco     
00C4   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
00C5   209F           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00C6   0B93           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00C7   28C4           00226         goto    LCD_EnviaOtroBlanco
00C8   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
00C9                  00240 LCD_Byte
00C9   0094           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00CA   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
00CB   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
00CC   28D1           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
00CD   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
00CE   209F           00246         call    LCD_Caracter
00CF   28D3           00247         goto    LCD_VisualizaBajo
                      00248 
00D0                  00249 LCD_ByteCompleto
00D0   0094           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00D1                  00251 LCD_VisualizaAlto
00D1   0E14           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
00D2   20D4           00253         call    LCD_Nibble              ; Lo visualiza.
00D3                  00254 LCD_VisualizaBajo
00D3   0814           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
00D4                  00266 LCD_Nibble
00D4   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
00D5   0093           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
00D6   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
00D7   1C03           00270         btfss   STATUS,C        
00D8   28DC           00271         goto    LCD_EnviaByteLetra
00D9   0813           00272         movf    LCD_Auxiliar1,W
00DA   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00DB   28DE           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00DC                  00275 LCD_EnviaByteLetra
00DC   0813           00276         movf    LCD_Auxiliar1,W
00DD   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
00DE                  00278 LCD_FinVisualizaDigito
00DE   289F           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00039         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000015            00021         R_ContA                         ; Contadores para los retardos.
  00000016            00022         R_ContB
  00000017            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00031 ;
00DF                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
00DF   0000           00033         nop                             ; Aporta 1 ciclo máquina.
00E0   0000           00034         nop                             ; Aporta 1 ciclo máquina.
00E1   0000           00035         nop                             ; Aporta 1 ciclo máquina.
00E2   0000           00036         nop                             ; Aporta 1 ciclo máquina.
00E3   0000           00037         nop                             ; Aporta 1 ciclo máquina.
00E4                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
00E4   0000           00039         nop                             ; Aporta 1 ciclo máquina.
00E5                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
00E5   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
00E6                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
00E6   0000           00046         nop                             ; Aporta 1 ciclo máquina.
00E7   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
00E8   28F2           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00E9                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
00E9   0000           00050         nop                             ; Aporta 1 ciclo máquina.
00EA   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00EB   28F2           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00EC                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
00EC   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00ED   28F2           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00EE                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
00EE   0000           00057         nop                             ; Aporta 1 ciclo máquina.
00EF   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00F0   28F2           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00F1                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
00F1   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
00F2                  00066 RetardoMicros
00F2   0095           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
00F3                  00068 Rmicros_Bucle
00F3   0B95           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00F4   28F3           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
00F5   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
00F6                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
00F6   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F7   2905           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00F8                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
00F8   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00F9   2905           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00FA                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
00FA   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00FB   2905           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00FC                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
00FC   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00FD   2905           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00FE                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
00FE   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00FF   2905           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0100                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0100   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0101   2905           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0102                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0102   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0103   2905           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0104                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0104   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
0105                  00111 Retardos_ms
0105   0096           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
0106                  00113 R1ms_BucleExterno
0106   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
0107   0095           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
0108                  00116 R1ms_BucleInterno
0108   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
0109   0B95           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
010A   2908           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
010B   0B96           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
010C   2906           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
010D   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
010E                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010E   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
010F   2919           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0110                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0110   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0111   2919           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0112                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0112   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0113   2919           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0114                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
0114   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0115   2919           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0116                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
0116   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0117   2919           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0118                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
0118   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
0119                  00160 Retardo_1Decima
0119   0097           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
011A                  00162 R1Decima_BucleExterno2
011A   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
011B   0096           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
011C                  00165 R1Decima_BucleExterno
011C   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
011D   0095           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
011E                  00168 R1Decima_BucleInterno          
011E   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
011F   0B95           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0120   291E           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0121   0B96           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0122   291C           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0123   0B97           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0124   291A           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
0125   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00190 ;                       (N=  5, M=100 y K=249).
                      00040         END
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

BCD_Centenas                      0000000D
BCD_Decenas                       0000000E
BCD_IncrementaCentenas            00000055
BCD_IncrementaDecenas             0000004F
BCD_Resta10                       0000004B
BCD_Unidades                      0000000F
BIN_BCD_Fin                       00000058
BIN_a_BCD                         00000048
C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
Fin                               00000008
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000000
LCD_2Lineas4Bits5x7               0000009C
LCD_Auxiliar1                     00000013
LCD_Auxiliar2                     00000014
LCD_Borra                         0000009A
LCD_BusDatos                      PORTB
LCD_Byte                          000000C9
LCD_ByteCompleto                  000000D0
LCD_Caracter                      0000009F
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000A6
LCD_CursorIncr                    0000008A
LCD_CursorOFF                     00000098
LCD_CursorON                      00000096
LCD_Dato                          00000010
LCD_DosEspaciosBlancos            000000C0
LCD_EnheMayuscula                 000000AD
LCD_EnheMinuscula                 000000A7
LCD_Envia                         000000A1
LCD_EnviaBlancos                  000000C3
LCD_EnviaByteLetra                000000DC
LCD_EnviaComando                  0000009D
LCD_EnviaOtroBlanco               000000C4
LCD_EscribeLCD                    00000073
LCD_FinCGROM                      000000BA
LCD_FinVisualizaDigito            000000DE
LCD_Grado                         000000B4
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

LCD_GuardaDato                    00000011
LCD_GuardaTRISB                   00000012
LCD_Inicializa                    0000005B
LCD_Linea1                        0000008C
LCD_Linea2                        0000008E
LCD_LineaEnBlanco                 000000BC
LCD_Nibble                        000000D4
LCD_OFF                           00000094
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                00000090
LCD_PosicionLinea2                00000092
LCD_TresEspaciosBlancos           000000C2
LCD_UnEspacioBlanco               000000BE
LCD_VisualizaAlto                 000000D1
LCD_VisualizaBajo                 000000D3
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000002
R1Decima_BucleExterno             0000011C
R1Decima_BucleExterno2            0000011A
R1Decima_BucleInterno             0000011E
R1ms_BucleExterno                 00000106
R1ms_BucleInterno                 00000108
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000015
R_ContB                           00000016
R_ContC                           00000017
RetardoMicros                     000000F2
Retardo_100micros                 000000EC
Retardo_100ms                     000000F8
Retardo_10micros                  000000DF
Retardo_10ms                      000000FE
Retardo_10s                       00000110
Retardo_1Decima                   00000119
Retardo_1ms                       00000104
Retardo_1s                        00000116
Retardo_200micros                 000000E9
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 18


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_200ms                     000000F6
Retardo_20micros                  000000F1
Retardo_20ms                      000000FC
Retardo_20s                       0000010E
Retardo_2ms                       00000102
Retardo_2s                        00000114
Retardo_4micros                   000000E5
Retardo_500micros                 000000E6
Retardo_500ms                     00000118
Retardo_50micros                  000000EE
Retardo_50ms                      000000FA
Retardo_5micros                   000000E4
Retardo_5ms                       00000100
Retardo_5s                        00000112
Retardos_ms                       00000105
Rmicros_Bucle                     000000F3
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
Tecl_ChequeaFila                  0000002F
Tecl_Columna1                     00000030
Tecl_Columna2                     00000033
Tecl_Columna3                     00000036
Tecl_Columna4                     00000039
Tecl_ConvierteOrdenEnHex          0000000F
Tecl_FinLeeHex                    0000000E
Tecl_FinTecladoLee                00000047
Tecl_GuardaValor                  00000045
Tecl_NoPulsada                    00000043
Tecl_TeclaOrden                   0000000C
Tecl_TerminaColumnas              0000003C
Tecl_UltimaTecla                  0000000F
Teclado_Comprobacion              000000F0
Teclado_EsperaDejePulsar          00000025
Teclado_FinTablaHex               00000020
Teclado_Inicializa                00000020
Teclado_LeeHex                    00000009
Teclado_LeeOrdenTecla             0000002D
Teclado_SigueEsperando            00000027
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
MPASM 03.50 Released                           TECLADO_01.ASM   10-11-2003  17:47:13         PAGE 19


SYMBOL TABLE
  LABEL                             VALUE 

_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX---------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   294
Program Memory Words Free:   730


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

