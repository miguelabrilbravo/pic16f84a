MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*********************************** Int_Reloj_01.asm ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Programa para un reloj digital en tiempo real sin puesta en hora. Visualiza en un formato:
                      00010 ; " 8:47:39" (Segunda Línea).
                      00011 ;
                      00012 ; Las temporizaciones necesarias del reloj se logran mediante interrupciones por desbordamiento
                      00013 ; del Timer 0 cada 50 ms. También actualiza un contador llamado MedioSegundo incrementado cada
                      00014 ; 500 ms y que será utilizado en las intermitencias de posteriores programas.
                      00015 ;
                      00016 ; ZONA DE DATOS **********************************************************************
                      00017 
2007   3FF1           00018         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00019         LIST       P=16F84A
                      00020         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00021 
                      00022         CBLOCK  0x0C
  0000000C            00023         Hora                            ; Guarda las horas.
  0000000D            00024         Minuto                          ; Guarda los minutos.   
  0000000E            00025         Segundo                         ; Guarda los segundos.
  0000000F            00026         MedioSegundo                    ; Se incrementa cada medio segundo.
  00000010            00027         Registro50ms                    ; Se incrementa cada 50ms.
                      00028         ENDC
                      00029 ;
  FFFFFF3D            00030 TMR0_Carga50ms  EQU     -d'195'         ; Para conseguir la interrupción del
                      00031                                         ; Timer 0 cada 50 ms.
                      00032 ; ZONA DE CÓDIGOS ********************************************************************
                      00033 
0000                  00034         ORG     0
0000   2805           00035         goto    Inicio
0004                  00036         ORG     4
0004   2814           00037         goto    ServicioInterrupcion
                      00038 
0005   20A0           00039 Inicio  call    LCD_Inicializa
0006   1683           00040         bsf     STATUS,RP0              ; Acceso al Banco 1.
0007   3007           00041         movlw   b'00000111'             ; Prescaler de 256 para el TMR0 y habilita
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0008   0081           00042         movwf   OPTION_REG              ; resistencias de Pull-Up del Puerto B.
0009   1283           00043         bcf     STATUS,RP0              ; Acceso al Banco 0.
000A   018C           00044         clrf    Hora                    ; Inicializa todos los datos del reloj. 
000B   018D           00045         clrf    Minuto
000C   018E           00046         clrf    Segundo
000D   018F           00047         clrf    MedioSegundo
000E   0190           00048         clrf    Registro50ms
000F   303D           00049         movlw   TMR0_Carga50ms          ; Carga el TMR0.
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0010   0081           00050         movwf   TMR0            
0011   30A0           00051         movlw   b'10100000'             ; Activa interrupción del TMR0 (TOIE)
0012   008B           00052         movwf   INTCON                  ; y la general (GIE).
                      00053         
                      00054 ; La sección "Principal" es de mantenimiento. Sólo espera las interrupciones.
                      00055 ; No se puede poner en modo de bajo consumo porque la instrucción "sleep" detiene el Timer 0.
                      00056 
0013                  00057 Principal
0013   2813           00058         goto    Principal
                      00059 
                      00060 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
                      00061 ;
0014                  00062 ServicioInterrupcion
0014   190B           00063         btfsc   INTCON,T0IF             ; Si es una interrupción procedente del
0015   2018           00064         call    Reloj                   ; desbordamiento del Timer 0, actualiza el reloj.
0016                  00065 FinInterrupcion                         ; correspondiente.
0016   110B           00066         bcf     INTCON,T0IF
0017   0009           00067         retfie
                      00068 
                      00069 ; Subrutina "Reloj" ---------------------------------------------------------------------
                      00070 ;
                      00071 ; Esta subrutina actualiza los contadores Horas, Minutos, Segundos, MedioSegundo y Registro50ms.
                      00072 ; Se ejecuta debido a la petición de interrupción del Timer 0, cada 50 ms.
                      00073 ;
                      00074 ; Como el PIC trabaja a una frecuencia de 4 MHz, el TMR0 evoluciona cada µs y se desborda cada
                      00075 ; 195 x 256 = 49920 µ. Sumádole el retardo de 71 µs y el pequeño tiempo de los saltos iniciales
                      00076 ; y de carga del contador, resulta un total de 50000 µs exactos. Es decir, el TMR0 producirá
                      00077 ; una interrupción cada 50 ms exactos, comprobado experimentalmente con la ventana Stopwatch del
                      00078 ; simulador del MPLAB.
                      00079 
0018   2068           00080 Reloj   call    Retardo_50micros        ; Retardo de 71 µs para
0019   206B           00081         call    Retardo_20micros        ; ajustar a 50 ms exactos.
001A   0000           00082         nop
001B   303D           00083         movlw   TMR0_Carga50ms          ; Carga el timer 0.
001C   0081           00084         movwf   TMR0
001D   203C           00085         call    IncrementaRegistro50ms
001E   1C03           00086         btfss   STATUS,C                ; ¿Ha contado 10 veces 50 ms = 1/2 segundo?
001F   282B           00087         goto    FinReloj                ; No. Pues sale sin visualizar el reloj.
0020                  00088 IncrementaReloj
0020   2042           00089         call    IncrementaMedioSegundo
0021   1C03           00090         btfss   STATUS,C                ; ¿Ha pasado 1 segundo?
0022   282A           00091         goto    ActualizaReloj          ; No. Pues sale visualizando el reloj.
0023   2047           00092         call    IncrementaSegundos      ; Sí. Incrementa el segundero.
0024   1C03           00093         btfss   STATUS,C                ; ¿Han pasado 60 segundos?
0025   282A           00094         goto    ActualizaReloj          ; No. Pues sale visualizando el reloj.
0026   204D           00095         call    IncrementaMinutos       ; Sí. Incrementa el minutero.
0027   1C03           00096         btfss   STATUS,C                ; ¿Han pasado 60 minutos?
0028   282A           00097         goto    ActualizaReloj          ; No. Pues sale visualizando el reloj.
0029   2053           00098         call    IncrementaHoras         ; Sí. Incrementa las horas.
002A                  00099 ActualizaReloj
002A   202C           00100         call    VisualizaReloj          ; Visualiza el reloj.
002B                  00101 FinReloj
002B   0008           00102         return
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00103 
                      00104 ; Subrutina "VisualizaReloj" ------------------------------------------------------------
                      00105 ;
                      00106 ; Visualiza el reloj en la segunda línea en formato: " 8:47:39" (Segunda Línea).
                      00107 ;
002C                  00108 VisualizaReloj
002C   3004           00109         movlw   .4                      ; Se coloca para centrar la visualización
002D   20D4           00110         call    LCD_PosicionLinea2      ; en la segunda línea.
002E   080C           00111         movf    Hora,W                  ; Va a visualizar las horas. 
002F   2124           00112         call    BIN_a_BCD               ; Lo pasa a BCD.
0030   210E           00113         call    LCD_Byte                ; Visualiza rechazando el cero de las decenas.
0031   303A           00114         movlw   ':'                     ; Envía ":" para separar datos.
0032   20E1           00115         call    LCD_Caracter
0033   080D           00116         movf    Minuto,W                ; Visualiza minutos.
0034   2124           00117         call    BIN_a_BCD               ; Lo pasa a BCD.
0035   2115           00118         call    LCD_ByteCompleto
0036   303A           00119         movlw   ':'                     ; Envía ":" para separar datos.
0037   20E1           00120         call    LCD_Caracter
0038   080E           00121         movf    Segundo,W               ; Visualiza segundos.
0039   2124           00122         call    BIN_a_BCD               ; Lo pasa a BCD.
003A   2115           00123         call    LCD_ByteCompleto
003B   0008           00124         return
                      00125 
                      00126 ; Subrutina "IncrementaRegistro50ms" ----------------------------------------------------
                      00127 ;
                      00128 ; Incrementa el valor de la variable Registro50ms. Cuando llega a 10, lo cual supone 
                      00129 ; medio segundo (50 ms x 10 = 500 ms), lo resetea y sale con el Carry a "1".
                      00130 ;
003C                  00131 IncrementaRegistro50ms
003C   0A90           00132         incf    Registro50ms,F
003D   300A           00133         movlw   .10
003E   0210           00134         subwf   Registro50ms,W          ; (W)=(Registro50ms)-10
003F   1803           00135         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Registro50ms)<10?
0040   0190           00136         clrf    Registro50ms            ; Lo inicializa si ha superado su valor máximo.
0041   0008           00137         return
                      00138 
                      00139 ; Subrutina "IncrementaMedioSegundo" --------------------------------------------------------
                      00140 ;
                      00141 ; Incrementa el valor de la variable MedioSegundo. Su bit de menor peso se pondrá a "1" una
                      00142 ; vez por segundo.
                      00143 
0042                  00144 IncrementaMedioSegundo
0042   0A8F           00145         incf    MedioSegundo,F          ; Incrementa.
0043   1403           00146         bsf     STATUS,C                ; Supone que ha llegado al segundo.
0044   1C0F           00147         btfss   MedioSegundo,0          ; El bit 0 se pondrá a "1" cada segundo.
0045   1003           00148         bcf     STATUS,C
0046   0008           00149         return
                      00150 
                      00151 ; Subrutina "IncrementaSegundos" -----------------------------------------------------------
                      00152 ;
                      00153 ; Incrementa el valor de la variable Segundos. Si es igual al valor máximo de 60 lo resetea
                      00154 ; y sale con el Carry a "1".
                      00155 
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0047                  00156 IncrementaSegundos
0047   0A8E           00157         incf    Segundo,F               ; Incrementa los segundos.
0048   303C           00158         movlw   .60
0049   020E           00159         subwf   Segundo,W               ; ¿Ha superado valor máximo?. (W)=(Segundo)-60.
004A   1803           00160         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Segundo)<60?
004B   018E           00161         clrf    Segundo                 ; Lo inicializa si ha superado su valor máximo.
004C   0008           00162         return
                      00163 
                      00164 ; Subrutina "IncrementaMinutos" -----------------------------------------------------------
                      00165 ;
                      00166 ; Incrementa el valor de la variable Minuto. Si es igual al valor máximo de 60 lo resetea
                      00167 ; y sale con el Carry a "1".
                      00168 ;
004D                  00169 IncrementaMinutos
004D   0A8D           00170         incf    Minuto,F                ; Incrementa los minutos.
004E   303C           00171         movlw   .60
004F   020D           00172         subwf   Minuto,W                ; ¿Ha superado su valor máximo?. (W)=(Minuto)-60.
0050   1803           00173         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Minuto)<60?
0051   018D           00174         clrf    Minuto                  ; Lo inicializa si ha superado su valor máximo.
0052   0008           00175         return
                      00176 
                      00177 ; Subrutina "IncrementaHoras" -----------------------------------------------------------
                      00178 ;
                      00179 ; Incrementa el valor de la variable Hora. Si es igual al valor máximo de 24 lo resetea
                      00180 ; y sale con el Carry a "1".
                      00181 ;
0053                  00182 IncrementaHoras
0053   0A8C           00183         incf    Hora,F                  ; Incrementa las horas.
0054   3018           00184         movlw   .24
0055   020C           00185         subwf   Hora,W                  ; ¿Ha superado su valor máximo?. (W)=(Hora)-24.
0056   1803           00186         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Hora)<24?
0057   018C           00187         clrf    Hora                    ; Lo inicializa si ha superado su valor máximo.
0058   0008           00188         return
                      00189 ;
                      00190         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00019 
                      00020         CBLOCK
  00000011            00021         R_ContA                         ; Contadores para los retardos.
  00000012            00022         R_ContB
  00000013            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0059                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0059   0000           00033         nop                             ; Aporta 1 ciclo máquina.
005A   0000           00034         nop                             ; Aporta 1 ciclo máquina.
005B   0000           00035         nop                             ; Aporta 1 ciclo máquina.
005C   0000           00036         nop                             ; Aporta 1 ciclo máquina.
005D   0000           00037         nop                             ; Aporta 1 ciclo máquina.
005E                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
005E   0000           00039         nop                             ; Aporta 1 ciclo máquina.
005F                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
005F   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
0060                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
0060   0000           00046         nop                             ; Aporta 1 ciclo máquina.
0061   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
0062   286C           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0063                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
0063   0000           00050         nop                             ; Aporta 1 ciclo máquina.
0064   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0065   286C           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0066                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0066   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0067   286C           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0068                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0068   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0069   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
006A   286C           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
006B                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
006B   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
006C                  00066 RetardoMicros
006C   0091           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
006D                  00068 Rmicros_Bucle
006D   0B91           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
006E   286D           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
006F   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
0070                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
0070   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0071   287F           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0072                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
0072   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0073   287F           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0074                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
0074   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0075   287F           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0076                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0076   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0077   287F           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0078                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0078   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0079   287F           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
007A                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
007A   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
007B   287F           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
007C                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
007C   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
007D   287F           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
007E                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
007E   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
007F                  00111 Retardos_ms
007F   0092           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
0080                  00113 R1ms_BucleExterno
0080   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
0081   0091           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
0082                  00116 R1ms_BucleInterno
0082   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
0083   0B91           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
0084   2882           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
0085   0B92           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0086   2880           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0087   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0088                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0088   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0089   2893           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
008A                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
008A   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
008B   2893           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
008C                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
008C   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
008D   2893           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
008E                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
008E   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
008F   2893           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0090                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
0090   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0091   2893           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0092                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
0092   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
0093                  00160 Retardo_1Decima
0093   0093           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
0094                  00162 R1Decima_BucleExterno2
0094   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
0095   0092           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0096                  00165 R1Decima_BucleExterno
0096   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0097   0091           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0098                  00168 R1Decima_BucleInterno          
0098   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0099   0B91           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
009A   2898           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
009B   0B92           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
009C   2896           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
009D   0B93           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
009E   2894           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
009F   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00191 
                      00192 ;       ===================================================================
                      00193 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00194 ;         E. Palacios, F. Remiro y L. López.
                      00195 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00196 ;       ===================================================================
                      00197 
                      00198 
                      00199 
                      00200 
                      00191         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000014            00025         LCD_Dato
  00000015            00026         LCD_GuardaDato
  00000016            00027         LCD_GuardaTRISB
  00000017            00028         LCD_Auxiliar1
  00000018            00029         LCD_Auxiliar2
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
00A0                  00045 LCD_Inicializa
00A0   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
00A1   1005           00047         bcf     LCD_PinRS               ; R/W y E.
00A2   1105           00048         bcf     LCD_PinEnable
00A3   1085           00049         bcf     LCD_PinRW
00A4   1283           00050         bcf     STATUS,RP0
00A5   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado le indica
                      00052                                         ; que se va a escribir en el LCD.
00A6   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD poniendo E=0.
00A7   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando poniendo RS=0.
00A8   2076           00055         call    Retardo_20ms
00A9   3030           00056         movlw   b'00110000'     
00AA   20B8           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
00AB   207A           00058         call    Retardo_5ms     
00AC   3030           00059         movlw   b'00110000'     
00AD   20B8           00060         call    LCD_EscribeLCD
00AE   2063           00061         call    Retardo_200micros
00AF   3030           00062         movlw   b'00110000'     
00B0   20B8           00063         call    LCD_EscribeLCD
00B1   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00B2   20B8           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
00B3   20DE           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
00B4   20DC           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
00B5   20DA           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00B6   20CC           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00B7   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el pin
                      00078 ; Enable del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B que
                      00079 ; no son utilizadas para el LCD (pines RB3:RB0), primero se lee estas líneas y después se
                      00080 ; vuelve a enviar este dato sin cambiarlo.
                      00081 
00B8                  00082 LCD_EscribeLCD
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B8   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00B9   0094           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00BA   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00BB   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00BC   0494           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00BD   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00BE   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00BF   0096           00091         movwf   LCD_GuardaTRISB
00C0   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00C1   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00C2   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00C3   0814           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00C4   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00C5   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD mediante un pequeño
00C6   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00C7   1683           00100         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00C8   0816           00101         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00C9   0086           00102         movwf   PORTB                   ; Realmente es TRISB.
00CA   1283           00103         bcf     STATUS,RP0              ; Acceso al Banco 0.
00CB   0008           00104         return
                      00105 
                      00106 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00107 ;
                      00108 ;Los comandos que pueden ser ejecutados son:
                      00109 ;
00CC                  00110 LCD_CursorIncr                          ; Cursor en modo incrementar.
00CC   3006           00111         movlw   b'00000110'
00CD   28DF           00112         goto    LCD_EnviaComando
00CE                  00113 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00CE   3080           00114         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00CF   28DF           00115         goto    LCD_EnviaComando
00D0                  00116 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00D0   30C0           00117         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00D1   28DF           00118         goto    LCD_EnviaComando
00D2                  00119 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00D2   3880           00120         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00D3   28DF           00121         goto    LCD_EnviaComando        ; registro W.
00D4                  00122 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00D4   38C0           00123         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00D5   28DF           00124         goto    LCD_EnviaComando        ; registro W.
00D6                  00125 LCD_OFF                         ; Pantalla apagada.
00D6   3008           00126         movlw   b'00001000'
00D7   28DF           00127         goto    LCD_EnviaComando
00D8                  00128 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00D8   300E           00129         movlw   b'00001110'
00D9   28DF           00130         goto    LCD_EnviaComando
00DA                  00131 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00DA   300C           00132         movlw   b'00001100'
00DB   28DF           00133         goto    LCD_EnviaComando
00DC                  00134 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DC   3001           00135         movlw   b'00000001'             ; cursor a principio de la línea 1.
00DD   28DF           00136         goto    LCD_EnviaComando
00DE                  00137 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00DE   3028           00138         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00139 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00140 
                      00141 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00142 ;
                      00143 ; "LCD_EnviaComando". Escribe un comando en el registro del módulo LCD. La palabra de
                      00144 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00145 ; "LCD_Caracter". Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00146 ; a través del registro W. Trabaja en Modo Dato.
                      00147 ;
00DF                  00148 LCD_EnviaComando
00DF   1005           00149         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00E0   28E3           00150         goto    LCD_Envia
00E1                  00151 LCD_Caracter
00E1   1405           00152         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00E2   20EB           00153         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00E3                  00154 LCD_Envia
00E3   0095           00155         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00E4   20B8           00156         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00E5   0E15           00157         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00158                                         ; nibble bajo del dato a enviar a parte alta del byte.
00E6   20B8           00159         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00E7   1C05           00160         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00E8   207C           00161         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00E9   2068           00162         call    Retardo_50micros
00EA   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00EB                  00177 LCD_CodigoCGROM
00EB   0094           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00EC                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00EC   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00ED   1D03           00181         btfss   STATUS,Z
00EE   28F2           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00EF   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00F0   0094           00184         movwf   LCD_Dato
00F1   28FF           00185         goto    LCD_FinCGROM
00F2                  00186 LCD_EnheMayuscula
00F2   0814           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F3   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00F4   1D03           00189         btfss   STATUS,Z
00F5   28F9           00190         goto    LCD_Grado               ; No es "Ñ".
00F6   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00F7   0094           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00F8   28FF           00193         goto    LCD_FinCGROM    
00F9                  00194 LCD_Grado
00F9   0814           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00FA   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00FB   1D03           00197         btfss   STATUS,Z
00FC   28FF           00198         goto    LCD_FinCGROM            ; No es "º".
00FD   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00FE   0094           00200         movwf   LCD_Dato
00FF                  00201 LCD_FinCGROM
00FF   0814           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
0100   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
0101                  00209 LCD_LineaEnBlanco
0101   3010           00210         movlw   LCD_CaracteresPorLinea
0102   2908           00211         goto    LCD_EnviaBlancos
0103                  00212 LCD_UnEspacioBlanco
0103   3001           00213         movlw   .1
0104   2908           00214         goto    LCD_EnviaBlancos
0105                  00215 LCD_DosEspaciosBlancos
0105   3002           00216         movlw   .2
0106   2908           00217         goto    LCD_EnviaBlancos
0107                  00218 LCD_TresEspaciosBlancos
0107   3003           00219         movlw   .3
0108                  00220 LCD_EnviaBlancos
0108   0097           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
0109                  00222 LCD_EnviaOtroBlanco     
0109   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
010A   20E1           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
010B   0B97           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
010C   2909           00226         goto    LCD_EnviaOtroBlanco
010D   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
010E                  00240 LCD_Byte
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010E   0098           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
010F   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
0110   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0111   2916           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0112   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0113   20E1           00246         call    LCD_Caracter
0114   2918           00247         goto    LCD_VisualizaBajo
                      00248 
0115                  00249 LCD_ByteCompleto
0115   0098           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0116                  00251 LCD_VisualizaAlto
0116   0E18           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0117   2119           00253         call    LCD_Nibble              ; Lo visualiza.
0118                  00254 LCD_VisualizaBajo
0118   0818           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
0119                  00266 LCD_Nibble
0119   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
011A   0097           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
011B   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
011C   1C03           00270         btfss   STATUS,C        
011D   2921           00271         goto    LCD_EnviaByteLetra
011E   0817           00272         movf    LCD_Auxiliar1,W
011F   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
0120   2923           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0121                  00275 LCD_EnviaByteLetra
0121   0817           00276         movf    LCD_Auxiliar1,W
0122   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0123                  00278 LCD_FinVisualizaDigito
0123   28E1           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00281                                         
                      00282 ;       ===================================================================
                      00283 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00284 ;         E. Palacios, F. Remiro y L. López.
                      00285 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00286 ;       ===================================================================
                      00192         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10, tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  00000019            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  0000001A            00022         BCD_Decenas                     ; la última asignada.
  0000001B            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
0124                  00026 BIN_a_BCD
0124   0199           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
0125   019A           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
0126   009B           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
0127                  00030 BCD_Resta10
0127   300A           00031         movlw   .10                     ; A las unidades se les va restando 10 en cada
0128   021B           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
0129   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?
012A   2934           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
012B                  00035 BCD_IncrementaDecenas
012B   009B           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
012C   0A9A           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
012D   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
012E   021A           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
012F   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?
0130   2927           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
0131                  00042 BCD_IncrementaCentenas                  ; las unidades.
0131   019A           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
0132   0A99           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
0133   2927           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
0134                  00046 BIN_BCD_Fin
0134   0E1A           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
0135   071B           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
0136   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00193         END
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

ActualizaReloj                    0000002A
BCD_Centenas                      00000019
BCD_Decenas                       0000001A
BCD_IncrementaCentenas            00000131
BCD_IncrementaDecenas             0000012B
BCD_Resta10                       00000127
BCD_Unidades                      0000001B
BIN_BCD_Fin                       00000134
BIN_a_BCD                         00000124
C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
FinInterrupcion                   00000016
FinReloj                          0000002B
GIE                               00000007
Hora                              0000000C
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
IncrementaHoras                   00000053
IncrementaMedioSegundo            00000042
IncrementaMinutos                 0000004D
IncrementaRegistro50ms            0000003C
IncrementaReloj                   00000020
IncrementaSegundos                00000047
Inicio                            00000005
LCD_2Lineas4Bits5x7               000000DE
LCD_Auxiliar1                     00000017
LCD_Auxiliar2                     00000018
LCD_Borra                         000000DC
LCD_BusDatos                      PORTB
LCD_Byte                          0000010E
LCD_ByteCompleto                  00000115
LCD_Caracter                      000000E1
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000EB
LCD_CursorIncr                    000000CC
LCD_CursorOFF                     000000DA
LCD_CursorON                      000000D8
LCD_Dato                          00000014
LCD_DosEspaciosBlancos            00000105
LCD_EnheMayuscula                 000000F2
LCD_EnheMinuscula                 000000EC
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

LCD_Envia                         000000E3
LCD_EnviaBlancos                  00000108
LCD_EnviaByteLetra                00000121
LCD_EnviaComando                  000000DF
LCD_EnviaOtroBlanco               00000109
LCD_EscribeLCD                    000000B8
LCD_FinCGROM                      000000FF
LCD_FinVisualizaDigito            00000123
LCD_Grado                         000000F9
LCD_GuardaDato                    00000015
LCD_GuardaTRISB                   00000016
LCD_Inicializa                    000000A0
LCD_Linea1                        000000CE
LCD_Linea2                        000000D0
LCD_LineaEnBlanco                 00000101
LCD_Nibble                        00000119
LCD_OFF                           000000D6
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000D2
LCD_PosicionLinea2                000000D4
LCD_TresEspaciosBlancos           00000107
LCD_UnEspacioBlanco               00000103
LCD_VisualizaAlto                 00000116
LCD_VisualizaBajo                 00000118
MedioSegundo                      0000000F
Minuto                            0000000D
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000013
R1Decima_BucleExterno             00000096
R1Decima_BucleExterno2            00000094
R1Decima_BucleInterno             00000098
R1ms_BucleExterno                 00000080
R1ms_BucleInterno                 00000082
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000011
R_ContB                           00000012
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

R_ContC                           00000013
Registro50ms                      00000010
Reloj                             00000018
RetardoMicros                     0000006C
Retardo_100micros                 00000066
Retardo_100ms                     00000072
Retardo_10micros                  00000059
Retardo_10ms                      00000078
Retardo_10s                       0000008A
Retardo_1Decima                   00000093
Retardo_1ms                       0000007E
Retardo_1s                        00000090
Retardo_200micros                 00000063
Retardo_200ms                     00000070
Retardo_20micros                  0000006B
Retardo_20ms                      00000076
Retardo_20s                       00000088
Retardo_2ms                       0000007C
Retardo_2s                        0000008E
Retardo_4micros                   0000005F
Retardo_500micros                 00000060
Retardo_500ms                     00000092
Retardo_50micros                  00000068
Retardo_50ms                      00000074
Retardo_5micros                   0000005E
Retardo_5ms                       0000007A
Retardo_5s                        0000008C
Retardos_ms                       0000007F
Rmicros_Bucle                     0000006D
STATUS                            00000003
Segundo                           0000000E
ServicioInterrupcion              00000014
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0_Carga50ms                    FFFFFF3D
TRISA                             00000085
TRISB                             00000086
VisualizaReloj                    0000002C
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
MPASM 03.50 Released                         INT_RELOJ_01.ASM   11-2-2003  23:41:18         PAGE 18


SYMBOL TABLE
  LABEL                             VALUE 

_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXX---------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   308
Program Memory Words Free:   716


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

