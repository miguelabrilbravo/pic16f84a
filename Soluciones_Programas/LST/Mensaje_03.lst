MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************ Mensaje_03.asm ************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; En la pantalla se visualizan varios mensajes uno detrás de otro. Cada mensaje permanece
                      00010 ; durante 2 segundos. Entre mensaje y mensaje la pantalla se apaga durante unos 200 ms.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 
2007   3FF1           00014         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00015         LIST       P=16F84A
                      00016         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00017 
                      00018         CBLOCK  0x0C
                      00019         ENDC
                      00020 
                      00021 ; ZONA DE CÓDIGOS ********************************************************************
                      00022 
0000                  00023         ORG     0
0000                  00024 Inicio
0000   203E           00025         call    LCD_Inicializa
0001                  00026 Principal
0001   300F           00027         movlw   Mensaje0                ; Apunta al mensaje 0.
0002   2009           00028         call    Visualiza
0003   301F           00029         movlw   Mensaje1                ; Apunta al mensaje 1.
0004   2009           00030         call    Visualiza
0005   302E           00031         movlw   Mensaje2                ; Apunta al mensaje 2.
0006   2009           00032         call    Visualiza
0007   211D           00033         call    Retardo_5s              ; Permanece apagada durante este tiempo.
0008   2801           00034         goto    Principal               ; Repite la visualización de todos los mensajes.
                      00035 ;
                      00036 ; Subrutina "Visualiza" -----------------------------------------------------------------
                      00037 ;
0009                  00038 Visualiza
0009   20C2           00039         call    LCD_Mensaje
000A   211F           00040         call    Retardo_2s              ; Visualiza el mensaje durante este tiempo.
000B   207D           00041         call    LCD_Borra               ; Borra pantalla y se mantiene así durante 
000C   2101           00042         call    Retardo_200ms           ; este tiempo.
000D   0008           00043         return
                      00044 ;
                      00045 ; "Mensajes" ----------------------------------------------------------------------------
                      00046 ;
000E                  00047 Mensajes
000E   0782           00048         addwf   PCL,F
000F                  00049 Mensaje0                                ; Posición inicial del mensaje 0.
000F   3445 3473 3474 00050         DT "Estudia PIC, es", 0x00
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3475 3464 3469 
       3461 3420 3450 
       3449 3443 342C 
       3420 3465 3473 
       3400 
001F                  00051 Mensaje1                                ; Posición inicial del mensaje 1.
001F   346D 3475 3479 00052         DT "muy divertido.", 0x00       
       3420 3464 3469 
       3476 3465 3472 
       3474 3469 3464 
       346F 342E 3400 
002E                  00053 Mensaje2                                ; Posición inicial del mensaje 2.
002E   3449 3445 3453 00054         DT "IES ISAAC PERAL", 0x00
       3420 3449 3453 
       3441 3441 3443 
       3420 3450 3445 
       3452 3441 344C 
       3400 
                      00055 
                      00056         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  0000000C            00025         LCD_Dato
  0000000D            00026         LCD_GuardaDato
  0000000E            00027         LCD_GuardaTRISB
  0000000F            00028         LCD_Auxiliar1
  00000010            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
003E                  00045 LCD_Inicializa
003E   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
003F   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0040   1105           00048         bcf     LCD_PinEnable
0041   1085           00049         bcf     LCD_PinRW
0042   1283           00050         bcf     STATUS,RP0
0043   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
0044   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
0045   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0046   2107           00055         call    Retardo_20ms
0047   3030           00056         movlw   b'00110000'     
0048   2056           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0049   210B           00058         call    Retardo_5ms     
004A   3030           00059         movlw   b'00110000'     
004B   2056           00060         call    LCD_EscribeLCD
004C   20F4           00061         call    Retardo_200micros
004D   3030           00062         movlw   b'00110000'     
004E   2056           00063         call    LCD_EscribeLCD
004F   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
0050   2056           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
0051   207F           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
0052   207D           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
0053   207B           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
0054   206D           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
0055   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
0056                  00082 LCD_EscribeLCD
0056   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
0057   008C           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
0058   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
0059   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005A   048C           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
005B   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
005C   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
005D   008E           00091         movwf   LCD_GuardaTRISB
005E   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
005F   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
0060   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
0061   080C           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
0062   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
0063   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
0064   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
0065   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
0066   210D           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
0067   20F9           00102         call    Retardo_50micros
0068   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
0069   080E           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
006A   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
006B   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
006C   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
006D                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
006D   3006           00114         movlw   b'00000110'
006E   2880           00115         goto    LCD_EnviaComando
006F                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
006F   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
0070   2880           00118         goto    LCD_EnviaComando
0071                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
0071   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
0072   2880           00121         goto    LCD_EnviaComando
0073                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
0073   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
0074   2880           00124         goto    LCD_EnviaComando        ; registro W.
0075                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
0075   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
0076   2880           00127         goto    LCD_EnviaComando        ; registro W.
0077                  00128 LCD_OFF                         ; Pantalla apagada.
0077   3008           00129         movlw   b'00001000'
0078   2880           00130         goto    LCD_EnviaComando
0079                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
0079   300E           00132         movlw   b'00001110'
007A   2880           00133         goto    LCD_EnviaComando
007B                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
007B   300C           00135         movlw   b'00001100'
007C   2880           00136         goto    LCD_EnviaComando
007D                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
007D   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007E   2880           00139         goto    LCD_EnviaComando
007F                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
007F   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
0080                  00151 LCD_EnviaComando
0080   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0081   2884           00153         goto    LCD_Envia
0082                  00154 LCD_Caracter
0082   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
0083   2089           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
0084                  00157 LCD_Envia
0084   008D           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
0085   2056           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
0086   0E0D           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
0087   2056           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
0088   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
0089                  00177 LCD_CodigoCGROM
0089   008C           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
008A                  00179 LCD_EnheMinuscula                       ; un carácter especial.
008A   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
008B   1D03           00181         btfss   STATUS,Z
008C   2890           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
008D   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
008E   008C           00184         movwf   LCD_Dato
008F   289D           00185         goto    LCD_FinCGROM
0090                  00186 LCD_EnheMayuscula
0090   080C           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0091   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
0092   1D03           00189         btfss   STATUS,Z
0093   2897           00190         goto    LCD_Grado               ; No es "Ñ".
0094   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0095   008C           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
0096   289D           00193         goto    LCD_FinCGROM    
0097                  00194 LCD_Grado
0097   080C           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0098   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
0099   1D03           00197         btfss   STATUS,Z
009A   289D           00198         goto    LCD_FinCGROM            ; No es "º".
009B   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
009C   008C           00200         movwf   LCD_Dato
009D                  00201 LCD_FinCGROM
009D   080C           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
009E   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
009F                  00209 LCD_LineaEnBlanco
009F   3010           00210         movlw   LCD_CaracteresPorLinea
00A0   28A6           00211         goto    LCD_EnviaBlancos
00A1                  00212 LCD_UnEspacioBlanco
00A1   3001           00213         movlw   .1
00A2   28A6           00214         goto    LCD_EnviaBlancos
00A3                  00215 LCD_DosEspaciosBlancos
00A3   3002           00216         movlw   .2
00A4   28A6           00217         goto    LCD_EnviaBlancos
00A5                  00218 LCD_TresEspaciosBlancos
00A5   3003           00219         movlw   .3
00A6                  00220 LCD_EnviaBlancos
00A6   008F           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00A7                  00222 LCD_EnviaOtroBlanco     
00A7   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
00A8   2082           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00A9   0B8F           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00AA   28A7           00226         goto    LCD_EnviaOtroBlanco
00AB   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
00AC                  00240 LCD_Byte
00AC   0090           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00AD   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
00AE   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
00AF   28B4           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B0   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
00B1   2082           00246         call    LCD_Caracter
00B2   28B6           00247         goto    LCD_VisualizaBajo
                      00248 
00B3                  00249 LCD_ByteCompleto
00B3   0090           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00B4                  00251 LCD_VisualizaAlto
00B4   0E10           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
00B5   20B7           00253         call    LCD_Nibble              ; Lo visualiza.
00B6                  00254 LCD_VisualizaBajo
00B6   0810           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
00B7                  00266 LCD_Nibble
00B7   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
00B8   008F           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
00B9   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
00BA   1C03           00270         btfss   STATUS,C        
00BB   28BF           00271         goto    LCD_EnviaByteLetra
00BC   080F           00272         movf    LCD_Auxiliar1,W
00BD   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00BE   28C1           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00BF                  00275 LCD_EnviaByteLetra
00BF   080F           00276         movf    LCD_Auxiliar1,W
00C0   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
00C1                  00278 LCD_FinVisualizaDigito
00C1   2882           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00057         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  00000011            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  00000012            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
00C2                  00042 LCD_Mensaje
00C2   0091           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
00C3   300E           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
00C4   0291           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
00C5   0391           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
00C6                  00047 LCD_VisualizaOtroCaracter
00C6   0811           00048         movf    LCD_ApuntaCaracter,W
00C7   200E           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
00C8   0092           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
00C9   0892           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
00CA   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
00CB   28CF           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
00CC                  00054 LCD_NoUltimoCaracter
00CC   2082           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
00CD   0A91           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
00CE   28C6           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
00CF                  00058 LCD_FinMensaje
00CF   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000013            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
00D0                  00073 LCD_MensajeMovimiento
00D0   0091           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
00D1   300E           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
00D2   0291           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
00D3   0391           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
00D4                  00078 LCD_PrimeraPosicion
00D4   0193           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
00D5   207D           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
00D6                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
00D6   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
00D7   0213           00083         subwf   LCD_CursorPosicion,W
00D8   1D03           00084         btfss   STATUS,Z
00D9   28DF           00085         goto    LCD_NoEsFinalLinea
00DA                  00086 LCD_EsFinalLinea
00DA   2101           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
00DB   2101           00088         call    Retardo_200ms
00DC   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
00DD   0291           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
00DE   28D4           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
00DF                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
00DF   0811           00093         movf    LCD_ApuntaCaracter,W
00E0   200E           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
00E1   0092           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
00E2   0892           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
00E3   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
00E4   28E9           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
00E5                  00099 LCD_NoUltimoCaracter2
00E5   2082           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
00E6   0A93           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
00E7   0A91           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
00E8   28D6           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
00E9                  00105 LCD_FinMovimiento                       ; de la línea.
00E9   0008           00106         return                          ; Vuelve al programa principal.
                      00058         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000014            00021         R_ContA                         ; Contadores para los retardos.
  00000015            00022         R_ContB
  00000016            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
00EA                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
00EA   0000           00033         nop                             ; Aporta 1 ciclo máquina.
00EB   0000           00034         nop                             ; Aporta 1 ciclo máquina.
00EC   0000           00035         nop                             ; Aporta 1 ciclo máquina.
00ED   0000           00036         nop                             ; Aporta 1 ciclo máquina.
00EE   0000           00037         nop                             ; Aporta 1 ciclo máquina.
00EF                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
00EF   0000           00039         nop                             ; Aporta 1 ciclo máquina.
00F0                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
00F0   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
00F1                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
00F1   0000           00046         nop                             ; Aporta 1 ciclo máquina.
00F2   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
00F3   28FD           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00F4                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
00F4   0000           00050         nop                             ; Aporta 1 ciclo máquina.
00F5   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00F6   28FD           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00F7                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
00F7   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00F8   28FD           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00F9                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
00F9   0000           00057         nop                             ; Aporta 1 ciclo máquina.
00FA   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00FB   28FD           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00FC                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
00FC   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
00FD                  00066 RetardoMicros
00FD   0094           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
00FE                  00068 Rmicros_Bucle
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00FE   0B94           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00FF   28FE           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
0100   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
0101                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
0101   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0102   2910           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0103                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
0103   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0104   2910           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0105                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
0105   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0106   2910           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0107                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0107   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0108   2910           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0109                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0109   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
010A   2910           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
010B                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
010B   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
010C   2910           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
010D                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
010D   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
010E   2910           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
010F                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
010F   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
0110                  00111 Retardos_ms
0110   0095           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
0111                  00113 R1ms_BucleExterno
0111   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
0112   0094           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
0113                  00116 R1ms_BucleInterno
0113   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
0114   0B94           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
0115   2913           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
0116   0B95           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0117   2911           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0118   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0119                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0119   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
011A   2924           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
011B                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
011B   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
011C   2924           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
011D                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
011D   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
011E   2924           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
011F                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
011F   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0120   2924           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0121                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
0121   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0122   2924           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0123                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
0123   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
0124                  00160 Retardo_1Decima
0124   0096           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
0125                  00162 R1Decima_BucleExterno2
0125   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
0126   0095           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0127                  00165 R1Decima_BucleExterno
0127   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0128   0094           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0129                  00168 R1Decima_BucleInterno          
0129   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
012A   0B94           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
012B   2929           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
012C   0B95           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
012D   2927           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
012E   0B96           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012F   2925           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
0130   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00059         END
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000000
LCD_2Lineas4Bits5x7               0000007F
LCD_ApuntaCaracter                00000011
LCD_Auxiliar1                     0000000F
LCD_Auxiliar2                     00000010
LCD_Borra                         0000007D
LCD_BusDatos                      PORTB
LCD_Byte                          000000AC
LCD_ByteCompleto                  000000B3
LCD_Caracter                      00000082
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   00000089
LCD_CursorIncr                    0000006D
LCD_CursorOFF                     0000007B
LCD_CursorON                      00000079
LCD_CursorPosicion                00000013
LCD_Dato                          0000000C
LCD_DosEspaciosBlancos            000000A3
LCD_EnheMayuscula                 00000090
LCD_EnheMinuscula                 0000008A
LCD_Envia                         00000084
LCD_EnviaBlancos                  000000A6
LCD_EnviaByteLetra                000000BF
LCD_EnviaComando                  00000080
LCD_EnviaOtroBlanco               000000A7
LCD_EsFinalLinea                  000000DA
LCD_EscribeLCD                    00000056
LCD_FinCGROM                      0000009D
LCD_FinMensaje                    000000CF
LCD_FinMovimiento                 000000E9
LCD_FinVisualizaDigito            000000C1
LCD_Grado                         00000097
LCD_GuardaDato                    0000000D
LCD_GuardaTRISB                   0000000E
LCD_Inicializa                    0000003E
LCD_Linea1                        0000006F
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

LCD_Linea2                        00000071
LCD_LineaEnBlanco                 0000009F
LCD_Mensaje                       000000C2
LCD_MensajeMovimiento             000000D0
LCD_Nibble                        000000B7
LCD_NoEsFinalLinea                000000DF
LCD_NoUltimoCaracter              000000CC
LCD_NoUltimoCaracter2             000000E5
LCD_OFF                           00000077
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                00000073
LCD_PosicionLinea2                00000075
LCD_PrimeraPosicion               000000D4
LCD_TresEspaciosBlancos           000000A5
LCD_UnEspacioBlanco               000000A1
LCD_ValorCaracter                 00000012
LCD_VisualizaAlto                 000000B4
LCD_VisualizaBajo                 000000B6
LCD_VisualizaCaracter             000000D6
LCD_VisualizaOtroCaracter         000000C6
Mensaje0                          0000000F
Mensaje1                          0000001F
Mensaje2                          0000002E
Mensajes                          0000000E
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000001
R1Decima_BucleExterno             00000127
R1Decima_BucleExterno2            00000125
R1Decima_BucleInterno             00000129
R1ms_BucleExterno                 00000111
R1ms_BucleInterno                 00000113
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000014
R_ContB                           00000015
R_ContC                           00000016
RetardoMicros                     000000FD
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_100micros                 000000F7
Retardo_100ms                     00000103
Retardo_10micros                  000000EA
Retardo_10ms                      00000109
Retardo_10s                       0000011B
Retardo_1Decima                   00000124
Retardo_1ms                       0000010F
Retardo_1s                        00000121
Retardo_200micros                 000000F4
Retardo_200ms                     00000101
Retardo_20micros                  000000FC
Retardo_20ms                      00000107
Retardo_20s                       00000119
Retardo_2ms                       0000010D
Retardo_2s                        0000011F
Retardo_4micros                   000000F0
Retardo_500micros                 000000F1
Retardo_500ms                     00000123
Retardo_50micros                  000000F9
Retardo_50ms                      00000105
Retardo_5micros                   000000EF
Retardo_5ms                       0000010B
Retardo_5s                        0000011D
Retardos_ms                       00000110
Rmicros_Bucle                     000000FE
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
Visualiza                         00000009
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
MPASM 03.50 Released                           MENSAJE_03.ASM   10-15-1982  13:34:09         PAGE 17


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX X---------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   305
Program Memory Words Free:   719


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

