MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;**************************************** I2C_ADC_01.asm ******************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; El microcontrolador lee constantemente la entrada analógica ANI0 del PCF8591 y
                      00010 ; visualiza la tensión en la pantalla del módulo LCD.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 
2007   3FF1           00014         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00015         LIST       P=16F84A
                      00016         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00017 
                      00018         CBLOCK   0x0C
                      00019         ENDC
                      00020 
  0000009E            00021 PCF8591_DireccionEscritura      EQU     b'10011110'
  0000009F            00022 PCF8591_DireccionLectura        EQU     b'10011111'
                      00023 ;
                      00024 ; ZONA DE CÓDIGOS ********************************************************************
                      00025 
0000                  00026         ORG     0
0000                  00027 Inicio
0000   20D6           00028         call    LCD_Inicializa
0001   2045           00029         call    I2C_EnviaStart          ; Va a configurar el PCF8591.
0002   309E           00030         movlw   PCF8591_DireccionEscritura      ; Apunta al dispositivo.
0003   2053           00031         call    I2C_EnviaByte
0004   3000           00032         movlw   b'00000000'             ; Carga la palabra de control utilizando la 
0005   2053           00033         call    I2C_EnviaByte           ; entrada AIN0 en modo simple.
0006   204D           00034         call    I2C_EnviaStop           ; Termina la configuración
                      00035 ;
0007   2045           00036         call    I2C_EnviaStart          ; Comienza a leer.
0008   309F           00037         movlw   PCF8591_DireccionLectura        ; Apunta al dispositivo.
0009   2053           00038         call    I2C_EnviaByte
000A   2068           00039         call    I2C_LeeByte             ; La primera lectura es incorrecta y por lo tanto
000B                  00040 Principal                               ; la desecha.
000B   2068           00041         call    I2C_LeeByte             ; Lee la entrada analógica.
000C   200E           00042         call    Visualiza                       ; La visualiza.
000D   280B           00043         goto    Principal
                      00044 
                      00045 ; Subrutinas "Visualiza" ----------------------------------------------------------------
                      00046 ;
                      00047 ; Visualiza el valor que se le introduce por el registro de trabajo W en formato de tensión.
                      00048 ; Hay que tener en cuenta que el PCF8591 del esquema trabaja con una resolución de
                      00049 ; LSB=10mV, el valor de entrada será 10 veces menor que la tensión real expresada en
                      00050 ; milivoltios. Así por ejemplo, si (W)=147 el valor de la tensión será igual a:
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051 ; VAIN = LSB x Digital = 10 x 147 = 1470 mV = 1,47 V, que es lo que se debe visualizar
                      00052 ; en la pantalla.
                      00053 ;
                      00054 ; En conclusión:
                      00055 ; - Las centenas del valor de entrada corresponden a las unidades de voltio.
                      00056 ; - Las decenas del valor de entrada corresponden a las décimas de voltio.
                      00057 ; - Las unidades del valor de entrada corresponden a las centésimas de voltios.
                      00058 
                      00059         CBLOCK
  0000000C            00060         Auxiliar
                      00061         ENDC
                      00062 
000E                  00063 Visualiza
000E   008C           00064         movwf   Auxiliar                        ; Lo guarda
000F   2107           00065         call    LCD_Linea1              ; Se sitúa al principio de la primera línea.
0010   3020           00066         movlw   MensajeTension          ; Visualiza la tensión deseada.
0011   215A           00067         call    LCD_Mensaje
0012   080C           00068         movf    Auxiliar,W              ; Recupera el dato a visualizar y lo
0013   20C3           00069         call    BIN_a_BCD               ; pasa a BCD.
0014   0813           00070         movf    BCD_Centenas,W          ; Visualiza las centenas que corresponde a las
0015   214F           00071         call    LCD_Nibble              ; unidades de voltios.
0016   302E           00072         movlw   '.'                     ; Visualiza el punto decimal.
0017   211A           00073         call    LCD_Caracter
0018   0814           00074         movf    BCD_Decenas,W           ; Visualiza las decenas que corresponde a las
0019   214F           00075         call    LCD_Nibble              ; décimas de voltios.
001A   0815           00076         movf    BCD_Unidades,W          ; Visualiza las unidades que corresponde a las
001B   214F           00077         call    LCD_Nibble              ; centésimas de voltios.
001C   302A           00078         movlw   MensajeVoltios
001D   215A           00079         call    LCD_Mensaje
001E   0008           00080         return
                      00081         
001F                  00082 Mensajes
001F   0782           00083         addwf   PCL,F
0020                  00084 MensajeTension
0020   3454 3465 346E 00085         DT "Tension: ", 0x00
       3473 3469 346F 
       346E 343A 3420 
       3400 
002A                  00086 MensajeVoltios
002A   3420 3456 342E 00087         DT " V.   ", 0x00       
       3420 3420 3420 
       3400 
                      00088 
                      00089         INCLUDE  <BUS_I2C.INC>
                      00001 ;**************************** Librería "BUS_I2C.INC" ************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control del bus serie I2C, 
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00010 ; para su control por parte de un solo microcontrolador maestro.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 ;
                      00014         CBLOCK
  0000000D            00015         I2C_ContadorBits                        ; Cuenta los bits a transmitir o a recibir.
  0000000E            00016         I2C_Dato                                ; Dato a transmitir o recibido.
  0000000F            00017         I2C_Flags                               ; Guarda la información del estado del bus I2C.
                      00018         ENDC
                      00019 
                      00020 #DEFINE I2C_UltimoByteLeer      I2C_Flags,0
                      00021 ;    -  (I2C_UltimoByteLeer)=0, NO es el último byte a leer por el maestro.
                      00022 ;    -  (I2C_UltimoByteLeer)=1, SÍ es el último byte a leer por el maestro.
                      00023 
                      00024 ; La definición de las líneas SCL y SDA del bus I2C se puede cambiar según las
                      00025 ; necesidades del hardware.
                      00026 
                      00027 #DEFINE SCL     PORTA,3                 ; Línea SCL del bus I2C.
                      00028 #DEFINE SDA     PORTA,4                 ; Línea SDA del bus I2C.
                      00029 ;
                      00030 ; Subrutina "SDA_Bajo" -------------------------------------------------------------------------------
                      00031 ;
0031                  00032 SDA_Bajo
0031   1683           00033         bsf     STATUS,RP0              ; Configura la línea SDA como salida.
0032   1205           00034         bcf     SDA
0033   1283           00035         bcf     STATUS,RP0
0034   1205           00036         bcf     SDA                     ; SDA en bajo.
0035   0008           00037         return
                      00038 ;
                      00039 ; Subrutina "SDA_AltaImpedancia" --------------------------------------------------------
                      00040 ;
0036                  00041 SDA_AltaImpedancia
0036   1683           00042         bsf     STATUS,RP0              ; Configura la línea SDA entrada.
0037   1605           00043         bsf     SDA                     ; Lo pone en alta impedancia, y gracias a la
0038   1283           00044         bcf     STATUS,RP0              ; Rp de esta línea, se mantiene a nivel alto.
0039   0008           00045         return
                      00046 ;
                      00047 ; Subrutina "SCL_Bajo" ------------------------------------------------------------------
                      00048 ;
003A                  00049 SCL_Bajo
003A   1683           00050         bsf     STATUS,RP0
003B   1185           00051         bcf     SCL                     ; Configura la línea SCL como salida.
003C   1283           00052         bcf     STATUS,RP0
003D   1185           00053         bcf     SCL                     ; La línea de reloj SCL en bajo.
003E   0008           00054         return
                      00055 ;
                      00056 ; Subrutina "SCL_AltaImpedancia" --------------------------------------------------------
                      00057 ;
003F                  00058 SCL_AltaImpedancia
003F   1683           00059         bsf     STATUS,RP0              ; Configura la línea SCL entrada.
0040   1585           00060         bsf     SCL                     ; Lo pone en alta impedancia y gracias a la Rp
0041   1283           00061         bcf     STATUS,RP0              ; de esta línea, se mantiene a nivel alto.
0042                  00062 SCL_EsperaNivelAlto
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0042   1D85           00063         btfss   SCL                     ; Si algún esclavo mantiene esta línea en bajo
0043   2842           00064         goto    SCL_EsperaNivelAlto     ; hay que esperar.
0044   0008           00065         return
                      00066 ;
                      00067 ; Subrutina "I2C_EnviaStart" ------------------------------------------------------------
                      00068 ;
                      00069 ; Esta subrutina envía una condición de Start o inicio.
                      00070 ;
0045                  00071 I2C_EnviaStart
0045   2036           00072         call    SDA_AltaImpedancia      ; Línea SDA en alto.
0046   203F           00073         call    SCL_AltaImpedancia      ; Línea SCL en alto.
0047   2082           00074         call    Retardo_4micros         ; Tiempo "tBUF" del protocolo.
0048   2031           00075         call    SDA_Bajo                ; Flanco de bajada de SDA mientras SCL está alto.
0049   2082           00076         call    Retardo_4micros         ; Tiempo "tHD;STA" del protocolo.
004A   203A           00077         call    SCL_Bajo                ; Flanco de bajada del reloj SCL.
004B   2082           00078         call    Retardo_4micros 
004C   0008           00079         return
                      00080 ;
                      00081 ; Subrutina "I2C_EnviaStop" -------------------------------------------------------------
                      00082 ;
                      00083 ; Esta subrutina envía un condición de Stop o parada.
                      00084 ;
004D                  00085 I2C_EnviaStop
004D   2031           00086         call    SDA_Bajo
004E   203F           00087         call    SCL_AltaImpedancia      ; Flanco de subida de SCL.
004F   2082           00088         call    Retardo_4micros         ; Tiempo "tSU;STO" del protocolo.
0050   2036           00089         call    SDA_AltaImpedancia      ; Flanco de subida de SDA.
0051   2082           00090         call    Retardo_4micros         ; Tiempo "tBUF" del protocolo.
0052   0008           00091         return
                      00092 ;
                      00093 ; Subrutina "I2C_EnviaByte" -------------------------------------------------------------
                      00094 ;
                      00095 ; El microcontrolador maestro transmite un byte por el bus I2C, comenzando por el bit
                      00096 ; MSB. El byte a transmitir debe estar cargado previamente en el registro de trabajo W.
                      00097 ; De la subrutina ejecutada anteriormente "I2C_EnviaStart" o esta misma "I2C_EnviaByte", 
                      00098 ; la línea SCL se debe encontrar a nivel bajo al menos durante 5 microsegundos.
                      00099 ;
0053                  00100 I2C_EnviaByte
0053   008E           00101         movwf   I2C_Dato                        ; Almacena el byte a transmitir.
0054   3008           00102         movlw   0x08                    ; A transmitir 8 bits.
0055   008D           00103         movwf   I2C_ContadorBits
0056                  00104 I2C_EnviaBit
0056   0D8E           00105         rlf     I2C_Dato,F              ; Chequea el bit, llevándolo previamente al Carry.
0057   1803           00106         btfsc   STATUS,C
0058   285B           00107         goto    I2C_EnviaUno
0059                  00108 I2C_EnviaCero
0059   2031           00109         call    SDA_Bajo                ; Si es "0" envía un nivel bajo.
005A   285C           00110         goto    I2C_FlancoSCL
005B                  00111 I2C_EnviaUno
005B   2036           00112         call    SDA_AltaImpedancia      ; Si es "1" lo activará a alto.
005C                  00113 I2C_FlancoSCL
005C   203F           00114         call    SCL_AltaImpedancia      ; Flanco de subida del SCL.
005D   2082           00115         call    Retardo_4micros         ; Tiempo "tHIGH" del protocolo.
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005E   203A           00116         call    SCL_Bajo                ; Termina el semiperiodo positivo del reloj.
005F   2082           00117         call    Retardo_4micros         ; Tiempo "tHD;DAT" del protocolo.
0060   0B8D           00118         decfsz  I2C_ContadorBits,F              ; Lazo para los ocho bits.
0061   2856           00119         goto    I2C_EnviaBit
                      00120 ;
0062   2036           00121         call    SDA_AltaImpedancia      ; Libera la línea de datos.
0063   203F           00122         call    SCL_AltaImpedancia      ; Pulso en alto de reloj para que el esclavo
0064   2082           00123         call    Retardo_4micros         ; pueda enviar el bit ACK.
0065   203A           00124         call    SCL_Bajo
0066   2082           00125         call    Retardo_4micros
0067   0008           00126         return
                      00127 ;
                      00128 ; Subrutina "I2C_LeeByte" ---------------------------------------------------------------
                      00129 ;
                      00130 ; El microcontrolador maestro lee un byte desde el esclavo conectado al bus I2C. El dato
                      00131 ; recibido se carga en el registro I2C_Dato y lo envía a la subrutina superior a través
                      00132 ; del registro W. Se empieza a leer por el bit de mayor peso MSB.
                      00133 ; De alguna de las subrutinas ejecutadas anteriormente "I2C_EnviaStart", "I2C_EnviaByte"
                      00134 ; o esta misma "I2C_LeeByte", la línea SCL lleva en bajo al menos 5 microsegundos.
                      00135 
0068                  00136 I2C_LeeByte
0068   3008           00137         movlw   0x08                    ; A recibir 8 bits.
0069   008D           00138         movwf   I2C_ContadorBits
006A   2036           00139         call    SDA_AltaImpedancia      ; Deja libre la línea de datos.
006B                  00140 I2C_LeeBit
006B   203F           00141         call    SCL_AltaImpedancia      ; Flanco de subida del reloj
006C   1003           00142         bcf     STATUS,C                ; En principio supone que es 0.
006D   1A05           00143         btfsc   SDA                     ; Lee el bit
006E   1403           00144         bsf     STATUS,C                ; Si es "1" carga 1 en el Carry.
006F   0D8E           00145         rlf     I2C_Dato,F              ; Lo introduce en el registro.
0070   203A           00146         call    SCL_Bajo                ; Termina el semiperiodo positivo del reloj.
0071   2082           00147         call    Retardo_4micros         ; Tiempo "tHD;DAT" del protocolo.
0072   0B8D           00148         decfsz  I2C_ContadorBits,F              ; Lazo para los ocho bits.
0073   286B           00149         goto    I2C_LeeBit
                      00150 ;
                      00151 ; Chequea si este es el último byte a leer para enviar o no el bit de reconocimiento
                      00152 ; ACK en consecuencia.
                      00153 ;
0074   1C0F           00154         btfss   I2C_UltimoByteLeer      ; Si es el último, no debe enviar
                      00155                                         ; el bit de reconocimiento ACK.
0075   2031           00156         call    SDA_Bajo                ; Envía el bit de reconocimiento ACK
                      00157                                         ; porque todavía no es el último byte a leer.
0076   203F           00158         call    SCL_AltaImpedancia      ; Pulso en alto del SCL para transmitir el
0077   2082           00159         call    Retardo_4micros         ; bit ACK de reconocimiento. Este es "tHIGH".
0078   203A           00160         call    SCL_Bajo                ; Pulso de bajada del SCL.
0079   2082           00161         call    Retardo_4micros
007A   080E           00162         movf    I2C_Dato,W              ; El resultado se manda en el registro de
007B   0008           00163         return                          ; de trabajo W.
                      00164         
                      00165 ;       ===================================================================
                      00166 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00167 ;         E. Palacios, F. Remiro y L. López.
                      00168 ;         Editorial Ra-Ma.  www.ra-ma.es
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00169 ;       ===================================================================
                      00090         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000010            00021         R_ContA                         ; Contadores para los retardos.
  00000011            00022         R_ContB
  00000012            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
007C                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
007C   0000           00033         nop                             ; Aporta 1 ciclo máquina.
007D   0000           00034         nop                             ; Aporta 1 ciclo máquina.
007E   0000           00035         nop                             ; Aporta 1 ciclo máquina.
007F   0000           00036         nop                             ; Aporta 1 ciclo máquina.
0080   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0081                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0081   0000           00039         nop                             ; Aporta 1 ciclo máquina.
0082                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
0082   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
0083                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
0083   0000           00046         nop                             ; Aporta 1 ciclo máquina.
0084   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
0085   288F           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0086                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
0086   0000           00050         nop                             ; Aporta 1 ciclo máquina.
0087   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0088   288F           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0089                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0089   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
008A   288F           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
008B                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
008B   0000           00057         nop                             ; Aporta 1 ciclo máquina.
008C   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
008D   288F           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
008E                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
008E   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
008F                  00066 RetardoMicros
008F   0090           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
0090                  00068 Rmicros_Bucle
0090   0B90           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0091   2890           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
0092   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
0093                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
0093   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0094   28A2           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0095                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
0095   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0096   28A2           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0097                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
0097   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0098   28A2           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0099                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0099   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
009A   28A2           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
009B                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
009B   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
009C   28A2           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
009D                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
009D   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
009E   28A2           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
009F                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
009F   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00A0   28A2           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00A1                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
00A1   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
00A2                  00111 Retardos_ms
00A2   0091           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
00A3                  00113 R1ms_BucleExterno
00A3   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
00A4   0090           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
00A5                  00116 R1ms_BucleInterno
00A5   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
00A6   0B90           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
00A7   28A5           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
00A8   0B91           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00A9   28A3           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
00AA   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
00AB                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
00AB   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00AC   28B6           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00AD                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
00AD   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00AE   28B6           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00AF                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
00AF   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00B0   28B6           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00B1                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
00B1   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00B2   28B6           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00B3                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
00B3   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00B4   28B6           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00B5                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
00B5   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
00B6                  00160 Retardo_1Decima
00B6   0092           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
00B7                  00162 R1Decima_BucleExterno2
00B7   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
00B8   0091           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
00B9                  00165 R1Decima_BucleExterno
00B9   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
00BA   0090           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
00BB                  00168 R1Decima_BucleInterno          
00BB   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
00BC   0B90           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
00BD   28BB           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
00BE   0B91           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
00BF   28B9           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
00C0   0B92           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00C1   28B7           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
00C2   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00091         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10 tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  00000013            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  00000014            00022         BCD_Decenas                     ; la última asignada.
  00000015            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
00C3                  00026 BIN_a_BCD
00C3   0193           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
00C4   0194           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
00C5   0095           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
00C6                  00030 BCD_Resta10
00C6   300A           00031         movlw   .10                     ; A las unidades se le va restando 10 en cada
00C7   0215           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
00C8   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?.
00C9   28D3           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
00CA                  00035 BCD_IncrementaDecenas
00CA   0095           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
00CB   0A94           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
00CC   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
00CD   0214           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
00CE   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?.
00CF   28C6           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
00D0                  00042 BCD_IncrementaCentenas                  ; las unidades.
00D0   0194           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
00D1   0A93           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
00D2   28C6           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
00D3                  00046 BIN_BCD_Fin
00D3   0E14           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
00D4   0715           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
00D5   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal, no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00092         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000016            00025         LCD_Dato
  00000017            00026         LCD_GuardaDato
  00000018            00027         LCD_GuardaTRISB
  00000019            00028         LCD_Auxiliar1
  0000001A            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
00D6                  00045 LCD_Inicializa
00D6   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
00D7   1005           00047         bcf     LCD_PinRS               ; R/W y E.
00D8   1105           00048         bcf     LCD_PinEnable
00D9   1085           00049         bcf     LCD_PinRW
00DA   1283           00050         bcf     STATUS,RP0
00DB   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
00DC   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
00DD   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00DE   2099           00055         call    Retardo_20ms
00DF   3030           00056         movlw   b'00110000'     
00E0   20EE           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
00E1   209D           00058         call    Retardo_5ms     
00E2   3030           00059         movlw   b'00110000'     
00E3   20EE           00060         call    LCD_EscribeLCD
00E4   2086           00061         call    Retardo_200micros
00E5   3030           00062         movlw   b'00110000'     
00E6   20EE           00063         call    LCD_EscribeLCD
00E7   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00E8   20EE           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00068 
00E9   2117           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
00EA   2115           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
00EB   2113           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00EC   2105           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00ED   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00EE                  00082 LCD_EscribeLCD
00EE   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00EF   0096           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00F0   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00F1   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00F2   0496           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00F3   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00F5   0098           00091         movwf   LCD_GuardaTRISB
00F6   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00F7   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00F8   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00F9   0816           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00FA   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00FB   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00FC   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00FD   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00FE   209F           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00FF   208B           00102         call    Retardo_50micros
0100   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
0101   0818           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
0102   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
0103   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
0104   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
0105                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
0105   3006           00114         movlw   b'00000110'
0106   2918           00115         goto    LCD_EnviaComando
0107                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
0107   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
0108   2918           00118         goto    LCD_EnviaComando
0109                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0109   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
010A   2918           00121         goto    LCD_EnviaComando
010B                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
010B   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
010C   2918           00124         goto    LCD_EnviaComando        ; registro W.
010D                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
010D   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
010E   2918           00127         goto    LCD_EnviaComando        ; registro W.
010F                  00128 LCD_OFF                         ; Pantalla apagada.
010F   3008           00129         movlw   b'00001000'
0110   2918           00130         goto    LCD_EnviaComando
0111                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
0111   300E           00132         movlw   b'00001110'
0112   2918           00133         goto    LCD_EnviaComando
0113                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
0113   300C           00135         movlw   b'00001100'
0114   2918           00136         goto    LCD_EnviaComando
0115                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
0115   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
0116   2918           00139         goto    LCD_EnviaComando
0117                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
0117   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
0118                  00151 LCD_EnviaComando
0118   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0119   291C           00153         goto    LCD_Envia
011A                  00154 LCD_Caracter
011A   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
011B   2121           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
011C                  00157 LCD_Envia
011C   0097           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
011D   20EE           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
011E   0E17           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
011F   20EE           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
0120   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
0121                  00177 LCD_CodigoCGROM
0121   0096           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
0122                  00179 LCD_EnheMinuscula                       ; un carácter especial.
0122   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
0123   1D03           00181         btfss   STATUS,Z
0124   2928           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
0125   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
0126   0096           00184         movwf   LCD_Dato
0127   2935           00185         goto    LCD_FinCGROM
0128                  00186 LCD_EnheMayuscula
0128   0816           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0129   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
012A   1D03           00189         btfss   STATUS,Z
012B   292F           00190         goto    LCD_Grado               ; No es "Ñ".
012C   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
012D   0096           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
012E   2935           00193         goto    LCD_FinCGROM    
012F                  00194 LCD_Grado
012F   0816           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0130   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
0131   1D03           00197         btfss   STATUS,Z
0132   2935           00198         goto    LCD_FinCGROM            ; No es "º".
0133   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
0134   0096           00200         movwf   LCD_Dato
0135                  00201 LCD_FinCGROM
0135   0816           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
0136   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
0137                  00209 LCD_LineaEnBlanco
0137   3010           00210         movlw   LCD_CaracteresPorLinea
0138   293E           00211         goto    LCD_EnviaBlancos
0139                  00212 LCD_UnEspacioBlanco
0139   3001           00213         movlw   .1
013A   293E           00214         goto    LCD_EnviaBlancos
013B                  00215 LCD_DosEspaciosBlancos
013B   3002           00216         movlw   .2
013C   293E           00217         goto    LCD_EnviaBlancos
013D                  00218 LCD_TresEspaciosBlancos
013D   3003           00219         movlw   .3
013E                  00220 LCD_EnviaBlancos
013E   0099           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
013F                  00222 LCD_EnviaOtroBlanco     
013F   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
0140   211A           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
0141   0B99           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0142   293F           00226         goto    LCD_EnviaOtroBlanco
0143   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
0144                  00240 LCD_Byte
0144   009A           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0145   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
0146   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0147   294C           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0148   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0149   211A           00246         call    LCD_Caracter
014A   294E           00247         goto    LCD_VisualizaBajo
                      00248 
014B                  00249 LCD_ByteCompleto
014B   009A           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
014C                  00251 LCD_VisualizaAlto
014C   0E1A           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
014D   214F           00253         call    LCD_Nibble              ; Lo visualiza.
014E                  00254 LCD_VisualizaBajo
014E   081A           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
014F                  00266 LCD_Nibble
014F   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
0150   0099           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
0151   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
0152   1C03           00270         btfss   STATUS,C        
0153   2957           00271         goto    LCD_EnviaByteLetra
0154   0819           00272         movf    LCD_Auxiliar1,W
0155   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
0156   2959           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0157                  00275 LCD_EnviaByteLetra
0157   0819           00276         movf    LCD_Auxiliar1,W
0158   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0159                  00278 LCD_FinVisualizaDigito
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0159   291A           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00093         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  0000001B            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  0000001C            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
015A                  00042 LCD_Mensaje
015A   009B           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
015B   301F           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
015C   029B           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
015D   039B           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
015E                  00047 LCD_VisualizaOtroCaracter
015E   081B           00048         movf    LCD_ApuntaCaracter,W
015F   201F           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
0160   009C           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0161   089C           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0162   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0163   2967           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
0164                  00054 LCD_NoUltimoCaracter
0164   211A           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0165   0A9B           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
0166   295E           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
0167                  00058 LCD_FinMensaje
0167   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  0000001D            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
0168                  00073 LCD_MensajeMovimiento
0168   009B           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0169   301F           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
016A   029B           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
016B   039B           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
016C                  00078 LCD_PrimeraPosicion
016C   019D           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
016D   2115           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
016E                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
016E   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
016F   021D           00083         subwf   LCD_CursorPosicion,W
0170   1D03           00084         btfss   STATUS,Z
0171   2977           00085         goto    LCD_NoEsFinalLinea
0172                  00086 LCD_EsFinalLinea
0172   2093           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
0173   2093           00088         call    Retardo_200ms
0174   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
0175   029B           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
0176   296C           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
0177                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
0177   081B           00093         movf    LCD_ApuntaCaracter,W
0178   201F           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0179   009C           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
017A   089C           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
017B   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
017C   2981           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
017D                  00099 LCD_NoUltimoCaracter2
017D   211A           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
017E   0A9D           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
017F   0A9B           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0180   296E           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
0181                  00105 LCD_FinMovimiento                       ; de la línea.
0181   0008           00106         return                          ; Vuelve al programa principal.
                      00094         END
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 19


SYMBOL TABLE
  LABEL                             VALUE 

Auxiliar                          0000000C
BCD_Centenas                      00000013
BCD_Decenas                       00000014
BCD_IncrementaCentenas            000000D0
BCD_IncrementaDecenas             000000CA
BCD_Resta10                       000000C6
BCD_Unidades                      00000015
BIN_BCD_Fin                       000000D3
BIN_a_BCD                         000000C3
C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
I2C_ContadorBits                  0000000D
I2C_Dato                          0000000E
I2C_EnviaBit                      00000056
I2C_EnviaByte                     00000053
I2C_EnviaCero                     00000059
I2C_EnviaStart                    00000045
I2C_EnviaStop                     0000004D
I2C_EnviaUno                      0000005B
I2C_Flags                         0000000F
I2C_FlancoSCL                     0000005C
I2C_LeeBit                        0000006B
I2C_LeeByte                       00000068
I2C_UltimoByteLeer                I2C_Flags,0
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000000
LCD_2Lineas4Bits5x7               00000117
LCD_ApuntaCaracter                0000001B
LCD_Auxiliar1                     00000019
LCD_Auxiliar2                     0000001A
LCD_Borra                         00000115
LCD_BusDatos                      PORTB
LCD_Byte                          00000144
LCD_ByteCompleto                  0000014B
LCD_Caracter                      0000011A
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   00000121
LCD_CursorIncr                    00000105
LCD_CursorOFF                     00000113
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 20


SYMBOL TABLE
  LABEL                             VALUE 

LCD_CursorON                      00000111
LCD_CursorPosicion                0000001D
LCD_Dato                          00000016
LCD_DosEspaciosBlancos            0000013B
LCD_EnheMayuscula                 00000128
LCD_EnheMinuscula                 00000122
LCD_Envia                         0000011C
LCD_EnviaBlancos                  0000013E
LCD_EnviaByteLetra                00000157
LCD_EnviaComando                  00000118
LCD_EnviaOtroBlanco               0000013F
LCD_EsFinalLinea                  00000172
LCD_EscribeLCD                    000000EE
LCD_FinCGROM                      00000135
LCD_FinMensaje                    00000167
LCD_FinMovimiento                 00000181
LCD_FinVisualizaDigito            00000159
LCD_Grado                         0000012F
LCD_GuardaDato                    00000017
LCD_GuardaTRISB                   00000018
LCD_Inicializa                    000000D6
LCD_Linea1                        00000107
LCD_Linea2                        00000109
LCD_LineaEnBlanco                 00000137
LCD_Mensaje                       0000015A
LCD_MensajeMovimiento             00000168
LCD_Nibble                        0000014F
LCD_NoEsFinalLinea                00000177
LCD_NoUltimoCaracter              00000164
LCD_NoUltimoCaracter2             0000017D
LCD_OFF                           0000010F
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                0000010B
LCD_PosicionLinea2                0000010D
LCD_PrimeraPosicion               0000016C
LCD_TresEspaciosBlancos           0000013D
LCD_UnEspacioBlanco               00000139
LCD_ValorCaracter                 0000001C
LCD_VisualizaAlto                 0000014C
LCD_VisualizaBajo                 0000014E
LCD_VisualizaCaracter             0000016E
LCD_VisualizaOtroCaracter         0000015E
MensajeTension                    00000020
MensajeVoltios                    0000002A
Mensajes                          0000001F
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCF8591_DireccionEscritura        0000009E
PCF8591_DireccionLectura          0000009F
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 21


SYMBOL TABLE
  LABEL                             VALUE 

PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         0000000B
R1Decima_BucleExterno             000000B9
R1Decima_BucleExterno2            000000B7
R1Decima_BucleInterno             000000BB
R1ms_BucleExterno                 000000A3
R1ms_BucleInterno                 000000A5
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000010
R_ContB                           00000011
R_ContC                           00000012
RetardoMicros                     0000008F
Retardo_100micros                 00000089
Retardo_100ms                     00000095
Retardo_10micros                  0000007C
Retardo_10ms                      0000009B
Retardo_10s                       000000AD
Retardo_1Decima                   000000B6
Retardo_1ms                       000000A1
Retardo_1s                        000000B3
Retardo_200micros                 00000086
Retardo_200ms                     00000093
Retardo_20micros                  0000008E
Retardo_20ms                      00000099
Retardo_20s                       000000AB
Retardo_2ms                       0000009F
Retardo_2s                        000000B1
Retardo_4micros                   00000082
Retardo_500micros                 00000083
Retardo_500ms                     000000B5
Retardo_50micros                  0000008B
Retardo_50ms                      00000097
Retardo_5micros                   00000081
Retardo_5ms                       0000009D
Retardo_5s                        000000AF
Retardos_ms                       000000A2
Rmicros_Bucle                     00000090
SCL                               PORTA,3
SCL_AltaImpedancia                0000003F
SCL_Bajo                          0000003A
SCL_EsperaNivelAlto               00000042
SDA                               PORTA,4
MPASM 03.50 Released                           I2C_ADC_01.ASM   10-12-2000  20:50:07         PAGE 22


SYMBOL TABLE
  LABEL                             VALUE 

SDA_AltaImpedancia                00000036
SDA_Bajo                          00000031
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
Visualiza                         0000000E
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XX-------------- ---------------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   386
Program Memory Words Free:   638


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

