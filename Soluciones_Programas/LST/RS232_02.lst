MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************ RS232_02.asm **************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; En el modulo LCD se visualizan los caracteres que se escriban en el teclado del ordenador
                      00010 ; y se transmite a  través del puerto serie del ordenador. Estos datos volverán a ser enviados
                      00011 ; por el microcontrolador al ordenador, por lo que también se visualizarán en su monitor.
                      00012 ;
                      00013 ; Se utilizará un programa de comunicaciones para que el ordenador pueda enviar datos
                      00014 ; a través de su puerto serie, como el "Hyperterminal" de Windows o alguno similar.
                      00015 
                      00016 ; Concluyendo, lo que se escriba en el teclado del ordenador aparecerá en la pantalla del
                      00017 ; módulo LCD y en el monitor del Hyperterminal.
                      00018 ;
                      00019 ; ZONA DE DATOS **********************************************************************
                      00020 
2007   3FF1           00021         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00022         LIST       P=16F84A
                      00023         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00024 
                      00025         CBLOCK  0x0C
  0000000C            00026         GuardaDato
                      00027         ENDC
                      00028 
                      00029 ; ZONA DE CÓDIGOS ********************************************************************
                      00030 
0000                  00031         ORG     0
0000                  00032 Inicio
0000   202F           00033         call    LCD_Inicializa          ; Inicializa el LCD y las líneas que se
0001   2008           00034         call    RS232_Inicializa                ; van a utilizar en la comunicación con el puerto
0002                  00035 Principal                                       ; serie RS-232.
0002   200D           00036         call    RS232_LeeDato           ; Espera recibir un carácter.
0003   008C           00037         movwf   GuardaDato              ; Guarda el dato recibido.
0004   2073           00038         call    LCD_Caracter            ; Lo visualiza.
0005   080C           00039         movf    GuardaDato,W            ; Y ahora lo reenvía otra vez al ordenador.
0006   201E           00040         call    RS232_EnviaDato
0007   2802           00041         goto    Principal                       ; Repite el proceso.
                      00042 ;
                      00043         INCLUDE  <RS232.INC>
                      00001 ;***************************** Librería "RS232.INC" *************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de la transmisión
                      00010 ; seríe asincrona según normas RS-232.
                      00011 ;
                      00012 ; Los parámetros adoptados para la comunicación son los siguientes:
                      00013 ; - Velocidad de transmisión de 9600 baudios. La duración de cada bit será 104 µs.
                      00014 ; - Un bit de inicio ó Start a nivel bajo.
                      00015 ; - Dato de 8 bits.
                      00016 ; - Sin paridad.
                      00017 ; - Dos bits de final ó Stop a nivel alto.
                      00018 ;
                      00019 ; El tiempo entre bit y bit  debe coincidir con el período de la señal leída o enviada.
                      00020 ; Como la velocidad de transmisión ó recepción es de 9600 baudios, el período será:
                      00021 ; 1/9600Baudios= 104 µs. Se utilizará pues la subrutina "Retardos_100micros".
                      00022 
                      00023         CBLOCK
  0000000D            00024         RS232_ContadorBits
  0000000E            00025         RS232_Dato
                      00026         ENDC
                      00027 
                      00028 #DEFINE  RS232_Entrada  PORTA,3         ; Línea por la que se reciben los datos.
                      00029 #DEFINE  RS232_Salida   PORTA,4         ; Línea por la que se envían los datos.
                      00030 ;
                      00031 ; Subrutina "RS232_Inicializa" -------------------------------------------------------------
                      00032 ;
                      00033 ; Configura las líneas de salida y entrada del microcontrolador.
                      00034 
0008                  00035 RS232_Inicializa
0008   1683           00036         bsf     STATUS,RP0
0009   1585           00037         bsf     RS232_Entrada           ; Esta línea se configura como entrada.
000A   1205           00038         bcf     RS232_Salida            ; Esta línea se configura como salida.
000B   1283           00039         bcf     STATUS,RP0
000C   0008           00040         return
                      00041 
                      00042 ; Subrutina "RS232_LeeDato" -------------------------------------------------------------
                      00043 ;
                      00044 ; El microcontrolador lee el dato por la línea de entrada comenzando por el bit de menor
                      00045 ; peso. El dato leído se envía finalmente en el registro de trabajo W.
                      00046 ;
                      00047 ; El ordenador parte siempre de un nivel alto, que es el estado que tiene cuando no 
                      00048 ; envía información. La secuencia utilizada es:
                      00049 ; 1º    Espera que se ejecute el pulso negativo del bit Start, o flanco de bajada.
                      00050 ; 2º    Deja pasar un tiempo una y media veces mayor que el periodo de transmisión para
                      00051 ;       saltarse el bit de Start y lee el primer bit en su mitad.
                      00052 ; 3º    Lee el resto de los bits de datos, esperando un tiempo igual a la duración del
                      00053 ;       período entre lectura y lectura para testearlos en mitad del bit.
                      00054 ;
                      00055 ; Salida: En el registro de trabajo W el byte leído.
                      00056 
000D                  00057 RS232_LeeDato
000D   3008           00058         movlw   d'8'                    ; Número de bits a recibir.
000E   008D           00059         movwf   RS232_ContadorBits
000F                  00060 RS232_EsperaBitStart
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F   1985           00061         btfsc   RS232_Entrada           ; Lee la entrada y espera a que sea "0".
0010   280F           00062         goto    RS232_EsperaBitStart    ; No, pues espera el nivel bajo.
0011   20C0           00063         call    Retardo_100micros               ; El primer bit debe leerlo un tiempo igual a una
0012   20C2           00064         call    Retardo_50micros                ; vez y media el periodo de transmisión.
0013                  00065 RS232_LeeBit
0013   1003           00066         bcf     STATUS,C                ; Ahora lee el pin. En principio supone que es 0.
0014   1985           00067         btfsc   RS232_Entrada           ; ¿Realmente es cero?.
0015   1403           00068         bsf     STATUS,C                ; No, pues cambia a uno.
0016   0C8E           00069         rrf     RS232_Dato,F            ; Introduce el bit en el registro de lectura.
0017   20C0           00070         call    Retardo_100micros               ; Los siguientes bits los lee un período más tarde.
0018   0B8D           00071         decfsz  RS232_ContadorBits,F    ; Comprueba que es el último bit.
0019   2813           00072         goto    RS232_LeeBit            ; Si no es el último bit, pasa a leer el siguiente.
001A   20BD           00073         call    Retardo_200micros               ; Espera un tiempo igual al los 2 bits de "Stop".
001B   080E           00074         movf    RS232_Dato,W            ; El resultado en el registro W.
001C   0008           00075         return  
                      00076 
                      00077 ; Subrutinas "RS232_EnviaDato" y "RS232_EnviaNúmero" -------------------------------------
                      00078 ;
                      00079 ; El microcontrolador envía un dato por la línea de salida comenzando por el bit de menor
                      00080 ; peso. En dato enviado será el que le llegue a través del registro de trabajo W.
                      00081 ; 1º.   Envía un "0" durante un tiempo igual al período de la velocidad de transmisión.
                      00082 ;       Este es el bit de "Start".
                      00083 ; 2º.   Envía el bit correspondiente:
                      00084 ;       - Si va a enviar un "0" permanece en bajo durante el período correspondiente.
                      00085 ;       - Si va a escribir un "1" permanece en alto durante el período correspondiente.
                      00086 ; 3º.   Envía dos bits "1" durante un tiempo igual al período de la velocidad de 
                      00087 ;       transmisión cada uno. Estos son los dos bits de "Stop".
                      00088 ;
                      00089 ; Entrada:      En (W) el dato a enviar.
                      00090 
001D                  00091 RS232_EnviaNumero                       ; Envía el código ASCII de un número.
001D   3E30           00092         addlw   '0'                     ; Lo pasa a código ASCII sumándole el ASCII del 0.
001E                  00093 RS232_EnviaDato
001E   008E           00094         movwf   RS232_Dato              ; Guarda el contenido del byte a transmitir.
001F   3008           00095         movlw   d'8'                    ; Este es el número de bits a transmitir.
0020   008D           00096         movwf   RS232_ContadorBits
0021   1205           00097         bcf     RS232_Salida            ; Bit de Start.
0022   20C0           00098         call    Retardo_100micros
0023                  00099 RS232_EnviaBit                          ; Comienza a enviar datos.
0023   0C8E           00100         rrf     RS232_Dato,F            ; Lleva el bit que se quiere enviar al Carry para
0024   1C03           00101         btfss   STATUS,C                ; deducir su valor. ¿Es un "1" el bit a transmitir?.
0025   2828           00102         goto    RS232_EnviaCero         ; No, pues envía un "0".
0026                  00103 RS232_EnviaUno
0026   1605           00104         bsf     RS232_Salida            ; Transmite un "1".
0027   2829           00105         goto    RS232_FinEnviaBit
0028                  00106 RS232_EnviaCero
0028   1205           00107         bcf     RS232_Salida            ; Transmite un "0".
0029                  00108 RS232_FinEnviaBit
0029   20C0           00109         call    Retardo_100micros               ; Este es el tiempo que estará en alto o bajo.
002A   0B8D           00110         decfsz  RS232_ContadorBits,F    ; Comprueba que es el último bit.
002B   2823           00111         goto    RS232_EnviaBit          ; Como no es el último bit repite la operación.
002C   1605           00112         bsf     RS232_Salida            ; Envía dos bits de Stop.
002D   20BD           00113         call    Retardo_200micros
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002E   0008           00114         return
                      00115         
                      00116 ;       ===================================================================
                      00117 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00118 ;         E. Palacios, F. Remiro y L. López.
                      00119 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00120 ;       ===================================================================
                      00044         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  0000000F            00025         LCD_Dato
  00000010            00026         LCD_GuardaDato
  00000011            00027         LCD_GuardaTRISB
  00000012            00028         LCD_Auxiliar1
  00000013            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
002F                  00045 LCD_Inicializa
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002F   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0030   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0031   1105           00048         bcf     LCD_PinEnable
0032   1085           00049         bcf     LCD_PinRW
0033   1283           00050         bcf     STATUS,RP0
0034   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
0035   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
0036   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0037   20D0           00055         call    Retardo_20ms
0038   3030           00056         movlw   b'00110000'     
0039   2047           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
003A   20D4           00058         call    Retardo_5ms     
003B   3030           00059         movlw   b'00110000'     
003C   2047           00060         call    LCD_EscribeLCD
003D   20BD           00061         call    Retardo_200micros
003E   3030           00062         movlw   b'00110000'     
003F   2047           00063         call    LCD_EscribeLCD
0040   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
0041   2047           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
0042   2070           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
0043   206E           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
0044   206C           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
0045   205E           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
0046   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
0047                  00082 LCD_EscribeLCD
0047   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
0048   008F           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
0049   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
004A   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
004B   048F           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
004C   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
004D   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
004E   0091           00091         movwf   LCD_GuardaTRISB
004F   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
0050   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
0051   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
0052   080F           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
0053   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0054   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
0055   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
0056   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
0057   20D6           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
0058   20C2           00102         call    Retardo_50micros
0059   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
005A   0811           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
005B   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
005C   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
005D   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
005E                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
005E   3006           00114         movlw   b'00000110'
005F   2871           00115         goto    LCD_EnviaComando
0060                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
0060   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
0061   2871           00118         goto    LCD_EnviaComando
0062                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
0062   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
0063   2871           00121         goto    LCD_EnviaComando
0064                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
0064   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
0065   2871           00124         goto    LCD_EnviaComando        ; registro W.
0066                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
0066   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
0067   2871           00127         goto    LCD_EnviaComando        ; registro W.
0068                  00128 LCD_OFF                         ; Pantalla apagada.
0068   3008           00129         movlw   b'00001000'
0069   2871           00130         goto    LCD_EnviaComando
006A                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
006A   300E           00132         movlw   b'00001110'
006B   2871           00133         goto    LCD_EnviaComando
006C                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
006C   300C           00135         movlw   b'00001100'
006D   2871           00136         goto    LCD_EnviaComando
006E                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
006E   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
006F   2871           00139         goto    LCD_EnviaComando
0070                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
0070   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0071                  00151 LCD_EnviaComando
0071   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0072   2875           00153         goto    LCD_Envia
0073                  00154 LCD_Caracter
0073   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
0074   207A           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
0075                  00157 LCD_Envia
0075   0090           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
0076   2047           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
0077   0E10           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
0078   2047           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
0079   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
007A                  00177 LCD_CodigoCGROM
007A   008F           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
007B                  00179 LCD_EnheMinuscula                       ; un carácter especial.
007B   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
007C   1D03           00181         btfss   STATUS,Z
007D   2881           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
007E   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
007F   008F           00184         movwf   LCD_Dato
0080   288E           00185         goto    LCD_FinCGROM
0081                  00186 LCD_EnheMayuscula
0081   080F           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0082   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
0083   1D03           00189         btfss   STATUS,Z
0084   2888           00190         goto    LCD_Grado               ; No es "Ñ".
0085   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
0086   008F           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
0087   288E           00193         goto    LCD_FinCGROM    
0088                  00194 LCD_Grado
0088   080F           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0089   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
008A   1D03           00197         btfss   STATUS,Z
008B   288E           00198         goto    LCD_FinCGROM            ; No es "º".
008C   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
008D   008F           00200         movwf   LCD_Dato
008E                  00201 LCD_FinCGROM
008E   080F           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
008F   0008           00203         return
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
0090                  00209 LCD_LineaEnBlanco
0090   3010           00210         movlw   LCD_CaracteresPorLinea
0091   2897           00211         goto    LCD_EnviaBlancos
0092                  00212 LCD_UnEspacioBlanco
0092   3001           00213         movlw   .1
0093   2897           00214         goto    LCD_EnviaBlancos
0094                  00215 LCD_DosEspaciosBlancos
0094   3002           00216         movlw   .2
0095   2897           00217         goto    LCD_EnviaBlancos
0096                  00218 LCD_TresEspaciosBlancos
0096   3003           00219         movlw   .3
0097                  00220 LCD_EnviaBlancos
0097   0092           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
0098                  00222 LCD_EnviaOtroBlanco     
0098   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
0099   2073           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
009A   0B92           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
009B   2898           00226         goto    LCD_EnviaOtroBlanco
009C   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
009D                  00240 LCD_Byte
009D   0093           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
009E   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
009F   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
00A0   28A5           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
00A1   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
00A2   2073           00246         call    LCD_Caracter
00A3   28A7           00247         goto    LCD_VisualizaBajo
                      00248 
00A4                  00249 LCD_ByteCompleto
00A4   0093           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00A5                  00251 LCD_VisualizaAlto
00A5   0E13           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
00A6   20A8           00253         call    LCD_Nibble              ; Lo visualiza.
00A7                  00254 LCD_VisualizaBajo
00A7   0813           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
00A8                  00266 LCD_Nibble
00A8   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
00A9   0092           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
00AA   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
00AB   1C03           00270         btfss   STATUS,C        
00AC   28B0           00271         goto    LCD_EnviaByteLetra
00AD   0812           00272         movf    LCD_Auxiliar1,W
00AE   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00AF   28B2           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00B0                  00275 LCD_EnviaByteLetra
00B0   0812           00276         movf    LCD_Auxiliar1,W
00B1   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
00B2                  00278 LCD_FinVisualizaDigito
00B2   2873           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00045         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000014            00021         R_ContA                         ; Contadores para los retardos.
  00000015            00022         R_ContB
  00000016            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
00B3                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
00B3   0000           00033         nop                             ; Aporta 1 ciclo máquina.
00B4   0000           00034         nop                             ; Aporta 1 ciclo máquina.
00B5   0000           00035         nop                             ; Aporta 1 ciclo máquina.
00B6   0000           00036         nop                             ; Aporta 1 ciclo máquina.
00B7   0000           00037         nop                             ; Aporta 1 ciclo máquina.
00B8                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
00B8   0000           00039         nop                             ; Aporta 1 ciclo máquina.
00B9                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
00B9   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
00BA                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
00BA   0000           00046         nop                             ; Aporta 1 ciclo máquina.
00BB   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
00BC   28C6           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00BD                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
00BD   0000           00050         nop                             ; Aporta 1 ciclo máquina.
00BE   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00BF   28C6           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00C0                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
00C0   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00C1   28C6           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00C2                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
00C2   0000           00057         nop                             ; Aporta 1 ciclo máquina.
00C3   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00C4   28C6           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00C5                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
00C5   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
00C6                  00066 RetardoMicros
00C6   0094           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
00C7                  00068 Rmicros_Bucle
00C7   0B94           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00C8   28C7           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
00C9   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CA                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
00CA   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00CB   28D9           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00CC                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
00CC   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00CD   28D9           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00CE                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
00CE   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00CF   28D9           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00D0                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
00D0   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00D1   28D9           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00D2                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
00D2   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00D3   28D9           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00D4                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
00D4   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00D5   28D9           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00D6                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
00D6   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00D7   28D9           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00D8                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
00D8   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
00D9                  00111 Retardos_ms
00D9   0095           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
00DA                  00113 R1ms_BucleExterno
00DA   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
00DB   0094           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
00DC                  00116 R1ms_BucleInterno
00DC   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
00DD   0B94           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
00DE   28DC           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
00DF   0B95           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00E0   28DA           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
00E1   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00135 ;
00E2                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
00E2   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00E3   28ED           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00E4                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
00E4   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00E5   28ED           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00E6                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
00E6   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00E7   28ED           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00E8                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
00E8   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00E9   28ED           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00EA                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
00EA   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00EB   28ED           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00EC                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
00EC   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
00ED                  00160 Retardo_1Decima
00ED   0096           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
00EE                  00162 R1Decima_BucleExterno2
00EE   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
00EF   0095           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
00F0                  00165 R1Decima_BucleExterno
00F0   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
00F1   0094           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
00F2                  00168 R1Decima_BucleInterno          
00F2   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
00F3   0B94           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
00F4   28F2           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
00F5   0B95           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
00F6   28F0           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
00F7   0B96           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00F8   28EE           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
00F9   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00046         END
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
GuardaDato                        0000000C
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000000
LCD_2Lineas4Bits5x7               00000070
LCD_Auxiliar1                     00000012
LCD_Auxiliar2                     00000013
LCD_Borra                         0000006E
LCD_BusDatos                      PORTB
LCD_Byte                          0000009D
LCD_ByteCompleto                  000000A4
LCD_Caracter                      00000073
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   0000007A
LCD_CursorIncr                    0000005E
LCD_CursorOFF                     0000006C
LCD_CursorON                      0000006A
LCD_Dato                          0000000F
LCD_DosEspaciosBlancos            00000094
LCD_EnheMayuscula                 00000081
LCD_EnheMinuscula                 0000007B
LCD_Envia                         00000075
LCD_EnviaBlancos                  00000097
LCD_EnviaByteLetra                000000B0
LCD_EnviaComando                  00000071
LCD_EnviaOtroBlanco               00000098
LCD_EscribeLCD                    00000047
LCD_FinCGROM                      0000008E
LCD_FinVisualizaDigito            000000B2
LCD_Grado                         00000088
LCD_GuardaDato                    00000010
LCD_GuardaTRISB                   00000011
LCD_Inicializa                    0000002F
LCD_Linea1                        00000060
LCD_Linea2                        00000062
LCD_LineaEnBlanco                 00000090
LCD_Nibble                        000000A8
LCD_OFF                           00000068
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                00000064
LCD_PosicionLinea2                00000066
LCD_TresEspaciosBlancos           00000096
LCD_UnEspacioBlanco               00000092
LCD_VisualizaAlto                 000000A5
LCD_VisualizaBajo                 000000A7
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000002
R1Decima_BucleExterno             000000F0
R1Decima_BucleExterno2            000000EE
R1Decima_BucleInterno             000000F2
R1ms_BucleExterno                 000000DA
R1ms_BucleInterno                 000000DC
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
RS232_ContadorBits                0000000D
RS232_Dato                        0000000E
RS232_Entrada                     PORTA,3
RS232_EnviaBit                    00000023
RS232_EnviaCero                   00000028
RS232_EnviaDato                   0000001E
RS232_EnviaNumero                 0000001D
RS232_EnviaUno                    00000026
RS232_EsperaBitStart              0000000F
RS232_FinEnviaBit                 00000029
RS232_Inicializa                  00000008
RS232_LeeBit                      00000013
RS232_LeeDato                     0000000D
RS232_Salida                      PORTA,4
R_ContA                           00000014
R_ContB                           00000015
R_ContC                           00000016
RetardoMicros                     000000C6
Retardo_100micros                 000000C0
Retardo_100ms                     000000CC
Retardo_10micros                  000000B3
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_10ms                      000000D2
Retardo_10s                       000000E4
Retardo_1Decima                   000000ED
Retardo_1ms                       000000D8
Retardo_1s                        000000EA
Retardo_200micros                 000000BD
Retardo_200ms                     000000CA
Retardo_20micros                  000000C5
Retardo_20ms                      000000D0
Retardo_20s                       000000E2
Retardo_2ms                       000000D6
Retardo_2s                        000000E8
Retardo_4micros                   000000B9
Retardo_500micros                 000000BA
Retardo_500ms                     000000EC
Retardo_50micros                  000000C2
Retardo_50ms                      000000CE
Retardo_5micros                   000000B8
Retardo_5ms                       000000D4
Retardo_5s                        000000E6
Retardos_ms                       000000D9
Rmicros_Bucle                     000000C7
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
MPASM 03.50 Released                             RS232_02.ASM   10-12-2000  19:56:50         PAGE 17


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXX------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   250
Program Memory Words Free:   774


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

