MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*********************************** Int_INT_07.asm *************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Comprueba el funcionamiento de la interrupción por activación del pin RB0/INT y analiza
                      00010 ; como deben guardarse los datos que se corrompen durante el proceso de la llamada a subrutina.
                      00011 ;
                      00012 ; Cada vez que presione el pulsador conectado al pin RB0/INT, conmutará el estado de un LED
                      00013 ; conectado a la línea RB1. Al mismo tiempo en el módulo LCD se visualizará un mensaje
                      00014 ; desplazándose por pantalla.
                      00015 ;
                      00016 ; ZONA DE DATOS **********************************************************************
                      00017 
2007   3FF1           00018         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00019 
                      00020         LIST       P=16F84A
                      00021         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00022 
                      00023         CBLOCK  0x0C
                      00024         ENDC
                      00025 
                      00026 #DEFINE  Pulsador       PORTB,0         ; Línea donde se conecta el pulsador.
                      00027 #DEFINE  LED    PORTB,1                 ; Línea donde se conecta el LED.
                      00028 
                      00029 ; ZONA DE CÓDIGOS ********************************************************************
                      00030 
0000                  00031         ORG     0
0000   2805           00032         goto    Inicio
0004                  00033         ORG     4                       ; Vector de interrupción
0004   2811           00034         goto    ServicioInterrupcion
0005                  00035 Inicio
0005   209D           00036         call    LCD_Inicializa
0006   1683           00037         bsf     STATUS,RP0              ; Acceso al Banco 1.
0007   1406           00038         bsf     Pulsador                ; La línea RB0/INT se configura como entrada.
0008   1086           00039         bcf     LED                     ; Se configura como salida.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0009   1381           00040         bcf     OPTION_REG,NOT_RBPU     ; Activa las resistencias de Pull-Up del Puerto B.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
000A   1301           00041         bcf     OPTION_REG,INTEDG       ; Interrupción INT se activa por flanco de bajada.
000B   1283           00042         bcf     STATUS,RP0              ; Acceso al Banco 0.
000C   3090           00043         movlw   b'10010000'             ; Habilita la interrupción INT y la general.
000D   008B           00044         movwf   INTCON
000E                  00045 Principal
000E   302C           00046         movlw   MensajeLargo            ; Visualiza el mensaje desplazándose por la
000F   2083           00047         call    LCD_MensajeMovimiento   ; pantalla.
0010   280E           00048         goto    Principal
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00049 
                      00050 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
                      00051 ;
                      00052 ; Subrutina de atención a la interrupción. Conmuta el estado del LED.
                      00053 
                      00054 ; Como esta subrutina altera los valores del registro de trabajo W, del STATUS, y de los
                      00055 ; registros R_ContA y R_ContB utilizados en los retardos, habrá que preservar su valor
                      00056 ; previo y después restaurarlo al final.
                      00057 
                      00058         CBLOCK  
  0000000C            00059         Guarda_W
  0000000D            00060         Guarda_STATUS
  0000000E            00061         Guarda_R_ContA
  0000000F            00062         Guarda_R_ContB
                      00063         ENDC
                      00064 
0011                  00065 ServicioInterrupcion
0011   008C           00066         movwf   Guarda_W                ; Guarda W y STATUS.
0012   0E03           00067         swapf   STATUS,W                ; Ya que "movf STATUS,W", corrompe el bit Z.
0013   008D           00068         movwf   Guarda_STATUS
0014   1283           00069         bcf     STATUS,RP0              ; Para asegurarse que trabaja con el banco 0.
0015   0818           00070         movf    R_ContA,W               ; Guarda los registros utilizados en esta 
0016   008E           00071         movwf   Guarda_R_ContA          ; subrutina y también en la principal.
0017   0819           00072         movf    R_ContB,W
0018   008F           00073         movwf   Guarda_R_ContB
                      00074 ;
0019   213E           00075         call    Retardo_20ms
001A   1806           00076         btfsc   Pulsador                ; Comprueba si es un rebote.
001B   2821           00077         goto    FinInterrupcion         ; Era un rebote y por tanto sale.
001C   1886           00078         btfsc   LED                     ; Testea el último estado del LED.
001D   2820           00079         goto    EstabaEncendido
001E                  00080 EstabaApagado
001E   1486           00081         bsf     LED                     ; Estaba apagado y lo enciende.
001F   2821           00082         goto    FinInterrupcion
0020                  00083 EstabaEncendido
0020   1086           00084         bcf     LED                     ; Estaba encendido y lo apaga.
0021                  00085 FinInterrupcion
0021   0E0D           00086         swapf   Guarda_STATUS,W         ; Restaura el STATUS.
0022   0083           00087         movwf   STATUS
0023   0E8C           00088         swapf   Guarda_W,F              ; Restaura W como estaba antes de producirse
0024   0E0C           00089         swapf   Guarda_W,W              ; interrupción.
0025   080E           00090         movf    Guarda_R_ContA,W        ; Restaura los registros utilizados en esta 
0026   0098           00091         movwf   R_ContA                 ; subrutina y también en la principal.
0027   080F           00092         movf    Guarda_R_ContB,W
0028   0099           00093         movwf   R_ContB
0029   108B           00094         bcf     INTCON,INTF             ; Limpia flag de reconocimiento de la interrupción.
002A   0009           00095         retfie                          ; Retorna y rehabilita las interrupciones.
                      00096 
                      00097 ; "Mensajes" ----------------------------------------------------------------------------
                      00098 
002B                  00099 Mensajes
002B   0782           00100         addwf   PCL,F           
002C                  00101 MensajeLargo
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002C   3420 3420 3420 00102         DT "                "
       3420 3420 3420 
       3420 3420 3420 
       3420 3420 3420 
       3420 3420 3420 
       3420 
003C   344D 3465 3420 00103         DT "Me gusta desarrollar proyectos con PICs."
       3467 3475 3473 
       3474 3461 3420 
       3464 3465 3473 
       3461 3472 3472 
       346F 346C 346C 
       3461 3472 3420 
       3470 3472 346F 
       3479 3465 3463 
       3474 346F 3473 
       3420 3463 346F 
       346E 3420 3450 
       3449 3443 3473 
       342E 
0064   3420 3420 3420 00104         DT "                ", 0x00
       3420 3420 3420 
       3420 3420 3420 
       3420 3420 3420 
       3420 3420 3420 
       3420 3400 
                      00105 
                      00106         INCLUDE   <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  00000010            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  00000011            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
0075                  00042 LCD_Mensaje
0075   0090           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
0076   302B           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0077   0290           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
0078   0390           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0079                  00047 LCD_VisualizaOtroCaracter
0079   0810           00048         movf    LCD_ApuntaCaracter,W
007A   202B           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
007B   0091           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
007C   0891           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
007D   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
007E   2882           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
007F                  00054 LCD_NoUltimoCaracter
007F   20E1           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0080   0A90           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
0081   2879           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
0082                  00058 LCD_FinMensaje
0082   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  00000012            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
0083                  00073 LCD_MensajeMovimiento
0083   0090           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0084   302B           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0085   0290           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
0086   0390           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0087                  00078 LCD_PrimeraPosicion
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0087   0192           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
0088   20DC           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
0089                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
0089   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
008A   0212           00083         subwf   LCD_CursorPosicion,W
008B   1D03           00084         btfss   STATUS,Z
008C   2892           00085         goto    LCD_NoEsFinalLinea
008D                  00086 LCD_EsFinalLinea
008D   2138           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
008E   2138           00088         call    Retardo_200ms
008F   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
0090   0290           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
0091   2887           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
0092                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
0092   0810           00093         movf    LCD_ApuntaCaracter,W
0093   202B           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0094   0091           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0095   0891           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0096   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0097   289C           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
0098                  00099 LCD_NoUltimoCaracter2
0098   20E1           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0099   0A92           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
009A   0A90           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
009B   2889           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
009C                  00105 LCD_FinMovimiento                       ; de la línea.
009C   0008           00106         return                          ; Vuelve al programa principal.
                      00107         INCLUDE   <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000013            00025         LCD_Dato
  00000014            00026         LCD_GuardaDato
  00000015            00027         LCD_GuardaTRISB
  00000016            00028         LCD_Auxiliar1
  00000017            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
009D                  00045 LCD_Inicializa
009D   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
009E   1005           00047         bcf     LCD_PinRS               ; R/W y E.
009F   1105           00048         bcf     LCD_PinEnable
00A0   1085           00049         bcf     LCD_PinRW
00A1   1283           00050         bcf     STATUS,RP0
00A2   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
00A3   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
00A4   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00A5   213E           00055         call    Retardo_20ms
00A6   3030           00056         movlw   b'00110000'     
00A7   20B5           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
00A8   2142           00058         call    Retardo_5ms     
00A9   3030           00059         movlw   b'00110000'     
00AA   20B5           00060         call    LCD_EscribeLCD
00AB   212B           00061         call    Retardo_200micros
00AC   3030           00062         movlw   b'00110000'     
00AD   20B5           00063         call    LCD_EscribeLCD
00AE   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00AF   20B5           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
00B0   20DE           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
00B1   20DC           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
00B2   20DA           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00B3   20CC           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00B4   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00B5                  00082 LCD_EscribeLCD
00B5   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00B6   0093           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00B7   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00B8   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00B9   0493           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00BA   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00BB   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00BC   0095           00091         movwf   LCD_GuardaTRISB
00BD   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00BE   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00BF   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00C0   0813           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00C1   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00C2   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00C3   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00C4   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00C5   2144           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00C6   2130           00102         call    Retardo_50micros
00C7   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00C8   0815           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00C9   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00CA   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00CB   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00CC                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00CC   3006           00114         movlw   b'00000110'
00CD   28DF           00115         goto    LCD_EnviaComando
00CE                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00CE   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00CF   28DF           00118         goto    LCD_EnviaComando
00D0                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00D0   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00D1   28DF           00121         goto    LCD_EnviaComando
00D2                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00D2   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00D3   28DF           00124         goto    LCD_EnviaComando        ; registro W.
00D4                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00D4   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00D5   28DF           00127         goto    LCD_EnviaComando        ; registro W.
00D6                  00128 LCD_OFF                         ; Pantalla apagada.
00D6   3008           00129         movlw   b'00001000'
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D7   28DF           00130         goto    LCD_EnviaComando
00D8                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00D8   300E           00132         movlw   b'00001110'
00D9   28DF           00133         goto    LCD_EnviaComando
00DA                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00DA   300C           00135         movlw   b'00001100'
00DB   28DF           00136         goto    LCD_EnviaComando
00DC                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00DC   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
00DD   28DF           00139         goto    LCD_EnviaComando
00DE                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00DE   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
00DF                  00151 LCD_EnviaComando
00DF   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00E0   28E3           00153         goto    LCD_Envia
00E1                  00154 LCD_Caracter
00E1   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00E2   20E8           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00E3                  00157 LCD_Envia
00E3   0094           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00E4   20B5           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00E5   0E14           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
00E6   20B5           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00E7   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00E8                  00177 LCD_CodigoCGROM
00E8   0093           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00E9                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00E9   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00EA   1D03           00181         btfss   STATUS,Z
00EB   28EF           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00EC   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00ED   0093           00184         movwf   LCD_Dato
00EE   28FC           00185         goto    LCD_FinCGROM
00EF                  00186 LCD_EnheMayuscula
00EF   0813           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00F0   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00F1   1D03           00189         btfss   STATUS,Z
00F2   28F6           00190         goto    LCD_Grado               ; No es "Ñ".
00F3   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00F4   0093           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00F5   28FC           00193         goto    LCD_FinCGROM    
00F6                  00194 LCD_Grado
00F6   0813           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00F7   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00F8   1D03           00197         btfss   STATUS,Z
00F9   28FC           00198         goto    LCD_FinCGROM            ; No es "º".
00FA   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00FB   0093           00200         movwf   LCD_Dato
00FC                  00201 LCD_FinCGROM
00FC   0813           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
00FD   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
00FE                  00209 LCD_LineaEnBlanco
00FE   3010           00210         movlw   LCD_CaracteresPorLinea
00FF   2905           00211         goto    LCD_EnviaBlancos
0100                  00212 LCD_UnEspacioBlanco
0100   3001           00213         movlw   .1
0101   2905           00214         goto    LCD_EnviaBlancos
0102                  00215 LCD_DosEspaciosBlancos
0102   3002           00216         movlw   .2
0103   2905           00217         goto    LCD_EnviaBlancos
0104                  00218 LCD_TresEspaciosBlancos
0104   3003           00219         movlw   .3
0105                  00220 LCD_EnviaBlancos
0105   0096           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
0106                  00222 LCD_EnviaOtroBlanco     
0106   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
0107   20E1           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
0108   0B96           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
0109   2906           00226         goto    LCD_EnviaOtroBlanco
010A   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
010B                  00240 LCD_Byte
010B   0097           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
010C   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
010D   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
010E   2913           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
010F   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0110   20E1           00246         call    LCD_Caracter
0111   2915           00247         goto    LCD_VisualizaBajo
                      00248 
0112                  00249 LCD_ByteCompleto
0112   0097           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0113                  00251 LCD_VisualizaAlto
0113   0E17           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0114   2116           00253         call    LCD_Nibble              ; Lo visualiza.
0115                  00254 LCD_VisualizaBajo
0115   0817           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
0116                  00266 LCD_Nibble
0116   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
0117   0096           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
0118   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
0119   1C03           00270         btfss   STATUS,C        
011A   291E           00271         goto    LCD_EnviaByteLetra
011B   0816           00272         movf    LCD_Auxiliar1,W
011C   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
011D   2920           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
011E                  00275 LCD_EnviaByteLetra
011E   0816           00276         movf    LCD_Auxiliar1,W
011F   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0120                  00278 LCD_FinVisualizaDigito
0120   28E1           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00108         INCLUDE   <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000018            00021         R_ContA                         ; Contadores para los retardos.
  00000019            00022         R_ContB
  0000001A            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0121                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0121   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0122   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0123   0000           00035         nop                             ; Aporta 1 ciclo máquina.
0124   0000           00036         nop                             ; Aporta 1 ciclo máquina.
0125   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0126                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0126   0000           00039         nop                             ; Aporta 1 ciclo máquina.
0127                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
0127   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
0128                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
0128   0000           00046         nop                             ; Aporta 1 ciclo máquina.
0129   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
012A   2934           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
012B                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
012B   0000           00050         nop                             ; Aporta 1 ciclo máquina.
012C   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
012D   2934           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
012E                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
012E   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
012F   2934           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0130                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0130   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0131   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0132   2934           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0133                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0133   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0134                  00066 RetardoMicros
0134   0098           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
0135                  00068 Rmicros_Bucle
0135   0B98           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0136   2935           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
0137   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
0138                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
0138   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0139   2947           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
013A                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
013A   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
013B   2947           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
013C                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
013C   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
013D   2947           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
013E                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
013E   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
013F   2947           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0140                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0140   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0141   2947           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0142                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0142   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0143   2947           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0144                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0144   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0145   2947           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0146                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0146   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
0147                  00111 Retardos_ms
0147   0099           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
0148                  00113 R1ms_BucleExterno
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0148   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
0149   0098           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
014A                  00116 R1ms_BucleInterno
014A   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
014B   0B98           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
014C   294A           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
014D   0B99           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
014E   2948           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
014F   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0150                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0150   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0151   295B           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0152                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0152   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0153   295B           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0154                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0154   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0155   295B           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0156                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
0156   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0157   295B           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0158                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
0158   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0159   295B           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
015A                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
015A   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
015B                  00160 Retardo_1Decima
015B   009A           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
015C                  00162 R1Decima_BucleExterno2
015C   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
015D   0099           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
015E                  00165 R1Decima_BucleExterno
015E   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

015F   0098           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0160                  00168 R1Decima_BucleInterno          
0160   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0161   0B98           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0162   2960           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0163   0B99           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0164   295E           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0165   0B9A           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0166   295C           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
0167   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00109         END
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
EstabaApagado                     0000001E
EstabaEncendido                   00000020
F                                 00000001
FSR                               00000004
FinInterrupcion                   00000021
GIE                               00000007
Guarda_R_ContA                    0000000E
Guarda_R_ContB                    0000000F
Guarda_STATUS                     0000000D
Guarda_W                          0000000C
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000005
LCD_2Lineas4Bits5x7               000000DE
LCD_ApuntaCaracter                00000010
LCD_Auxiliar1                     00000016
LCD_Auxiliar2                     00000017
LCD_Borra                         000000DC
LCD_BusDatos                      PORTB
LCD_Byte                          0000010B
LCD_ByteCompleto                  00000112
LCD_Caracter                      000000E1
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000E8
LCD_CursorIncr                    000000CC
LCD_CursorOFF                     000000DA
LCD_CursorON                      000000D8
LCD_CursorPosicion                00000012
LCD_Dato                          00000013
LCD_DosEspaciosBlancos            00000102
LCD_EnheMayuscula                 000000EF
LCD_EnheMinuscula                 000000E9
LCD_Envia                         000000E3
LCD_EnviaBlancos                  00000105
LCD_EnviaByteLetra                0000011E
LCD_EnviaComando                  000000DF
LCD_EnviaOtroBlanco               00000106
LCD_EsFinalLinea                  0000008D
LCD_EscribeLCD                    000000B5
LCD_FinCGROM                      000000FC
LCD_FinMensaje                    00000082
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

LCD_FinMovimiento                 0000009C
LCD_FinVisualizaDigito            00000120
LCD_Grado                         000000F6
LCD_GuardaDato                    00000014
LCD_GuardaTRISB                   00000015
LCD_Inicializa                    0000009D
LCD_Linea1                        000000CE
LCD_Linea2                        000000D0
LCD_LineaEnBlanco                 000000FE
LCD_Mensaje                       00000075
LCD_MensajeMovimiento             00000083
LCD_Nibble                        00000116
LCD_NoEsFinalLinea                00000092
LCD_NoUltimoCaracter              0000007F
LCD_NoUltimoCaracter2             00000098
LCD_OFF                           000000D6
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000D2
LCD_PosicionLinea2                000000D4
LCD_PrimeraPosicion               00000087
LCD_TresEspaciosBlancos           00000104
LCD_UnEspacioBlanco               00000100
LCD_ValorCaracter                 00000011
LCD_VisualizaAlto                 00000113
LCD_VisualizaBajo                 00000115
LCD_VisualizaCaracter             00000089
LCD_VisualizaOtroCaracter         00000079
LED                               PORTB,1
MensajeLargo                      0000002C
Mensajes                          0000002B
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         0000000E
Pulsador                          PORTB,0
R1Decima_BucleExterno             0000015E
R1Decima_BucleExterno2            0000015C
R1Decima_BucleInterno             00000160
R1ms_BucleExterno                 00000148
R1ms_BucleInterno                 0000014A
RBIE                              00000003
RBIF                              00000000
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000018
R_ContB                           00000019
R_ContC                           0000001A
RetardoMicros                     00000134
Retardo_100micros                 0000012E
Retardo_100ms                     0000013A
Retardo_10micros                  00000121
Retardo_10ms                      00000140
Retardo_10s                       00000152
Retardo_1Decima                   0000015B
Retardo_1ms                       00000146
Retardo_1s                        00000158
Retardo_200micros                 0000012B
Retardo_200ms                     00000138
Retardo_20micros                  00000133
Retardo_20ms                      0000013E
Retardo_20s                       00000150
Retardo_2ms                       00000144
Retardo_2s                        00000156
Retardo_4micros                   00000127
Retardo_500micros                 00000128
Retardo_500ms                     0000015A
Retardo_50micros                  00000130
Retardo_50ms                      0000013C
Retardo_5micros                   00000126
Retardo_5ms                       00000142
Retardo_5s                        00000154
Retardos_ms                       00000147
Rmicros_Bucle                     00000135
STATUS                            00000003
ServicioInterrupcion              00000011
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
MPASM 03.50 Released                           INT_INT_07.ASM   10-10-2003  12:57:30         PAGE 18


SYMBOL TABLE
  LABEL                             VALUE 

_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXX-------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   357
Program Memory Words Free:   667


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     3 reported,     0 suppressed

