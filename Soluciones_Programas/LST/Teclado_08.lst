MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************** Teclado_08.asm ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Suma el valor de tres teclas pulsadas consecutivamente. En la primera línea de la pantalla del
                      00010 ; modulo LCD aparece en hexadecimal y en la segunda en decimal. Así por ejemplo, si pulsa
                      00011 ; "A", "6" y "F" en pantalla aparece:
                      00012 ;       Hex: A+6+F=1F   (Primera Línea)
                      00013 ;       Dec: 10+06+15=31        (Segunda Línea)
                      00014 ;
                      00015 ; ZONA DE DATOS **********************************************************************
                      00016 
2007   3FF1           00017         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00018         LIST       P=16F84A
                      00019         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00020 
                      00021         CBLOCK  0x0C
  0000000C            00022         ContadorTeclasPulsadas
  0000000D            00023         GuardaValor
  0000000E            00024         Operando1
  0000000F            00025         Operando2
  00000010            00026         Operando3
  00000011            00027         Resultado
                      00028         ENDC
                      00029 
                      00030 ; ZONA DE CÓDIGOS ********************************************************************
                      00031 
                      00032 VisualizaHex    MACRO   Operando,Caracter
                      00033         movf    GuardaValor,W           ; Recupera el valor y lo visualiza.
                      00034         movwf   Operando                ; Lo guarda para sumar después.
                      00035         call    LCD_Nibble              ; Visualiza el valor en la pantalla
                      00036         movlw   Caracter
                      00037         call    LCD_Caracter            ; Visualiza el signo '+' ó '-' según corresponda.
                      00038         incf    ContadorTeclasPulsadas,F
                      00039         ENDM
                      00040 
                      00041 VisualizaDec    MACRO   Operando,Caracter
                      00042         movf    Operando,W              ; (Operando) -> (W)
                      00043         call    BIN_a_BCD               ; Lo pasa a BCD.
                      00044         call    LCD_ByteCompleto        ; Visualiza en pantalla.
                      00045         movlw   Caracter                ; A continuación signo '+' o '=' según corresponda.
                      00046         call    LCD_Caracter
                      00047         ENDM
                      00048 
0000                  00049         ORG     0
0000   2805           00050         goto    Inicio
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0004                  00051         ORG     4
0004   280C           00052         goto    ServicioInterrupcion
0005                  00053 Inicio
0005   2096           00054         call    LCD_Inicializa
0006   206E           00055         call    Teclado_Inicializa
0007   018C           00056         clrf    ContadorTeclasPulsadas  ; Resetea este contador.
0008   3088           00057         movlw   b'10001000'             ; Habilita la interrupción RBI y la general.
0009   008B           00058         movwf   INTCON
000A                  00059 Principal
000A   0063           00060         sleep                           ; Espera en modo bajo consumo que pulse.
000B   280A           00061         goto    Principal
                      00062 
                      00063 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
                      00064 ;
000C                  00065 ServicioInterrupcion
000C   2057           00066         call    Teclado_LeeHex          ; Obtiene el valor hexadecimal de la tecla pulsada.
000D   008D           00067         movwf   GuardaValor             ; Guarda el valor.
000E   080C           00068         movf    ContadorTeclasPulsadas,W; Según el número de tecla pulsada realiza una
000F   0782           00069         addwf   PCL,F                   ; función distinta.
0010   2813           00070         goto    PrimeraTeclaPulsada
0011   281D           00071         goto    SegundaTeclaPulsada
0012   2824           00072         goto    TerceraTeclaPulsada
0013                  00073 PrimeraTeclaPulsada
0013   20D5           00074         call    LCD_Borra               ; Borra la pantalla anterior.
0014   304B           00075         movlw   MensajeHex              ; En pantalla el mensaje "Hex:"
0015   211A           00076         call    LCD_Mensaje
                      00077         VisualizaHex Operando1,'+'
0016   080D               M         movf    GuardaValor,W           ; Recupera el valor y lo visualiza.
0017   008E               M         movwf   Operando1               ; Lo guarda para sumar después.
0018   210F               M         call    LCD_Nibble              ; Visualiza el valor en la pantalla
0019   302B               M         movlw   '+'
001A   20DA               M         call    LCD_Caracter            ; Visualiza el signo '+' ó '-' según corresponda.
001B   0A8C               M         incf    ContadorTeclasPulsadas,F
001C   2847           00078         goto    FinInterrupcion
001D                  00079 SegundaTeclaPulsada
                      00080         VisualizaHex Operando2,'+'
001D   080D               M         movf    GuardaValor,W           ; Recupera el valor y lo visualiza.
001E   008F               M         movwf   Operando2               ; Lo guarda para sumar después.
001F   210F               M         call    LCD_Nibble              ; Visualiza el valor en la pantalla
0020   302B               M         movlw   '+'
0021   20DA               M         call    LCD_Caracter            ; Visualiza el signo '+' ó '-' según corresponda.
0022   0A8C               M         incf    ContadorTeclasPulsadas,F
0023   2847           00081         goto    FinInterrupcion
0024                  00082 TerceraTeclaPulsada
                      00083         VisualizaHex Operando3,'='
0024   080D               M         movf    GuardaValor,W           ; Recupera el valor y lo visualiza.
0025   0090               M         movwf   Operando3               ; Lo guarda para sumar después.
0026   210F               M         call    LCD_Nibble              ; Visualiza el valor en la pantalla
0027   303D               M         movlw   '='
0028   20DA               M         call    LCD_Caracter            ; Visualiza el signo '+' ó '-' según corresponda.
0029   0A8C               M         incf    ContadorTeclasPulsadas,F
                      00084 ;
002A   080E           00085         movf    Operando1,W             ; Procede a la suma de los tres valores.
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002B   070F           00086         addwf   Operando2,W
002C   0710           00087         addwf   Operando3,W
002D   0091           00088         movwf   Resultado
002E   2104           00089         call    LCD_Byte                ; Visualiza el resultado.
002F   20C9           00090         call    LCD_Linea2              ; Ahora visualiza la segunda línea.
0030   3051           00091         movlw   MensajeDec              ; En pantalla el mensaje "Dec:"
0031   211A           00092         call    LCD_Mensaje
                      00093         VisualizaDec Operando1,'+'
0032   080E               M         movf    Operando1,W             ; (Operando) -> (W)
0033   2189               M         call    BIN_a_BCD               ; Lo pasa a BCD.
0034   210B               M         call    LCD_ByteCompleto        ; Visualiza en pantalla.
0035   302B               M         movlw   '+'                     ; A continuación signo '+' o '=' según corresponda.
0036   20DA               M         call    LCD_Caracter
                      00094         VisualizaDec Operando2,'+'
0037   080F               M         movf    Operando2,W             ; (Operando) -> (W)
0038   2189               M         call    BIN_a_BCD               ; Lo pasa a BCD.
0039   210B               M         call    LCD_ByteCompleto        ; Visualiza en pantalla.
003A   302B               M         movlw   '+'                     ; A continuación signo '+' o '=' según corresponda.
003B   20DA               M         call    LCD_Caracter
                      00095         VisualizaDec Operando3,'='
003C   0810               M         movf    Operando3,W             ; (Operando) -> (W)
003D   2189               M         call    BIN_a_BCD               ; Lo pasa a BCD.
003E   210B               M         call    LCD_ByteCompleto        ; Visualiza en pantalla.
003F   303D               M         movlw   '='                     ; A continuación signo '+' o '=' según corresponda.
0040   20DA               M         call    LCD_Caracter
                      00096         VisualizaDec Resultado,' '
0041   0811               M         movf    Resultado,W             ; (Operando) -> (W)
0042   2189               M         call    BIN_a_BCD               ; Lo pasa a BCD.
0043   210B               M         call    LCD_ByteCompleto        ; Visualiza en pantalla.
0044   3020               M         movlw   ' '                     ; A continuación signo '+' o '=' según corresponda.
0045   20DA               M         call    LCD_Caracter
0046   018C           00097         clrf    ContadorTeclasPulsadas  ; Resetea este contador.
0047                  00098 FinInterrupcion
0047   2073           00099         call    Teclado_EsperaDejePulsar; Espera levante el dedo.
0048   100B           00100         bcf     INTCON,RBIF
0049   0009           00101         retfie  
                      00102 
                      00103 ; "Mensajes" ----------------------------------------------------------------------------
                      00104 
004A                  00105 Mensajes
004A   0782           00106         addwf   PCL,F
004B                  00107 MensajeHex
004B   3448 3465 3478 00108         DT      "Hex: ", 0x0
       343A 3420 3400 
0051                  00109 MensajeDec
0051   3444 3465 3463 00110         DT      "Dec: ", 0x0
       343A 3420 3400 
                      00111 
                      00112         INCLUDE  <TECLADO.INC>
                      00001 ;**************************** Librería "TECLADO.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para la gestión de un teclado organizado en una matriz de 4 x 4 y 
                      00010 ; conectado al Puerto B según la disposición siguiente:
                      00011 ;
                      00012 ;                RB4 RB5 RB6 RB7
                      00013 ;                  ^    ^    ^    ^
                      00014 ;               |----|----|----|----|
                      00015 ;       RB0 --> |  0 |  1 |  2 |  3 |
                      00016 ;               |----|----|----|----|
                      00017 ;       RB1 --> |  4 |  5 |  6 |  7 |
                      00018 ;               |----|----|----|----|
                      00019 ;       RB2 --> |  8 |  9 | 10| 11|
                      00020 ;               |----|----|----|----|
                      00021 ;       RB3 --> | 12| 13| 14| 15|
                      00022 ;               |----|----|----|----|
                      00023 ;
                      00024 ; Los números que se han dibujado dentro de cada cuadrado es el número de orden de las teclas
                      00025 ; que no tiene por qué coincidir con lo serigrafiado sobre ellas. El paso del número de orden
                      00026 ; de la tecla al valor que hay serigrafiado sobre la misma, se hace con una tabla de conversión.
                      00027 ;
                      00028 ; ZONA DE DATOS **********************************************************************
                      00029 ;
                      00030         CBLOCK
  00000012            00031         Tecl_TeclaOrden                 ; Orden de la tecla a chequear.
                      00032         ENDC
                      00033 
  0000000F            00034 Tecl_UltimaTecla        EQU     d'15'           ; Valor de orden de la última tecla utilizada.
                      00035 
                      00036 ; Subrutina "Teclado_LeeHex" ************************************************************
                      00037 ;
                      00038 ; Cada tecla tiene asignado un número de orden que es contabilizado en la variable
                      00039 ; Tecl_TeclaOrden. Para convertir a su valor según el tipo de teclado en concreto, se
                      00040 ; utiliza una tabla de conversión. 
                      00041 ; A continuación, se expone la relación entre el número de orden de la tecla y los
                      00042 ; valores correspondientes para el teclado hexadecimal más utilizado.
                      00043 ;
                      00044 ;           ORDEN DE TECLA:             TECLADO HEX. UTILIZADO:
                      00045 ;                0   1   2   3                  1  2  3  F
                      00046 ;                4   5   6   7                  4  5  6  E
                      00047 ;                8   9  10  11                  7  8  9  D
                      00048 ;               12  13  14  15                  A  0  B  C
                      00049 ;
                      00050 ; Así, en este ejemplo, la tecla "7" ocupa el orden 8, la tecla "F" ocupa el orden 3 y la
                      00051 ; tecla "9" el orden 10.
                      00052 
                      00053 ; Si cambia el teclado, también hay cambiar de tabla de conversión.
                      00054 ;
                      00055 ; Entrada:      En (W) el orden de la tecla pulsada.
                      00056 ; Salida:       En (W) el valor hexadecimal para este teclado concreto.
                      00057 ;
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0057                  00058 Teclado_LeeHex
0057   207B           00059         call    Teclado_LeeOrdenTecla   ; Lee el Orden de la tecla pulsada
0058   1C03           00060         btfss   STATUS,C                ; ¿Pulsa alguna tecla?, ¿C=1?
0059   285C           00061         goto    Tecl_FinLeeHex          ; No, por tanto sale.
005A   205D           00062         call    Tecl_ConvierteOrdenEnHex        ; Lo convierte en su valor real mediante tabla.
005B   1403           00063         bsf     STATUS,C                ; Vuelve a posicionar el Carry, porque la
005C                  00064 Tecl_FinLeeHex                          ; instrucción "addwf PCL,F" lo pone a 0.
005C   0008           00065         return
                      00066 ;
005D                  00067 Tecl_ConvierteOrdenEnHex                        ; Según el teclado utilizado resulta:
005D   0782           00068         addwf   PCL,F
005E   3401 3402 3403 00069         DT      1h,2h,3h,0Fh            ; Primera fila del teclado.
       340F 
0062   3404 3405 3406 00070         DT      4h,5h,6h,0Eh            ; Segunda fila del teclado
       340E 
0066   3407 3408 3409 00071         DT      7h,8h,9h,0Dh            ; Tercera fila del teclado.
       340D 
006A   340A 3400 340B 00072         DT      0Ah,0h,0Bh,0Ch          ; Cuarta fila del teclado.
       340C 
006E                  00073 Teclado_FinTablaHex
                      00074 ;
                      00075 ; Esta tabla se sitúa al principio de la librería con el propósito que no supere la
                      00076 ; posición 0FFh de memoria ROM de programa. De todas formas, en caso que así fuera 
                      00077 ; visualizaría el siguiente mensaje de error en el proceso de ensamblado:
                      00078 ;
                      00079         IF (Teclado_FinTablaHex > 0xFF)
                      00080                 ERROR   "Atención: La tabla ha superado el tamaño de la página de los"
                      00081                 MESSG   "primeros 256 bytes de memoria ROM. NO funcionará correctamente."
                      00082         ENDIF
                      00083         
                      00084 ; Subrutina "Teclado_Inicializa" --------------------------------------------------------
                      00085 ;
                      00086 ; Esta subrutina configura las líneas del Puerto B según la conexión del teclado realizada
                      00087 ; y comprueba que no hay pulsada tecla alguna al principio.
                      00088 
006E                  00089 Teclado_Inicializa
006E   1683           00090         bsf     STATUS,RP0              ; Configura las líneas del puerto:
006F   30F0           00091         movlw   b'11110000'             ; <RB7:RB4> entradas, <RB3:RB0> salidas
0070   0086           00092         movwf   PORTB
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0071   1381           00093         bcf     OPTION_REG,NOT_RBPU     ; Habilita resistencia de Pull-Up del Puerto B.
0072   1283           00094         bcf     STATUS,RP0              ; Acceso al banco 0.
                      00095 ;       call    Teclado_EsperaDejePulsar
                      00096 ;       return
                      00097 ;
                      00098 ; Subrutina "Teclado_EsperaDejePulsar" --------------------------------------------------
                      00099 ;
                      00100 ;Permanece en esta subrutina mientras siga pulsada la tecla.
                      00101 ;
  000000F0            00102 Teclado_Comprobacion    EQU     b'11110000'
                      00103 
0073                  00104 Teclado_EsperaDejePulsar:
0073   30F0           00105         movlw   Teclado_Comprobacion    ; Pone a cero las cuatro líneas de salida del 
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0074   0086           00106         movwf   PORTB                   ; Puerto B.
0075                  00107 Teclado_SigueEsperando
0075   215F           00108         call    Retardo_20ms            ; Espera a que se estabilicen los niveles de tensión.
0076   0806           00109         movf    PORTB,W         ; Lee el Puerto B.
0077   3CF0           00110         sublw   Teclado_Comprobacion    ; Si es lo mismo que escribió es que ya no pulsa 
0078   1D03           00111         btfss   STATUS,Z                ; tecla alguna.
0079   2875           00112         goto    Teclado_SigueEsperando
007A   0008           00113         return
                      00114 ;
                      00115 ; Subrutina "Teclado_LeeOrdenTecla" -----------------------------------------------------
                      00116 ;
                      00117 ; Lee el teclado, obteniendo el orden de la tecla pulsada. 
                      00118 ;
                      00119 ; Salida:       En (W) el número de orden de la tecla pulsada. Además Carry se pone a "1" si
                      00120 ;               se pulsa una tecla ó a "0" si no se pulsa tecla alguna.
                      00121 ;
007B                  00122 Teclado_LeeOrdenTecla:
007B   0192           00123         clrf    Tecl_TeclaOrden         ; Todavía no ha empezado a chequear el teclado.
007C   30FE           00124         movlw   b'11111110'             ; Va a chequear primera fila.
007D                  00125 Tecl_ChequeaFila                                ; (Ver esquema de conexión).
007D   0086           00126         movwf   PORTB                   ; Activa la fila correspondiente.
007E                  00127 Tecl_Columna1
007E   1E06           00128         btfss   PORTB,4                 ; Chequea 1ª columna buscando un cero. 
007F   2893           00129         goto    Tecl_GuardaValor                ; Sí, es cero y por tanto guarda su valor y sale.
0080   0A92           00130         incf    Tecl_TeclaOrden,F               ; Va a chequear la siguiente tecla.
0081                  00131 Tecl_Columna2                           ; Repite proceso para las siguientes 
0081   1E86           00132         btfss   PORTB,5                 ; columnas.
0082   2893           00133         goto    Tecl_GuardaValor
0083   0A92           00134         incf    Tecl_TeclaOrden,F
0084                  00135 Tecl_Columna3           
0084   1F06           00136         btfss   PORTB,6
0085   2893           00137         goto    Tecl_GuardaValor
0086   0A92           00138         incf    Tecl_TeclaOrden,F
0087                  00139 Tecl_Columna4           
0087   1F86           00140         btfss   PORTB,7
0088   2893           00141         goto    Tecl_GuardaValor
0089   0A92           00142         incf    Tecl_TeclaOrden,F
                      00143 ;
                      00144 ; Comprueba si ha chequeado la última tecla, en cuyo caso sale. Para ello testea si
                      00145 ; el contenido del registro Tecl_TeclaOrden es igual al número de teclas del teclado.
                      00146 ;
008A                  00147 Tecl_TerminaColumnas
008A   300F           00148         movlw   Tecl_UltimaTecla
008B   0212           00149         subwf   Tecl_TeclaOrden,W               ; (W) = (Tecl_TeclaOrden)-Tecl_UltimaTecla.
008C   1803           00150         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Tecl_TeclaOrden)<15?.
008D   2891           00151         goto    Tecl_NoPulsada          ; No, se ha llegado al final del chequeo.
008E   1403           00152         bsf     STATUS,C                ; Sí. Va a chequear la siguiente fila.
008F   0D06           00153         rlf     PORTB,W         ; Apunta a la siguiente fila.
0090   287D           00154         goto    Tecl_ChequeaFila        
0091                  00155 Tecl_NoPulsada
0091   1003           00156         bcf     STATUS,C                ; Posiciona C=0, indicando que no ha pulsado
0092   2895           00157         goto    Tecl_FinTecladoLee      ; tecla alguna y sale.
0093                  00158 Tecl_GuardaValor
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0093   0812           00159         movf    Tecl_TeclaOrden,W               ; El orden de la tecla pulsada en (W) y sale.
0094   1403           00160         bsf     STATUS,C                ; Como hay tecla tecla pulsada, pone C=1. 
0095                  00161 Tecl_FinTecladoLee
0095   0008           00162         return
                      00163         
                      00164 ;       ===================================================================
                      00165 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00166 ;         E. Palacios, F. Remiro y L. López.
                      00167 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00168 ;       ===================================================================
                      00113         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000013            00025         LCD_Dato
  00000014            00026         LCD_GuardaDato
  00000015            00027         LCD_GuardaTRISB
  00000016            00028         LCD_Auxiliar1
  00000017            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
0096                  00045 LCD_Inicializa
0096   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0097   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0098   1105           00048         bcf     LCD_PinEnable
0099   1085           00049         bcf     LCD_PinRW
009A   1283           00050         bcf     STATUS,RP0
009B   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
009C   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
009D   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
009E   215F           00055         call    Retardo_20ms
009F   3030           00056         movlw   b'00110000'     
00A0   20AE           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
00A1   2163           00058         call    Retardo_5ms     
00A2   3030           00059         movlw   b'00110000'     
00A3   20AE           00060         call    LCD_EscribeLCD
00A4   214C           00061         call    Retardo_200micros
00A5   3030           00062         movlw   b'00110000'     
00A6   20AE           00063         call    LCD_EscribeLCD
00A7   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00A8   20AE           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
00A9   20D7           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
00AA   20D5           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
00AB   20D3           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00AC   20C5           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00AD   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00AE                  00082 LCD_EscribeLCD
00AE   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00AF   0093           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00B0   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00B1   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00B2   0493           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00B3   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00B4   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00B5   0095           00091         movwf   LCD_GuardaTRISB
00B6   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00B7   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00B8   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00095 ;
00B9   0813           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00BA   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00BB   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00BC   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00BD   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00BE   2165           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00BF   2151           00102         call    Retardo_50micros
00C0   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00C1   0815           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00C2   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00C3   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00C4   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00C5                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00C5   3006           00114         movlw   b'00000110'
00C6   28D8           00115         goto    LCD_EnviaComando
00C7                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00C7   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00C8   28D8           00118         goto    LCD_EnviaComando
00C9                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00C9   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00CA   28D8           00121         goto    LCD_EnviaComando
00CB                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00CB   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00CC   28D8           00124         goto    LCD_EnviaComando        ; registro W.
00CD                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00CD   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00CE   28D8           00127         goto    LCD_EnviaComando        ; registro W.
00CF                  00128 LCD_OFF                         ; Pantalla apagada.
00CF   3008           00129         movlw   b'00001000'
00D0   28D8           00130         goto    LCD_EnviaComando
00D1                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00D1   300E           00132         movlw   b'00001110'
00D2   28D8           00133         goto    LCD_EnviaComando
00D3                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00D3   300C           00135         movlw   b'00001100'
00D4   28D8           00136         goto    LCD_EnviaComando
00D5                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00D5   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
00D6   28D8           00139         goto    LCD_EnviaComando
00D7                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00D7   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
00D8                  00151 LCD_EnviaComando
00D8   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00D9   28DC           00153         goto    LCD_Envia
00DA                  00154 LCD_Caracter
00DA   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00DB   20E1           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00DC                  00157 LCD_Envia
00DC   0094           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00DD   20AE           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00DE   0E14           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
00DF   20AE           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00E0   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00E1                  00177 LCD_CodigoCGROM
00E1   0093           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00E2                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00E2   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00E3   1D03           00181         btfss   STATUS,Z
00E4   28E8           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00E5   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00E6   0093           00184         movwf   LCD_Dato
00E7   28F5           00185         goto    LCD_FinCGROM
00E8                  00186 LCD_EnheMayuscula
00E8   0813           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00E9   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00EA   1D03           00189         btfss   STATUS,Z
00EB   28EF           00190         goto    LCD_Grado               ; No es "Ñ".
00EC   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00ED   0093           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00EE   28F5           00193         goto    LCD_FinCGROM    
00EF                  00194 LCD_Grado
00EF   0813           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00F0   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00F1   1D03           00197         btfss   STATUS,Z
00F2   28F5           00198         goto    LCD_FinCGROM            ; No es "º".
00F3   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00F4   0093           00200         movwf   LCD_Dato
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F5                  00201 LCD_FinCGROM
00F5   0813           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
00F6   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
00F7                  00209 LCD_LineaEnBlanco
00F7   3010           00210         movlw   LCD_CaracteresPorLinea
00F8   28FE           00211         goto    LCD_EnviaBlancos
00F9                  00212 LCD_UnEspacioBlanco
00F9   3001           00213         movlw   .1
00FA   28FE           00214         goto    LCD_EnviaBlancos
00FB                  00215 LCD_DosEspaciosBlancos
00FB   3002           00216         movlw   .2
00FC   28FE           00217         goto    LCD_EnviaBlancos
00FD                  00218 LCD_TresEspaciosBlancos
00FD   3003           00219         movlw   .3
00FE                  00220 LCD_EnviaBlancos
00FE   0096           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00FF                  00222 LCD_EnviaOtroBlanco     
00FF   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
0100   20DA           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
0101   0B96           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
0102   28FF           00226         goto    LCD_EnviaOtroBlanco
0103   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
0104                  00240 LCD_Byte
0104   0097           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0105   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
0106   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0107   290C           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0108   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0109   20DA           00246         call    LCD_Caracter
010A   290E           00247         goto    LCD_VisualizaBajo
                      00248 
010B                  00249 LCD_ByteCompleto
010B   0097           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
010C                  00251 LCD_VisualizaAlto
010C   0E17           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
010D   210F           00253         call    LCD_Nibble              ; Lo visualiza.
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010E                  00254 LCD_VisualizaBajo
010E   0817           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
010F                  00266 LCD_Nibble
010F   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
0110   0096           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
0111   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
0112   1C03           00270         btfss   STATUS,C        
0113   2917           00271         goto    LCD_EnviaByteLetra
0114   0816           00272         movf    LCD_Auxiliar1,W
0115   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
0116   2919           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0117                  00275 LCD_EnviaByteLetra
0117   0816           00276         movf    LCD_Auxiliar1,W
0118   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0119                  00278 LCD_FinVisualizaDigito
0119   28DA           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00114         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  00000018            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  00000019            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
011A                  00042 LCD_Mensaje
011A   0098           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
011B   304A           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
011C   0298           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
011D   0398           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
011E                  00047 LCD_VisualizaOtroCaracter
011E   0818           00048         movf    LCD_ApuntaCaracter,W
011F   204A           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
0120   0099           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0121   0899           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0122   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0123   2927           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
0124                  00054 LCD_NoUltimoCaracter
0124   20DA           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0125   0A98           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
0126   291E           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
0127                  00058 LCD_FinMensaje
0127   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  0000001A            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
0128                  00073 LCD_MensajeMovimiento
0128   0098           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0129   304A           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
012A   0298           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
012B   0398           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
012C                  00078 LCD_PrimeraPosicion
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012C   019A           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
012D   20D5           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
012E                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
012E   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
012F   021A           00083         subwf   LCD_CursorPosicion,W
0130   1D03           00084         btfss   STATUS,Z
0131   2937           00085         goto    LCD_NoEsFinalLinea
0132                  00086 LCD_EsFinalLinea
0132   2159           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
0133   2159           00088         call    Retardo_200ms
0134   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
0135   0298           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
0136   292C           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
0137                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
0137   0818           00093         movf    LCD_ApuntaCaracter,W
0138   204A           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0139   0099           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
013A   0899           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
013B   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
013C   2941           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
013D                  00099 LCD_NoUltimoCaracter2
013D   20DA           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
013E   0A9A           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
013F   0A98           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
0140   292E           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
0141                  00105 LCD_FinMovimiento                       ; de la línea.
0141   0008           00106         return                          ; Vuelve al programa principal.
                      00115         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  0000001B            00021         R_ContA                         ; Contadores para los retardos.
  0000001C            00022         R_ContB
  0000001D            00023         R_ContC
                      00024         ENDC
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0142                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0142   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0143   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0144   0000           00035         nop                             ; Aporta 1 ciclo máquina.
0145   0000           00036         nop                             ; Aporta 1 ciclo máquina.
0146   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0147                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0147   0000           00039         nop                             ; Aporta 1 ciclo máquina.
0148                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
0148   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
0149                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
0149   0000           00046         nop                             ; Aporta 1 ciclo máquina.
014A   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
014B   2955           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
014C                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
014C   0000           00050         nop                             ; Aporta 1 ciclo máquina.
014D   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
014E   2955           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
014F                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
014F   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0150   2955           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0151                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0151   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0152   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0153   2955           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0154                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
0154   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0155                  00066 RetardoMicros
0155   009B           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
0156                  00068 Rmicros_Bucle
0156   0B9B           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0157   2956           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
0158   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
0159                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
0159   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
015A   2968           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
015B                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
015B   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
015C   2968           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
015D                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
015D   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
015E   2968           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
015F                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
015F   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0160   2968           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0161                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0161   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0162   2968           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0163                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0163   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0164   2968           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0165                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0165   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0166   2968           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0167                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0167   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
0168                  00111 Retardos_ms
0168   009C           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
0169                  00113 R1ms_BucleExterno
0169   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
016A   009B           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
016B                  00116 R1ms_BucleInterno
016B   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
016C   0B9B           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
016D   296B           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
016E   0B9C           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
016F   2969           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0170   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0171                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0171   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0172   297C           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0173                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0173   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0174   297C           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0175                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0175   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0176   297C           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0177                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
0177   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0178   297C           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0179                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
0179   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
017A   297C           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
017B                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
017B   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
017C                  00160 Retardo_1Decima
017C   009D           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
017D                  00162 R1Decima_BucleExterno2
017D   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
017E   009C           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
017F                  00165 R1Decima_BucleExterno
017F   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0180   009B           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0181                  00168 R1Decima_BucleInterno          
0181   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0182   0B9B           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0183   2981           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0184   0B9C           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0185   297F           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0186   0B9D           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0187   297D           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
0188   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00116         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10 tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  0000001E            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  0000001F            00022         BCD_Decenas                     ; la última asignada.
  00000020            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
0189                  00026 BIN_a_BCD
0189   019E           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
018A   019F           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
018B   00A0           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
018C                  00030 BCD_Resta10
018C   300A           00031         movlw   .10                     ; A las unidades se le va restando 10 en cada
018D   0220           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
018E   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?.
018F   2999           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
0190                  00035 BCD_IncrementaDecenas
0190   00A0           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
0191   0A9F           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
0192   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
0193   021F           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
0194   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?.
0195   298C           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
0196                  00042 BCD_IncrementaCentenas                  ; las unidades.
0196   019F           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
0197   0A9E           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
0198   298C           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0199                  00046 BIN_BCD_Fin
0199   0E1F           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
019A   0720           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
019B   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal, no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00117         END
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 20


SYMBOL TABLE
  LABEL                             VALUE 

BCD_Centenas                      0000001E
BCD_Decenas                       0000001F
BCD_IncrementaCentenas            00000196
BCD_IncrementaDecenas             00000190
BCD_Resta10                       0000018C
BCD_Unidades                      00000020
BIN_BCD_Fin                       00000199
BIN_a_BCD                         00000189
C                                 00000000
ContadorTeclasPulsadas            0000000C
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
FinInterrupcion                   00000047
GIE                               00000007
GuardaValor                       0000000D
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000005
LCD_2Lineas4Bits5x7               000000D7
LCD_ApuntaCaracter                00000018
LCD_Auxiliar1                     00000016
LCD_Auxiliar2                     00000017
LCD_Borra                         000000D5
LCD_BusDatos                      PORTB
LCD_Byte                          00000104
LCD_ByteCompleto                  0000010B
LCD_Caracter                      000000DA
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000E1
LCD_CursorIncr                    000000C5
LCD_CursorOFF                     000000D3
LCD_CursorON                      000000D1
LCD_CursorPosicion                0000001A
LCD_Dato                          00000013
LCD_DosEspaciosBlancos            000000FB
LCD_EnheMayuscula                 000000E8
LCD_EnheMinuscula                 000000E2
LCD_Envia                         000000DC
LCD_EnviaBlancos                  000000FE
LCD_EnviaByteLetra                00000117
LCD_EnviaComando                  000000D8
LCD_EnviaOtroBlanco               000000FF
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 21


SYMBOL TABLE
  LABEL                             VALUE 

LCD_EsFinalLinea                  00000132
LCD_EscribeLCD                    000000AE
LCD_FinCGROM                      000000F5
LCD_FinMensaje                    00000127
LCD_FinMovimiento                 00000141
LCD_FinVisualizaDigito            00000119
LCD_Grado                         000000EF
LCD_GuardaDato                    00000014
LCD_GuardaTRISB                   00000015
LCD_Inicializa                    00000096
LCD_Linea1                        000000C7
LCD_Linea2                        000000C9
LCD_LineaEnBlanco                 000000F7
LCD_Mensaje                       0000011A
LCD_MensajeMovimiento             00000128
LCD_Nibble                        0000010F
LCD_NoEsFinalLinea                00000137
LCD_NoUltimoCaracter              00000124
LCD_NoUltimoCaracter2             0000013D
LCD_OFF                           000000CF
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000CB
LCD_PosicionLinea2                000000CD
LCD_PrimeraPosicion               0000012C
LCD_TresEspaciosBlancos           000000FD
LCD_UnEspacioBlanco               000000F9
LCD_ValorCaracter                 00000019
LCD_VisualizaAlto                 0000010C
LCD_VisualizaBajo                 0000010E
LCD_VisualizaCaracter             0000012E
LCD_VisualizaOtroCaracter         0000011E
MensajeDec                        00000051
MensajeHex                        0000004B
Mensajes                          0000004A
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
Operando1                         0000000E
Operando2                         0000000F
Operando3                         00000010
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PrimeraTeclaPulsada               00000013
Principal                         0000000A
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 22


SYMBOL TABLE
  LABEL                             VALUE 

R1Decima_BucleExterno             0000017F
R1Decima_BucleExterno2            0000017D
R1Decima_BucleInterno             00000181
R1ms_BucleExterno                 00000169
R1ms_BucleInterno                 0000016B
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           0000001B
R_ContB                           0000001C
R_ContC                           0000001D
Resultado                         00000011
RetardoMicros                     00000155
Retardo_100micros                 0000014F
Retardo_100ms                     0000015B
Retardo_10micros                  00000142
Retardo_10ms                      00000161
Retardo_10s                       00000173
Retardo_1Decima                   0000017C
Retardo_1ms                       00000167
Retardo_1s                        00000179
Retardo_200micros                 0000014C
Retardo_200ms                     00000159
Retardo_20micros                  00000154
Retardo_20ms                      0000015F
Retardo_20s                       00000171
Retardo_2ms                       00000165
Retardo_2s                        00000177
Retardo_4micros                   00000148
Retardo_500micros                 00000149
Retardo_500ms                     0000017B
Retardo_50micros                  00000151
Retardo_50ms                      0000015D
Retardo_5micros                   00000147
Retardo_5ms                       00000163
Retardo_5s                        00000175
Retardos_ms                       00000168
Rmicros_Bucle                     00000156
STATUS                            00000003
SegundaTeclaPulsada               0000001D
ServicioInterrupcion              0000000C
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
Tecl_ChequeaFila                  0000007D
Tecl_Columna1                     0000007E
Tecl_Columna2                     00000081
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 23


SYMBOL TABLE
  LABEL                             VALUE 

Tecl_Columna3                     00000084
Tecl_Columna4                     00000087
Tecl_ConvierteOrdenEnHex          0000005D
Tecl_FinLeeHex                    0000005C
Tecl_FinTecladoLee                00000095
Tecl_GuardaValor                  00000093
Tecl_NoPulsada                    00000091
Tecl_TeclaOrden                   00000012
Tecl_TerminaColumnas              0000008A
Tecl_UltimaTecla                  0000000F
Teclado_Comprobacion              000000F0
Teclado_EsperaDejePulsar          00000073
Teclado_FinTablaHex               0000006E
Teclado_Inicializa                0000006E
Teclado_LeeHex                    00000057
Teclado_LeeOrdenTecla             0000007B
Teclado_SigueEsperando            00000075
TerceraTeclaPulsada               00000024
VisualizaDec                      
VisualizaHex                      
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM 03.50 Released                           TECLADO_08.ASM   10-11-2003  17:57:17         PAGE 24


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXX---- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   409
Program Memory Words Free:   615


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

