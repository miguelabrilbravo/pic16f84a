MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************ Int_T0I_05.asm ************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; El módulo LCD visualiza constantemente un mensaje largo que se desplaza por la pantalla.
                      00010 ; Al mismo tiempo el diodo LED conectado a la línea RB1 se enciende durante 500 ms y apaga
                      00011 ; durante otros 500 ms a modo de segundero.
                      00012 ;
                      00013 ; ZONA DE DATOS **********************************************************************
                      00014 
2007   3FF1           00015         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00016         LIST       P=16F84A
                      00017         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00018 
                      00019         CBLOCK  0x0C
  0000000C            00020         Registro50ms
                      00021         ENDC
                      00022 
  0000000A            00023 Carga500ms      EQU     d'10'
  FFFFFF3D            00024 TMR0_Carga50ms  EQU     -d'195'
                      00025 #DEFINE         LED     PORTB,1
                      00026 
                      00027 ; ZONA DE CÓDIGOS ********************************************************************
                      00028 
0000                  00029         ORG     0
0000   2805           00030         goto    Inicio
0004                  00031         ORG     4
0004   2814           00032         goto    Timer0_Interrupcion
0005                  00033 Inicio
0005   20A2           00034         call    LCD_Inicializa
0006   1683           00035         bsf     STATUS,RP0
0007   1086           00036         bcf     LED
0008   3007           00037         movlw   b'00000111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0009   0081           00038         movwf   OPTION_REG              ; Prescaler de 256 para el TMR0
000A   1283           00039         bcf     STATUS,RP0
000B   303D           00040         movlw   TMR0_Carga50ms          ; Carga el Timer 0.
000C   0081           00041         movwf   TMR0
000D   300A           00042         movlw   Carga500ms
000E   008C           00043         movwf   Registro50ms            ; Número de veces a repetir la interrupción.
000F   30A0           00044         movlw   b'10100000'             ; Activa interrupción del TMR0 (TOIE) y la
0010   008B           00045         movwf   INTCON                  ; general (GIE).
0011                  00046 Principal
0011   302A           00047         movlw   MensajeLargo
0012   2088           00048         call    LCD_MensajeMovimiento
0013   2811           00049         goto    Principal
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00050 
                      00051 ; Subrutina "Timer0_Interrupcion" -------------------------------------------------------
                      00052 ;
                      00053 ; La interrupción se produce cada 50 ms aproximadamente. Para conseguir una temporización
                      00054 ; de 500 ms habrá que repetir 10 veces el lazo de 50 ms.
                      00055 ; Como esta subrutina altera los valores del registro de trabajo W y del STATUS,
                      00056 ; habrá que preservar su valor previo y restaurarlos al final.
                      00057 
                      00058         CBLOCK  
  0000000D            00059         Guarda_W
  0000000E            00060         Guarda_STATUS
                      00061         ENDC
                      00062 
0014                  00063 Timer0_Interrupcion
0014   008D           00064         movwf   Guarda_W                ; Guarda W y STATUS.
0015   0E03           00065         swapf   STATUS,W                ; Ya que "movf STATUS,W", corrompe el bit Z.
0016   008E           00066         movwf   Guarda_STATUS
0017   1283           00067         bcf     STATUS,RP0              ; Para asegurarse que trabaja con el banco 0.
0018   303D           00068         movlw   TMR0_Carga50ms
0019   0081           00069         movwf   TMR0                    ; Recarga el TMR0.
001A   0B8C           00070         decfsz  Registro50ms,F          ; Decrementa el contador.
001B   2823           00071         goto    FinInterrupcion
001C   300A           00072         movlw   Carga500ms              ; Repone el contador nuevamente.
001D   008C           00073         movwf   Registro50ms
001E   1886           00074         btfsc   LED                     ; Pasa a conmutar el estado del LED.
001F   2822           00075         goto    EstabaEncendido
0020                  00076 EstabaApagado
0020   1486           00077         bsf     LED                     ; Lo enciende.
0021   2823           00078         goto    FinInterrupcion
0022                  00079 EstabaEncendido
0022   1086           00080         bcf     LED                     ; Lo apaga.
0023                  00081 FinInterrupcion
0023   0E0E           00082         swapf   Guarda_STATUS,W         ; Restaura el STATUS.
0024   0083           00083         movwf   STATUS
0025   0E8D           00084         swapf   Guarda_W,F              ; Restaura W como estaba antes de producirse
0026   0E0D           00085         swapf   Guarda_W,W              ; la interrupción.
0027   110B           00086         bcf     INTCON,T0IF
0028   0009           00087         retfie
                      00088 
                      00089 ; Subrutina "Mensajes" ------------------------------------------------------------------
                      00090 ;
0029                  00091 Mensajes
0029   0782           00092         addwf   PCL,F
002A                  00093 MensajeLargo
002A   3420 3420 3420 00094         DT "                "
       3420 3420 3420 
       3420 3420 3420 
       3420 3420 3420 
       3420 3420 3420 
       3420 
003A   3445 3473 3474 00095         DT "Estudia \"Desarrollo de Productos Electronicos\"."
       3475 3464 3469 
       3461 3420 3422 
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3444 3465 3473 
       3461 3472 3472 
       346F 346C 346C 
       346F 3420 3464 
       3465 3420 3450 
       3472 346F 3464 
       3475 3463 3474 
       346F 3473 3420 
       3445 346C 3465 
       3463 3474 3472 
       346F 346E 3469 
       3463 346F 3473 
       3422 342E 
0069   3420 3420 3420 00096         DT "                ", 0x00
       3420 3420 3420 
       3420 3420 3420 
       3420 3420 3420 
       3420 3420 3420 
       3420 3400 
                      00097 ;
                      00098         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  0000000F            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  00000010            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
007A                  00042 LCD_Mensaje
007A   008F           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
007B   3029           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
007C   028F           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
007D   038F           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
007E                  00047 LCD_VisualizaOtroCaracter
007E   080F           00048         movf    LCD_ApuntaCaracter,W
007F   2029           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
0080   0090           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0081   0890           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0082   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0083   2887           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
0084                  00054 LCD_NoUltimoCaracter
0084   20E6           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0085   0A8F           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
0086   287E           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
0087                  00058 LCD_FinMensaje
0087   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  00000011            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
0088                  00073 LCD_MensajeMovimiento
0088   008F           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0089   3029           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
008A   028F           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
008B   038F           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
008C                  00078 LCD_PrimeraPosicion
008C   0191           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
008D   20E1           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
008E                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
008E   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
008F   0211           00083         subwf   LCD_CursorPosicion,W
0090   1D03           00084         btfss   STATUS,Z
0091   2897           00085         goto    LCD_NoEsFinalLinea
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0092                  00086 LCD_EsFinalLinea
0092   213D           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
0093   213D           00088         call    Retardo_200ms
0094   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
0095   028F           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
0096   288C           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
0097                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
0097   080F           00093         movf    LCD_ApuntaCaracter,W
0098   2029           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0099   0090           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
009A   0890           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
009B   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
009C   28A1           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
009D                  00099 LCD_NoUltimoCaracter2
009D   20E6           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
009E   0A91           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
009F   0A8F           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
00A0   288E           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
00A1                  00105 LCD_FinMovimiento                       ; de la línea.
00A1   0008           00106         return                          ; Vuelve al programa principal.
                      00099         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000012            00025         LCD_Dato
  00000013            00026         LCD_GuardaDato
  00000014            00027         LCD_GuardaTRISB
  00000015            00028         LCD_Auxiliar1
  00000016            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
00A2                  00045 LCD_Inicializa
00A2   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
00A3   1005           00047         bcf     LCD_PinRS               ; R/W y E.
00A4   1105           00048         bcf     LCD_PinEnable
00A5   1085           00049         bcf     LCD_PinRW
00A6   1283           00050         bcf     STATUS,RP0
00A7   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
00A8   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
00A9   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00AA   2143           00055         call    Retardo_20ms
00AB   3030           00056         movlw   b'00110000'     
00AC   20BA           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
00AD   2147           00058         call    Retardo_5ms     
00AE   3030           00059         movlw   b'00110000'     
00AF   20BA           00060         call    LCD_EscribeLCD
00B0   2130           00061         call    Retardo_200micros
00B1   3030           00062         movlw   b'00110000'     
00B2   20BA           00063         call    LCD_EscribeLCD
00B3   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00B4   20BA           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
00B5   20E3           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
00B6   20E1           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
00B7   20DF           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00B8   20D1           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00B9   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00BA                  00082 LCD_EscribeLCD
00BA   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00BB   0092           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00BC   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00BD   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00BE   0492           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00BF   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00C0   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00C1   0094           00091         movwf   LCD_GuardaTRISB
00C2   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00C3   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00C4   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00C5   0812           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00C6   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00C7   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00C8   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00C9   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00CA   2149           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00CB   2135           00102         call    Retardo_50micros
00CC   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00CD   0814           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00CE   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00CF   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00D0   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00D1                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00D1   3006           00114         movlw   b'00000110'
00D2   28E4           00115         goto    LCD_EnviaComando
00D3                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00D3   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00D4   28E4           00118         goto    LCD_EnviaComando
00D5                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00D5   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00D6   28E4           00121         goto    LCD_EnviaComando
00D7                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00D7   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00D8   28E4           00124         goto    LCD_EnviaComando        ; registro W.
00D9                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00D9   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00DA   28E4           00127         goto    LCD_EnviaComando        ; registro W.
00DB                  00128 LCD_OFF                         ; Pantalla apagada.
00DB   3008           00129         movlw   b'00001000'
00DC   28E4           00130         goto    LCD_EnviaComando
00DD                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00DD   300E           00132         movlw   b'00001110'
00DE   28E4           00133         goto    LCD_EnviaComando
00DF                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00DF   300C           00135         movlw   b'00001100'
00E0   28E4           00136         goto    LCD_EnviaComando
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E1                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00E1   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
00E2   28E4           00139         goto    LCD_EnviaComando
00E3                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00E3   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
00E4                  00151 LCD_EnviaComando
00E4   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00E5   28E8           00153         goto    LCD_Envia
00E6                  00154 LCD_Caracter
00E6   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00E7   20ED           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00E8                  00157 LCD_Envia
00E8   0093           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00E9   20BA           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00EA   0E13           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
00EB   20BA           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00EC   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00ED                  00177 LCD_CodigoCGROM
00ED   0092           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00EE                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00EE   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00EF   1D03           00181         btfss   STATUS,Z
00F0   28F4           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00F1   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00F2   0092           00184         movwf   LCD_Dato
00F3   2901           00185         goto    LCD_FinCGROM
00F4                  00186 LCD_EnheMayuscula
00F4   0812           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00F5   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00F6   1D03           00189         btfss   STATUS,Z
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F7   28FB           00190         goto    LCD_Grado               ; No es "Ñ".
00F8   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00F9   0092           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00FA   2901           00193         goto    LCD_FinCGROM    
00FB                  00194 LCD_Grado
00FB   0812           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00FC   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00FD   1D03           00197         btfss   STATUS,Z
00FE   2901           00198         goto    LCD_FinCGROM            ; No es "º".
00FF   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
0100   0092           00200         movwf   LCD_Dato
0101                  00201 LCD_FinCGROM
0101   0812           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
0102   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
0103                  00209 LCD_LineaEnBlanco
0103   3010           00210         movlw   LCD_CaracteresPorLinea
0104   290A           00211         goto    LCD_EnviaBlancos
0105                  00212 LCD_UnEspacioBlanco
0105   3001           00213         movlw   .1
0106   290A           00214         goto    LCD_EnviaBlancos
0107                  00215 LCD_DosEspaciosBlancos
0107   3002           00216         movlw   .2
0108   290A           00217         goto    LCD_EnviaBlancos
0109                  00218 LCD_TresEspaciosBlancos
0109   3003           00219         movlw   .3
010A                  00220 LCD_EnviaBlancos
010A   0095           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
010B                  00222 LCD_EnviaOtroBlanco     
010B   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
010C   20E6           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
010D   0B95           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
010E   290B           00226         goto    LCD_EnviaOtroBlanco
010F   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
0110                  00240 LCD_Byte
0110   0096           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0111   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0112   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0113   2918           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0114   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0115   20E6           00246         call    LCD_Caracter
0116   291A           00247         goto    LCD_VisualizaBajo
                      00248 
0117                  00249 LCD_ByteCompleto
0117   0096           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0118                  00251 LCD_VisualizaAlto
0118   0E16           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0119   211B           00253         call    LCD_Nibble              ; Lo visualiza.
011A                  00254 LCD_VisualizaBajo
011A   0816           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
011B                  00266 LCD_Nibble
011B   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
011C   0095           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
011D   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
011E   1C03           00270         btfss   STATUS,C        
011F   2923           00271         goto    LCD_EnviaByteLetra
0120   0815           00272         movf    LCD_Auxiliar1,W
0121   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
0122   2925           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0123                  00275 LCD_EnviaByteLetra
0123   0815           00276         movf    LCD_Auxiliar1,W
0124   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0125                  00278 LCD_FinVisualizaDigito
0125   28E6           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00100         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000017            00021         R_ContA                         ; Contadores para los retardos.
  00000018            00022         R_ContB
  00000019            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0126                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0126   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0127   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0128   0000           00035         nop                             ; Aporta 1 ciclo máquina.
0129   0000           00036         nop                             ; Aporta 1 ciclo máquina.
012A   0000           00037         nop                             ; Aporta 1 ciclo máquina.
012B                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
012B   0000           00039         nop                             ; Aporta 1 ciclo máquina.
012C                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
012C   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
012D                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
012D   0000           00046         nop                             ; Aporta 1 ciclo máquina.
012E   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
012F   2939           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0130                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
0130   0000           00050         nop                             ; Aporta 1 ciclo máquina.
0131   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0132   2939           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0133                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0133   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0134   2939           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0135                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0135   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0136   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0137   2939           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0138                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
0138   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0139                  00066 RetardoMicros
0139   0097           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

013A                  00068 Rmicros_Bucle
013A   0B97           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
013B   293A           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
013C   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
013D                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
013D   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
013E   294C           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
013F                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
013F   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0140   294C           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0141                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
0141   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0142   294C           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0143                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0143   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0144   294C           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0145                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0145   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0146   294C           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0147                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0147   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0148   294C           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0149                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0149   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
014A   294C           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
014B                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
014B   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
014C                  00111 Retardos_ms
014C   0098           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
014D                  00113 R1ms_BucleExterno
014D   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
014E   0097           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
014F                  00116 R1ms_BucleInterno
014F   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
0150   0B97           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
0151   294F           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
0152   0B98           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0153   294D           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0154   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0155                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0155   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0156   2960           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0157                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0157   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0158   2960           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0159                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0159   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
015A   2960           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
015B                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
015B   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
015C   2960           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
015D                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
015D   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
015E   2960           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
015F                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
015F   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
0160                  00160 Retardo_1Decima
0160   0099           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
0161                  00162 R1Decima_BucleExterno2
0161   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
0162   0098           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0163                  00165 R1Decima_BucleExterno
0163   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0164   0097           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0165                  00168 R1Decima_BucleInterno          
0165   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0166   0B97           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0167   2965           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0168   0B98           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0169   2963           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

016A   0B99           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
016B   2961           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
016C   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00101         END
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
Carga500ms                        0000000A
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
EstabaApagado                     00000020
EstabaEncendido                   00000022
F                                 00000001
FSR                               00000004
FinInterrupcion                   00000023
GIE                               00000007
Guarda_STATUS                     0000000E
Guarda_W                          0000000D
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000005
LCD_2Lineas4Bits5x7               000000E3
LCD_ApuntaCaracter                0000000F
LCD_Auxiliar1                     00000015
LCD_Auxiliar2                     00000016
LCD_Borra                         000000E1
LCD_BusDatos                      PORTB
LCD_Byte                          00000110
LCD_ByteCompleto                  00000117
LCD_Caracter                      000000E6
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000ED
LCD_CursorIncr                    000000D1
LCD_CursorOFF                     000000DF
LCD_CursorON                      000000DD
LCD_CursorPosicion                00000011
LCD_Dato                          00000012
LCD_DosEspaciosBlancos            00000107
LCD_EnheMayuscula                 000000F4
LCD_EnheMinuscula                 000000EE
LCD_Envia                         000000E8
LCD_EnviaBlancos                  0000010A
LCD_EnviaByteLetra                00000123
LCD_EnviaComando                  000000E4
LCD_EnviaOtroBlanco               0000010B
LCD_EsFinalLinea                  00000092
LCD_EscribeLCD                    000000BA
LCD_FinCGROM                      00000101
LCD_FinMensaje                    00000087
LCD_FinMovimiento                 000000A1
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

LCD_FinVisualizaDigito            00000125
LCD_Grado                         000000FB
LCD_GuardaDato                    00000013
LCD_GuardaTRISB                   00000014
LCD_Inicializa                    000000A2
LCD_Linea1                        000000D3
LCD_Linea2                        000000D5
LCD_LineaEnBlanco                 00000103
LCD_Mensaje                       0000007A
LCD_MensajeMovimiento             00000088
LCD_Nibble                        0000011B
LCD_NoEsFinalLinea                00000097
LCD_NoUltimoCaracter              00000084
LCD_NoUltimoCaracter2             0000009D
LCD_OFF                           000000DB
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000D7
LCD_PosicionLinea2                000000D9
LCD_PrimeraPosicion               0000008C
LCD_TresEspaciosBlancos           00000109
LCD_UnEspacioBlanco               00000105
LCD_ValorCaracter                 00000010
LCD_VisualizaAlto                 00000118
LCD_VisualizaBajo                 0000011A
LCD_VisualizaCaracter             0000008E
LCD_VisualizaOtroCaracter         0000007E
LED                               PORTB,1
MensajeLargo                      0000002A
Mensajes                          00000029
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000011
R1Decima_BucleExterno             00000163
R1Decima_BucleExterno2            00000161
R1Decima_BucleInterno             00000165
R1ms_BucleExterno                 0000014D
R1ms_BucleInterno                 0000014F
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

RP1                               00000006
R_ContA                           00000017
R_ContB                           00000018
R_ContC                           00000019
Registro50ms                      0000000C
RetardoMicros                     00000139
Retardo_100micros                 00000133
Retardo_100ms                     0000013F
Retardo_10micros                  00000126
Retardo_10ms                      00000145
Retardo_10s                       00000157
Retardo_1Decima                   00000160
Retardo_1ms                       0000014B
Retardo_1s                        0000015D
Retardo_200micros                 00000130
Retardo_200ms                     0000013D
Retardo_20micros                  00000138
Retardo_20ms                      00000143
Retardo_20s                       00000155
Retardo_2ms                       00000149
Retardo_2s                        0000015B
Retardo_4micros                   0000012C
Retardo_500micros                 0000012D
Retardo_500ms                     0000015F
Retardo_50micros                  00000135
Retardo_50ms                      00000141
Retardo_5micros                   0000012B
Retardo_5ms                       00000147
Retardo_5s                        00000159
Retardos_ms                       0000014C
Rmicros_Bucle                     0000013A
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0_Carga50ms                    FFFFFF3D
TRISA                             00000085
TRISB                             00000086
Timer0_Interrupcion               00000014
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
MPASM 03.50 Released                           INT_T0I_05.ASM   10-10-2003  13:16:33         PAGE 18


SYMBOL TABLE
  LABEL                             VALUE 

_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXX--- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   362
Program Memory Words Free:   662


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

