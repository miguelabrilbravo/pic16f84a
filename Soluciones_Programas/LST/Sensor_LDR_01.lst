MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;********************************** Sensor_LDR_01.asm ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Una LDR se conecta a la entrada Trigger Schmitt RA4/T0CKI aplicando impulsos al Timer 0 cada
                      00010 ; vez que se oscurece al interponerse un objeto entre la fuente de luz y la LDR. En la pantalla
                      00011 ; del módulo LCD se visualiza el número de veces que se interrumpe el haz de luz en dos digitos
                      00012 ; (hasta 99 máximo).
                      00013 ;
                      00014 ; ZONA DE DATOS **********************************************************************
                      00015 
2007   3FF1           00016         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00017         LIST       P=16F84A
                      00018         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00019 
                      00020         CBLOCK  0x0C
                      00021         ENDC
                      00022 
                      00023 ; ZONA DE CÓDIGOS ********************************************************************
                      00024 
0000                  00025         ORG     0
0000                  00026 Inicio
0000   2065           00027         call    LCD_Inicializa
0001   1683           00028         bsf     STATUS,RP0              ; Acceso al Banco 1.
0002   3028           00029         movlw   b'00101000'             ; TMR0 como contador por flanco ascendente de 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0003   0081           00030         movwf   OPTION_REG              ; RA4/T0CKI. Prescaler asignado al Watchdog.
0004   1283           00031         bcf     STATUS,RP0              ; Acceso al Banco 0.
0005   0181           00032         clrf    TMR0                    ; Inicializa contador.
                      00033 
                      00034 ; La sección "Principal" es de mantenimiento. Solo se dedica a visualizar el Timer 0, cuya
                      00035 ; cuenta se incrementa con los flancos ascentes procedente de la entrada Trigger Schmitt
                      00036 ; RA4/T0CKI donde se ha conectado la LDR.
                      00037 
0006                  00038 Principal
0006   2096           00039         call    LCD_Linea1              ; Se pone al principio de la línea 1.
0007   0801           00040         movf    TMR0,W                  ; Lee el Timer 0.
0008   2052           00041         call    BIN_a_BCD               ; Se debe visualizar en BCD.
0009   20D3           00042         call    LCD_Byte                ; Visualiza apagando las decenas en caso de que sean 0.
000A   2806           00043         goto    Principal
                      00044 
                      00045         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  0000000C            00021         R_ContA                         ; Contadores para los retardos.
  0000000D            00022         R_ContB
  0000000E            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
000B                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
000B   0000           00033         nop                             ; Aporta 1 ciclo máquina.
000C   0000           00034         nop                             ; Aporta 1 ciclo máquina.
000D   0000           00035         nop                             ; Aporta 1 ciclo máquina.
000E   0000           00036         nop                             ; Aporta 1 ciclo máquina.
000F   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0010                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0010   0000           00039         nop                             ; Aporta 1 ciclo máquina.
0011                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
0011   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
0012                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
0012   0000           00046         nop                             ; Aporta 1 ciclo máquina.
0013   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
0014   281E           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0015                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
0015   0000           00050         nop                             ; Aporta 1 ciclo máquina.
0016   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0017   281E           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0018                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0018   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0019   281E           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
001A                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
001A   0000           00057         nop                             ; Aporta 1 ciclo máquina.
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
001C   281E           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
001D                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
001D   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
001E                  00066 RetardoMicros
001E   008C           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
001F                  00068 Rmicros_Bucle
001F   0B8C           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0020   281F           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
0021   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
0022                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
0022   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0023   2831           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0024                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
0024   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0025   2831           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0026                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
0026   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0027   2831           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0028                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0028   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0029   2831           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
002A                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
002A   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
002B   2831           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
002C                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
002C   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
002D   2831           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
002E                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
002E   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
002F   2831           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0030                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0030   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0031                  00111 Retardos_ms
0031   008D           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
0032                  00113 R1ms_BucleExterno
0032   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
0033   008C           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
0034                  00116 R1ms_BucleInterno
0034   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
0035   0B8C           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
0036   2834           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
0037   0B8D           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0038   2832           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0039   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
003A                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
003A   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
003B   2845           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
003C                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
003C   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
003D   2845           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
003E                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
003E   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
003F   2845           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0040                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
0040   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0041   2845           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0042                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
0042   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0043   2845           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0044                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
0044   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
0045                  00160 Retardo_1Decima
0045   008E           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
0046                  00162 R1Decima_BucleExterno2
0046   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0047   008D           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0048                  00165 R1Decima_BucleExterno
0048   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0049   008C           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
004A                  00168 R1Decima_BucleInterno          
004A   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
004B   0B8C           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
004C   284A           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
004D   0B8D           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
004E   2848           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
004F   0B8E           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0050   2846           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
0051   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00046         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10 tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  0000000F            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  00000010            00022         BCD_Decenas                     ; la última asignada.
  00000011            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0052                  00026 BIN_a_BCD
0052   018F           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
0053   0190           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
0054   0091           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
0055                  00030 BCD_Resta10
0055   300A           00031         movlw   .10                     ; A las unidades se le va restando 10 en cada
0056   0211           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
0057   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?.
0058   2862           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
0059                  00035 BCD_IncrementaDecenas
0059   0091           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
005A   0A90           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
005B   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
005C   0210           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
005D   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?.
005E   2855           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
005F                  00042 BCD_IncrementaCentenas                  ; las unidades.
005F   0190           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
0060   0A8F           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
0061   2855           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
0062                  00046 BIN_BCD_Fin
0062   0E10           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
0063   0711           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
0064   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal, no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00047         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000012            00025         LCD_Dato
  00000013            00026         LCD_GuardaDato
  00000014            00027         LCD_GuardaTRISB
  00000015            00028         LCD_Auxiliar1
  00000016            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
0065                  00045 LCD_Inicializa
0065   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0066   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0067   1105           00048         bcf     LCD_PinEnable
0068   1085           00049         bcf     LCD_PinRW
0069   1283           00050         bcf     STATUS,RP0
006A   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
006B   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
006C   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
006D   2028           00055         call    Retardo_20ms
006E   3030           00056         movlw   b'00110000'     
006F   207D           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0070   202C           00058         call    Retardo_5ms     
0071   3030           00059         movlw   b'00110000'     
0072   207D           00060         call    LCD_EscribeLCD
0073   2015           00061         call    Retardo_200micros
0074   3030           00062         movlw   b'00110000'     
0075   207D           00063         call    LCD_EscribeLCD
0076   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
0077   207D           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
0078   20A6           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
0079   20A4           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
007A   20A2           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
007B   2094           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
007C   0008           00073         return
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
007D                  00082 LCD_EscribeLCD
007D   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
007E   0092           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
007F   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
0080   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
0081   0492           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
0082   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0083   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
0084   0094           00091         movwf   LCD_GuardaTRISB
0085   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
0086   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
0087   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
0088   0812           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
0089   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
008A   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
008B   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
008C   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
008D   202E           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
008E   201A           00102         call    Retardo_50micros
008F   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
0090   0814           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
0091   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
0092   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
0093   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
0094                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
0094   3006           00114         movlw   b'00000110'
0095   28A7           00115         goto    LCD_EnviaComando
0096                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
0096   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
0097   28A7           00118         goto    LCD_EnviaComando
0098                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
0098   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
0099   28A7           00121         goto    LCD_EnviaComando
009A                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
009A   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
009B   28A7           00124         goto    LCD_EnviaComando        ; registro W.
009C                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

009C   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
009D   28A7           00127         goto    LCD_EnviaComando        ; registro W.
009E                  00128 LCD_OFF                         ; Pantalla apagada.
009E   3008           00129         movlw   b'00001000'
009F   28A7           00130         goto    LCD_EnviaComando
00A0                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00A0   300E           00132         movlw   b'00001110'
00A1   28A7           00133         goto    LCD_EnviaComando
00A2                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00A2   300C           00135         movlw   b'00001100'
00A3   28A7           00136         goto    LCD_EnviaComando
00A4                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00A4   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
00A5   28A7           00139         goto    LCD_EnviaComando
00A6                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00A6   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
00A7                  00151 LCD_EnviaComando
00A7   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00A8   28AB           00153         goto    LCD_Envia
00A9                  00154 LCD_Caracter
00A9   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00AA   20B0           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00AB                  00157 LCD_Envia
00AB   0093           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00AC   207D           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00AD   0E13           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
00AE   207D           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00AF   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00B0                  00177 LCD_CodigoCGROM
00B0   0092           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B1                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00B1   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00B2   1D03           00181         btfss   STATUS,Z
00B3   28B7           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00B4   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00B5   0092           00184         movwf   LCD_Dato
00B6   28C4           00185         goto    LCD_FinCGROM
00B7                  00186 LCD_EnheMayuscula
00B7   0812           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00B8   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00B9   1D03           00189         btfss   STATUS,Z
00BA   28BE           00190         goto    LCD_Grado               ; No es "Ñ".
00BB   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00BC   0092           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00BD   28C4           00193         goto    LCD_FinCGROM    
00BE                  00194 LCD_Grado
00BE   0812           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00BF   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00C0   1D03           00197         btfss   STATUS,Z
00C1   28C4           00198         goto    LCD_FinCGROM            ; No es "º".
00C2   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00C3   0092           00200         movwf   LCD_Dato
00C4                  00201 LCD_FinCGROM
00C4   0812           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
00C5   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
00C6                  00209 LCD_LineaEnBlanco
00C6   3010           00210         movlw   LCD_CaracteresPorLinea
00C7   28CD           00211         goto    LCD_EnviaBlancos
00C8                  00212 LCD_UnEspacioBlanco
00C8   3001           00213         movlw   .1
00C9   28CD           00214         goto    LCD_EnviaBlancos
00CA                  00215 LCD_DosEspaciosBlancos
00CA   3002           00216         movlw   .2
00CB   28CD           00217         goto    LCD_EnviaBlancos
00CC                  00218 LCD_TresEspaciosBlancos
00CC   3003           00219         movlw   .3
00CD                  00220 LCD_EnviaBlancos
00CD   0095           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00CE                  00222 LCD_EnviaOtroBlanco     
00CE   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
00CF   20A9           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00D0   0B95           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00D1   28CE           00226         goto    LCD_EnviaOtroBlanco
00D2   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
00D3                  00240 LCD_Byte
00D3   0096           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00D4   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
00D5   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
00D6   28DB           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
00D7   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
00D8   20A9           00246         call    LCD_Caracter
00D9   28DD           00247         goto    LCD_VisualizaBajo
                      00248 
00DA                  00249 LCD_ByteCompleto
00DA   0096           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00DB                  00251 LCD_VisualizaAlto
00DB   0E16           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
00DC   20DE           00253         call    LCD_Nibble              ; Lo visualiza.
00DD                  00254 LCD_VisualizaBajo
00DD   0816           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
00DE                  00266 LCD_Nibble
00DE   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
00DF   0095           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
00E0   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
00E1   1C03           00270         btfss   STATUS,C        
00E2   28E6           00271         goto    LCD_EnviaByteLetra
00E3   0815           00272         movf    LCD_Auxiliar1,W
00E4   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00E5   28E8           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00E6                  00275 LCD_EnviaByteLetra
00E6   0815           00276         movf    LCD_Auxiliar1,W
00E7   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
00E8                  00278 LCD_FinVisualizaDigito
00E8   28A9           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00048         END
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE 12


SYMBOL TABLE
  LABEL                             VALUE 

BCD_Centenas                      0000000F
BCD_Decenas                       00000010
BCD_IncrementaCentenas            0000005F
BCD_IncrementaDecenas             00000059
BCD_Resta10                       00000055
BCD_Unidades                      00000011
BIN_BCD_Fin                       00000062
BIN_a_BCD                         00000052
C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000000
LCD_2Lineas4Bits5x7               000000A6
LCD_Auxiliar1                     00000015
LCD_Auxiliar2                     00000016
LCD_Borra                         000000A4
LCD_BusDatos                      PORTB
LCD_Byte                          000000D3
LCD_ByteCompleto                  000000DA
LCD_Caracter                      000000A9
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000B0
LCD_CursorIncr                    00000094
LCD_CursorOFF                     000000A2
LCD_CursorON                      000000A0
LCD_Dato                          00000012
LCD_DosEspaciosBlancos            000000CA
LCD_EnheMayuscula                 000000B7
LCD_EnheMinuscula                 000000B1
LCD_Envia                         000000AB
LCD_EnviaBlancos                  000000CD
LCD_EnviaByteLetra                000000E6
LCD_EnviaComando                  000000A7
LCD_EnviaOtroBlanco               000000CE
LCD_EscribeLCD                    0000007D
LCD_FinCGROM                      000000C4
LCD_FinVisualizaDigito            000000E8
LCD_Grado                         000000BE
LCD_GuardaDato                    00000013
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

LCD_GuardaTRISB                   00000014
LCD_Inicializa                    00000065
LCD_Linea1                        00000096
LCD_Linea2                        00000098
LCD_LineaEnBlanco                 000000C6
LCD_Nibble                        000000DE
LCD_OFF                           0000009E
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                0000009A
LCD_PosicionLinea2                0000009C
LCD_TresEspaciosBlancos           000000CC
LCD_UnEspacioBlanco               000000C8
LCD_VisualizaAlto                 000000DB
LCD_VisualizaBajo                 000000DD
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000006
R1Decima_BucleExterno             00000048
R1Decima_BucleExterno2            00000046
R1Decima_BucleInterno             0000004A
R1ms_BucleExterno                 00000032
R1ms_BucleInterno                 00000034
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           0000000C
R_ContB                           0000000D
R_ContC                           0000000E
RetardoMicros                     0000001E
Retardo_100micros                 00000018
Retardo_100ms                     00000024
Retardo_10micros                  0000000B
Retardo_10ms                      0000002A
Retardo_10s                       0000003C
Retardo_1Decima                   00000045
Retardo_1ms                       00000030
Retardo_1s                        00000042
Retardo_200micros                 00000015
Retardo_200ms                     00000022
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_20micros                  0000001D
Retardo_20ms                      00000028
Retardo_20s                       0000003A
Retardo_2ms                       0000002E
Retardo_2s                        00000040
Retardo_4micros                   00000011
Retardo_500micros                 00000012
Retardo_500ms                     00000044
Retardo_50micros                  0000001A
Retardo_50ms                      00000026
Retardo_5micros                   00000010
Retardo_5ms                       0000002C
Retardo_5s                        0000003E
Retardos_ms                       00000031
Rmicros_Bucle                     0000001F
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM 03.50 Released                        SENSOR_LDR_01.ASM   10-13-2003  11:55:47         PAGE 15


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXX------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   233
Program Memory Words Free:   791


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

