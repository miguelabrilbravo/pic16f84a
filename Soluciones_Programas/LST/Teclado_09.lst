MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************** Teclado_09.asm **********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Cerradura Electrónica: la salida se activa cuando una clave de varios digitos introducida
                      00010 ; por teclado sea correcta.
                      00011 ;
                      00012 ; Tiene una salida (CerraduraSalida) que cuando se habilita, activa durante unos segundos
                      00013 ; el electroimán de la cerradura permitiendo la apertura de la puerta:
                      00014 ;   - Si (CerraduraSalida) = 1, la puerta se puede abrir.
                      00015 ;   - Si (CerraduraSalida) = 0, la puerta no se puede abrir.
                      00016 ;
                      00017 ;Funcionamiento:
                      00018 ; - En pantalla visualiza "Introduzca CLAVE". Según se va escribiendo, visualiza asteriscos '*'.
                      00019 ; - Cuando termine de escribir la clave pueden darse dos posibilidades:
                      00020 ;     - Si la clave es incorrecta, la cerradura sigue inactivada, en pantalla aparece el mensaje
                      00021 ;       "Clave INCORRECTA" durante unos segundos y tiene que repetir de nuevo el proceso.
                      00022 ;     - Si la clave es correcta, la cerradura se activa durante unos segundos y la puerta
                      00023 ;       puede ser abierta. En pantalla aparece: "Clave CORRECTA" (primera línea) y "Abra
                      00024 ;       la puerta" (segunda línea). Pasado unos segundos, se repite el proceso.
                      00025 ;
                      00026 ; ZONA DE DATOS **********************************************************************
                      00027 
2007   3FF1           00028         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00029         LIST       P=16F84A
                      00030         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00031 
                      00032         CBLOCK  0x0C
                      00033         ENDC
                      00034 
                      00035 ; La clave puede tener cualquier tamaño y su longitud se calcula:
                      00036 
                      00037 #DEFINE  LongitudClave  (FinClaveSecreta-ClaveSecreta)
                      00038 #DEFINE  CerraduraSalida        PORTA,3
                      00039 
                      00040 ; ZONA DE CÓDIGOS ********************************************************************
                      00041 
0000                  00042         ORG     0
0000   284A           00043         goto    Inicio
0004                  00044         ORG     4
0004   2854           00045         goto    ServicioInterrupcion
                      00046 
0005                  00047 Mensajes
0005   0782           00048         addwf   PCL,F
0006                  00049 MensajeTeclee
0006   3454 3465 3463 00050         DT      "Teclee CLAVE:", 0x00
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       346C 3465 3465 
       3420 3443 344C 
       3441 3456 3445 
       343A 3400 
0014                  00051 MensajeClaveCorrecta
0014   3443 346C 3461 00052         DT      "Clave CORRECTA", 0x00
       3476 3465 3420 
       3443 344F 3452 
       3452 3445 3443 
       3454 3441 3400 
0023                  00053 MensajeAbraPuerta
0023   3441 3462 3472 00054         DT      "Abra la puerta", 0x00
       3461 3420 346C 
       3461 3420 3470 
       3475 3465 3472 
       3474 3461 3400 
0032                  00055 MensajeClaveIncorrecta
0032   3443 346C 3461 00056         DT      "Clave INCORRECTA", 0x00
       3476 3465 3420 
       3449 344E 3443 
       344F 3452 3452 
       3445 3443 3454 
       3441 3400 
                      00057 ;
0043                  00058 LeeClaveSecreta
0043   0782           00059         addwf   PCL,F
0044                  00060 ClaveSecreta
0044   3404 3405 3406 00061         DT      4h,5h,6h,0Eh            ; Ejemplo de clave secreta.
       340E 
0048   3407 3408      00062         DT      7h,8h
004A                  00063 FinClaveSecreta
                      00064 
004A   20C4           00065 Inicio  call    LCD_Inicializa
004B   1683           00066         bsf     STATUS,RP0
004C   1185           00067         bcf     CerraduraSalida         ; Define como salida.
004D   1283           00068         bcf     STATUS,RP0
004E   209C           00069         call    Teclado_Inicializa      ; Configura las líneas del teclado.
004F   207A           00070         call    InicializaTodo          ; Inicializa el resto de los registros.
0050   3088           00071         movlw   b'10001000'             ; Habilita la interrupción RBI y la general.
0051   008B           00072         movwf   INTCON
0052                  00073 Principal
0052   0063           00074         sleep                           ; Espera en modo bajo consumo que pulse alguna tecla.
0053   2852           00075         goto    Principal
                      00076 
                      00077 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
                      00078 ;
                      00079         CBLOCK
  0000000C            00080         ContadorCaracteres
  0000000D            00081         GuardaClaveTecleada
                      00082         ENDC
                      00083 
0054                  00084 ServicioInterrupcion
0054   2085           00085         call    Teclado_LeeHex          ; Obtiene el valor hexadecimal de la tecla pulsada.
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086 ;
                      00087 ; Según va introduciendo los dígitos de la clave, estos van siendo almacenados a partir de
                      00088 ; las posiciones RAM "ClaveTecleada" mediante direccionamiento indirecto y utilizando el 
                      00089 ; FSR como apuntador. Por cada dígito leído, en pantalla se visualiza un asterisco.
                      00090 ;
0055   0080           00091         movwf   INDF                    ; Almacena ese dígito en memoria RAM con
                      00092                                         ; con direccionamiento indirecto apuntado por FSR
0056   302A           00093         movlw   '*'                     ; Visualiza asterisco.
0057   2108           00094         call    LCD_Caracter
0058   0A84           00095         incf    FSR,F                   ; Apunta a la próxima posición de RAM.
0059   0A8C           00096         incf    ContadorCaracteres,F    ; Cuenta el número de teclas pulsadas.
005A   3006           00097         movlw   LongitudClave           ; Comprueba si ha introducido tantos caracteres
005B   020C           00098         subwf   ContadorCaracteres,W    ; como longitud tiene la clave secreta.
005C   1C03           00099         btfss   STATUS,C                ; ¿Ha terminado de introducir caracteres?
005D   2882           00100         goto    FinInterrupcion         ; No, pues lee el siguiente carácter tecleado.
                      00101 ;
                      00102 ; Si ha llegado aquí es porque ha terminado de introducir el máximo de dígitos. Ahora
                      00103 ; procede a comprobar si la clave es correcta. Para ello va comparando cada uno de los
                      00104 ; dígitos almacenados en las posiciones RAM a partir de "ClaveTecleada" con el valor
                      00105 ; correcto de la clave almacenado en la posición ROM "ClaveSecreta".
                      00106 ;
                      00107 ; Para acceder a las posiciones de memoria RAM a partir de "ClaveTecleada", utiliza
                      00108 ; direccionamiento indirecto siendo FSR el apuntador.
                      00109 ;
                      00110 ; Para acceder a memoria ROM "ClaveSecreta" se utiliza direccionamiento indexado con el
                      00111 ; el registro ContadorCaracteres como apuntador.
                      00112 ;
005E   2103           00113         call    LCD_Borra               ; Borra la pantalla.
005F   018C           00114         clrf    ContadorCaracteres              ; Va a leer el primer carácter almacenado en ROM.
0060   301A           00115         movlw   ClaveTecleada           ; Apunta a la primera posición de RAM donde se ha
0061   0084           00116         movwf   FSR                     ; guardado la clave tecleada.
0062                  00117 ComparaClaves
0062   0800           00118         movf    INDF,W                  ; Lee la clave tecleada y guardada en RAM.
0063   008D           00119         movwf   GuardaClaveTecleada     ; La guarda para compararla después.
0064   080C           00120         movf    ContadorCaracteres,W    ; Apunta al carácter de ROM a leer.
0065   2043           00121         call    LeeClaveSecreta         ; En (W) el carácter de la clave secreta.
0066   020D           00122         subwf   GuardaClaveTecleada,W   ; Se comparan.
0067   1D03           00123         btfss   STATUS,Z                ; ¿Son iguales?, ¿Z=1?
0068   2876           00124         goto    ClaveIncorrecta         ; No, pues la clave tecleada es incorrecta.
0069   0A84           00125         incf    FSR,F                   ; Apunta a la próxima posición de RAM.
006A   0A8C           00126         incf    ContadorCaracteres,F    ; Apunta a la próxima posición de ROM.
006B   3006           00127         movlw   LongitudClave           ; Comprueba si ha comparado tantos caracteres
006C   020C           00128         subwf   ContadorCaracteres,W    ; como longitud tiene la clave secreta.
006D   1C03           00129         btfss   STATUS,C                ; ¿Ha terminado de comparar caracteres?
006E   2862           00130         goto    ComparaClaves           ; No, pues compara el siguiente carácter.
006F                  00131 ClaveCorrecta                           ; La clave ha sido correcta. Aparecen los mensajes
006F   3014           00132         movlw   MensajeClaveCorrecta    ; correspondientes y permite la apertura de la
0070   2148           00133         call    LCD_Mensaje             ; puerta durante unos segundos.
0071   20F7           00134         call    LCD_Linea2
0072   3023           00135         movlw   MensajeAbraPuerta
0073   2148           00136         call    LCD_Mensaje
0074   1585           00137         bsf     CerraduraSalida         ; Activa la cerradura durante unos segundos.
0075   2878           00138         goto    Retardo
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0076                  00139 ClaveIncorrecta
0076   3032           00140         movlw   MensajeClaveIncorrecta
0077   2148           00141         call    LCD_Mensaje
0078                  00142 Retardo
0078   21A5           00143         call    Retardo_2s
0079   21A7           00144         call    Retardo_1s
007A                  00145 InicializaTodo
007A   1185           00146         bcf     CerraduraSalida         ; Desactiva la cerradura.
007B   018C           00147         clrf    ContadorCaracteres              ; Inicializa este contador.
007C   301A           00148         movlw   ClaveTecleada           ; FSR apunta a la primera dirección de la RAM
007D   0084           00149         movwf   FSR                     ; donde se va a almacenar la clave tecleada.
007E   2103           00150         call    LCD_Borra               ; Borra la pantalla.
007F   3006           00151         movlw   MensajeTeclee           ; Aparece el mensaje para que introduzca la clave. 
0080   2148           00152         call    LCD_Mensaje
0081   20F7           00153         call    LCD_Linea2              ; Los asteriscos se visualizan en la segunda línea.
0082                  00154 FinInterrupcion
0082   20A1           00155         call    Teclado_EsperaDejePulsar
0083   100B           00156         bcf     INTCON,RBIF
0084   0009           00157         retfie  
                      00158 
                      00159         INCLUDE  <TECLADO.INC>
                      00001 ;**************************** Librería "TECLADO.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para la gestión de un teclado organizado en una matriz de 4 x 4 y 
                      00010 ; conectado al Puerto B según la disposición siguiente:
                      00011 ;
                      00012 ;                RB4 RB5 RB6 RB7
                      00013 ;                  ^    ^    ^    ^
                      00014 ;               |----|----|----|----|
                      00015 ;       RB0 --> |  0 |  1 |  2 |  3 |
                      00016 ;               |----|----|----|----|
                      00017 ;       RB1 --> |  4 |  5 |  6 |  7 |
                      00018 ;               |----|----|----|----|
                      00019 ;       RB2 --> |  8 |  9 | 10| 11|
                      00020 ;               |----|----|----|----|
                      00021 ;       RB3 --> | 12| 13| 14| 15|
                      00022 ;               |----|----|----|----|
                      00023 ;
                      00024 ; Los números que se han dibujado dentro de cada cuadrado es el número de orden de las teclas
                      00025 ; que no tiene por qué coincidir con lo serigrafiado sobre ellas. El paso del número de orden
                      00026 ; de la tecla al valor que hay serigrafiado sobre la misma, se hace con una tabla de conversión.
                      00027 ;
                      00028 ; ZONA DE DATOS **********************************************************************
                      00029 ;
                      00030         CBLOCK
  0000000E            00031         Tecl_TeclaOrden                 ; Orden de la tecla a chequear.
                      00032         ENDC
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00033 
  0000000F            00034 Tecl_UltimaTecla        EQU     d'15'           ; Valor de orden de la última tecla utilizada.
                      00035 
                      00036 ; Subrutina "Teclado_LeeHex" ************************************************************
                      00037 ;
                      00038 ; Cada tecla tiene asignado un número de orden que es contabilizado en la variable
                      00039 ; Tecl_TeclaOrden. Para convertir a su valor según el tipo de teclado en concreto, se
                      00040 ; utiliza una tabla de conversión. 
                      00041 ; A continuación, se expone la relación entre el número de orden de la tecla y los
                      00042 ; valores correspondientes para el teclado hexadecimal más utilizado.
                      00043 ;
                      00044 ;           ORDEN DE TECLA:             TECLADO HEX. UTILIZADO:
                      00045 ;                0   1   2   3                  1  2  3  F
                      00046 ;                4   5   6   7                  4  5  6  E
                      00047 ;                8   9  10  11                  7  8  9  D
                      00048 ;               12  13  14  15                  A  0  B  C
                      00049 ;
                      00050 ; Así, en este ejemplo, la tecla "7" ocupa el orden 8, la tecla "F" ocupa el orden 3 y la
                      00051 ; tecla "9" el orden 10.
                      00052 
                      00053 ; Si cambia el teclado, también hay cambiar de tabla de conversión.
                      00054 ;
                      00055 ; Entrada:      En (W) el orden de la tecla pulsada.
                      00056 ; Salida:       En (W) el valor hexadecimal para este teclado concreto.
                      00057 ;
0085                  00058 Teclado_LeeHex
0085   20A9           00059         call    Teclado_LeeOrdenTecla   ; Lee el Orden de la tecla pulsada
0086   1C03           00060         btfss   STATUS,C                ; ¿Pulsa alguna tecla?, ¿C=1?
0087   288A           00061         goto    Tecl_FinLeeHex          ; No, por tanto sale.
0088   208B           00062         call    Tecl_ConvierteOrdenEnHex        ; Lo convierte en su valor real mediante tabla.
0089   1403           00063         bsf     STATUS,C                ; Vuelve a posicionar el Carry, porque la
008A                  00064 Tecl_FinLeeHex                          ; instrucción "addwf PCL,F" lo pone a 0.
008A   0008           00065         return
                      00066 ;
008B                  00067 Tecl_ConvierteOrdenEnHex                        ; Según el teclado utilizado resulta:
008B   0782           00068         addwf   PCL,F
008C   3401 3402 3403 00069         DT      1h,2h,3h,0Fh            ; Primera fila del teclado.
       340F 
0090   3404 3405 3406 00070         DT      4h,5h,6h,0Eh            ; Segunda fila del teclado
       340E 
0094   3407 3408 3409 00071         DT      7h,8h,9h,0Dh            ; Tercera fila del teclado.
       340D 
0098   340A 3400 340B 00072         DT      0Ah,0h,0Bh,0Ch          ; Cuarta fila del teclado.
       340C 
009C                  00073 Teclado_FinTablaHex
                      00074 ;
                      00075 ; Esta tabla se sitúa al principio de la librería con el propósito que no supere la
                      00076 ; posición 0FFh de memoria ROM de programa. De todas formas, en caso que así fuera 
                      00077 ; visualizaría el siguiente mensaje de error en el proceso de ensamblado:
                      00078 ;
                      00079         IF (Teclado_FinTablaHex > 0xFF)
                      00080                 ERROR   "Atención: La tabla ha superado el tamaño de la página de los"
                      00081                 MESSG   "primeros 256 bytes de memoria ROM. NO funcionará correctamente."
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00082         ENDIF
                      00083         
                      00084 ; Subrutina "Teclado_Inicializa" --------------------------------------------------------
                      00085 ;
                      00086 ; Esta subrutina configura las líneas del Puerto B según la conexión del teclado realizada
                      00087 ; y comprueba que no hay pulsada tecla alguna al principio.
                      00088 
009C                  00089 Teclado_Inicializa
009C   1683           00090         bsf     STATUS,RP0              ; Configura las líneas del puerto:
009D   30F0           00091         movlw   b'11110000'             ; <RB7:RB4> entradas, <RB3:RB0> salidas
009E   0086           00092         movwf   PORTB
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
009F   1381           00093         bcf     OPTION_REG,NOT_RBPU     ; Habilita resistencia de Pull-Up del Puerto B.
00A0   1283           00094         bcf     STATUS,RP0              ; Acceso al banco 0.
                      00095 ;       call    Teclado_EsperaDejePulsar
                      00096 ;       return
                      00097 ;
                      00098 ; Subrutina "Teclado_EsperaDejePulsar" --------------------------------------------------
                      00099 ;
                      00100 ;Permanece en esta subrutina mientras siga pulsada la tecla.
                      00101 ;
  000000F0            00102 Teclado_Comprobacion    EQU     b'11110000'
                      00103 
00A1                  00104 Teclado_EsperaDejePulsar:
00A1   30F0           00105         movlw   Teclado_Comprobacion    ; Pone a cero las cuatro líneas de salida del 
00A2   0086           00106         movwf   PORTB                   ; Puerto B.
00A3                  00107 Teclado_SigueEsperando
00A3   218D           00108         call    Retardo_20ms            ; Espera a que se estabilicen los niveles de tensión.
00A4   0806           00109         movf    PORTB,W         ; Lee el Puerto B.
00A5   3CF0           00110         sublw   Teclado_Comprobacion    ; Si es lo mismo que escribió es que ya no pulsa 
00A6   1D03           00111         btfss   STATUS,Z                ; tecla alguna.
00A7   28A3           00112         goto    Teclado_SigueEsperando
00A8   0008           00113         return
                      00114 ;
                      00115 ; Subrutina "Teclado_LeeOrdenTecla" -----------------------------------------------------
                      00116 ;
                      00117 ; Lee el teclado, obteniendo el orden de la tecla pulsada. 
                      00118 ;
                      00119 ; Salida:       En (W) el número de orden de la tecla pulsada. Además Carry se pone a "1" si
                      00120 ;               se pulsa una tecla ó a "0" si no se pulsa tecla alguna.
                      00121 ;
00A9                  00122 Teclado_LeeOrdenTecla:
00A9   018E           00123         clrf    Tecl_TeclaOrden         ; Todavía no ha empezado a chequear el teclado.
00AA   30FE           00124         movlw   b'11111110'             ; Va a chequear primera fila.
00AB                  00125 Tecl_ChequeaFila                                ; (Ver esquema de conexión).
00AB   0086           00126         movwf   PORTB                   ; Activa la fila correspondiente.
00AC                  00127 Tecl_Columna1
00AC   1E06           00128         btfss   PORTB,4                 ; Chequea 1ª columna buscando un cero. 
00AD   28C1           00129         goto    Tecl_GuardaValor                ; Sí, es cero y por tanto guarda su valor y sale.
00AE   0A8E           00130         incf    Tecl_TeclaOrden,F               ; Va a chequear la siguiente tecla.
00AF                  00131 Tecl_Columna2                           ; Repite proceso para las siguientes 
00AF   1E86           00132         btfss   PORTB,5                 ; columnas.
00B0   28C1           00133         goto    Tecl_GuardaValor
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B1   0A8E           00134         incf    Tecl_TeclaOrden,F
00B2                  00135 Tecl_Columna3           
00B2   1F06           00136         btfss   PORTB,6
00B3   28C1           00137         goto    Tecl_GuardaValor
00B4   0A8E           00138         incf    Tecl_TeclaOrden,F
00B5                  00139 Tecl_Columna4           
00B5   1F86           00140         btfss   PORTB,7
00B6   28C1           00141         goto    Tecl_GuardaValor
00B7   0A8E           00142         incf    Tecl_TeclaOrden,F
                      00143 ;
                      00144 ; Comprueba si ha chequeado la última tecla, en cuyo caso sale. Para ello testea si
                      00145 ; el contenido del registro Tecl_TeclaOrden es igual al número de teclas del teclado.
                      00146 ;
00B8                  00147 Tecl_TerminaColumnas
00B8   300F           00148         movlw   Tecl_UltimaTecla
00B9   020E           00149         subwf   Tecl_TeclaOrden,W               ; (W) = (Tecl_TeclaOrden)-Tecl_UltimaTecla.
00BA   1803           00150         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Tecl_TeclaOrden)<15?.
00BB   28BF           00151         goto    Tecl_NoPulsada          ; No, se ha llegado al final del chequeo.
00BC   1403           00152         bsf     STATUS,C                ; Sí. Va a chequear la siguiente fila.
00BD   0D06           00153         rlf     PORTB,W         ; Apunta a la siguiente fila.
00BE   28AB           00154         goto    Tecl_ChequeaFila        
00BF                  00155 Tecl_NoPulsada
00BF   1003           00156         bcf     STATUS,C                ; Posiciona C=0, indicando que no ha pulsado
00C0   28C3           00157         goto    Tecl_FinTecladoLee      ; tecla alguna y sale.
00C1                  00158 Tecl_GuardaValor
00C1   080E           00159         movf    Tecl_TeclaOrden,W               ; El orden de la tecla pulsada en (W) y sale.
00C2   1403           00160         bsf     STATUS,C                ; Como hay tecla tecla pulsada, pone C=1. 
00C3                  00161 Tecl_FinTecladoLee
00C3   0008           00162         return
                      00163         
                      00164 ;       ===================================================================
                      00165 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00166 ;         E. Palacios, F. Remiro y L. López.
                      00167 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00168 ;       ===================================================================
                      00160         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  0000000F            00025         LCD_Dato
  00000010            00026         LCD_GuardaDato
  00000011            00027         LCD_GuardaTRISB
  00000012            00028         LCD_Auxiliar1
  00000013            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
00C4                  00045 LCD_Inicializa
00C4   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
00C5   1005           00047         bcf     LCD_PinRS               ; R/W y E.
00C6   1105           00048         bcf     LCD_PinEnable
00C7   1085           00049         bcf     LCD_PinRW
00C8   1283           00050         bcf     STATUS,RP0
00C9   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
00CA   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
00CB   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00CC   218D           00055         call    Retardo_20ms
00CD   3030           00056         movlw   b'00110000'     
00CE   20DC           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
00CF   2191           00058         call    Retardo_5ms     
00D0   3030           00059         movlw   b'00110000'     
00D1   20DC           00060         call    LCD_EscribeLCD
00D2   217A           00061         call    Retardo_200micros
00D3   3030           00062         movlw   b'00110000'     
00D4   20DC           00063         call    LCD_EscribeLCD
00D5   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00D6   20DC           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
00D7   2105           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
00D8   2103           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D9   2101           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00DA   20F3           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00DB   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00DC                  00082 LCD_EscribeLCD
00DC   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00DD   008F           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00DE   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00DF   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00E0   048F           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00E1   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00E2   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00E3   0091           00091         movwf   LCD_GuardaTRISB
00E4   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00E5   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00E6   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00E7   080F           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00E8   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00E9   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00EA   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00EB   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00EC   2193           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00ED   217F           00102         call    Retardo_50micros
00EE   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00EF   0811           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00F0   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00F1   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00F2   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00F3                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00F3   3006           00114         movlw   b'00000110'
00F4   2906           00115         goto    LCD_EnviaComando
00F5                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00F5   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00F6   2906           00118         goto    LCD_EnviaComando
00F7                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00F7   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00F8   2906           00121         goto    LCD_EnviaComando
00F9                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F9   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00FA   2906           00124         goto    LCD_EnviaComando        ; registro W.
00FB                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00FB   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00FC   2906           00127         goto    LCD_EnviaComando        ; registro W.
00FD                  00128 LCD_OFF                         ; Pantalla apagada.
00FD   3008           00129         movlw   b'00001000'
00FE   2906           00130         goto    LCD_EnviaComando
00FF                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00FF   300E           00132         movlw   b'00001110'
0100   2906           00133         goto    LCD_EnviaComando
0101                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
0101   300C           00135         movlw   b'00001100'
0102   2906           00136         goto    LCD_EnviaComando
0103                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
0103   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
0104   2906           00139         goto    LCD_EnviaComando
0105                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
0105   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
0106                  00151 LCD_EnviaComando
0106   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0107   290A           00153         goto    LCD_Envia
0108                  00154 LCD_Caracter
0108   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
0109   210F           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
010A                  00157 LCD_Envia
010A   0090           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
010B   20DC           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
010C   0E10           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
010D   20DC           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
010E   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00176 
010F                  00177 LCD_CodigoCGROM
010F   008F           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
0110                  00179 LCD_EnheMinuscula                       ; un carácter especial.
0110   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
0111   1D03           00181         btfss   STATUS,Z
0112   2916           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
0113   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
0114   008F           00184         movwf   LCD_Dato
0115   2923           00185         goto    LCD_FinCGROM
0116                  00186 LCD_EnheMayuscula
0116   080F           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0117   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
0118   1D03           00189         btfss   STATUS,Z
0119   291D           00190         goto    LCD_Grado               ; No es "Ñ".
011A   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
011B   008F           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
011C   2923           00193         goto    LCD_FinCGROM    
011D                  00194 LCD_Grado
011D   080F           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
011E   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
011F   1D03           00197         btfss   STATUS,Z
0120   2923           00198         goto    LCD_FinCGROM            ; No es "º".
0121   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
0122   008F           00200         movwf   LCD_Dato
0123                  00201 LCD_FinCGROM
0123   080F           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
0124   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
0125                  00209 LCD_LineaEnBlanco
0125   3010           00210         movlw   LCD_CaracteresPorLinea
0126   292C           00211         goto    LCD_EnviaBlancos
0127                  00212 LCD_UnEspacioBlanco
0127   3001           00213         movlw   .1
0128   292C           00214         goto    LCD_EnviaBlancos
0129                  00215 LCD_DosEspaciosBlancos
0129   3002           00216         movlw   .2
012A   292C           00217         goto    LCD_EnviaBlancos
012B                  00218 LCD_TresEspaciosBlancos
012B   3003           00219         movlw   .3
012C                  00220 LCD_EnviaBlancos
012C   0092           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
012D                  00222 LCD_EnviaOtroBlanco     
012D   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
012E   2108           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
012F   0B92           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
0130   292D           00226         goto    LCD_EnviaOtroBlanco
0131   0008           00227         return
                      00228 
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
0132                  00240 LCD_Byte
0132   0093           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0133   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
0134   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0135   293A           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0136   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0137   2108           00246         call    LCD_Caracter
0138   293C           00247         goto    LCD_VisualizaBajo
                      00248 
0139                  00249 LCD_ByteCompleto
0139   0093           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
013A                  00251 LCD_VisualizaAlto
013A   0E13           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
013B   213D           00253         call    LCD_Nibble              ; Lo visualiza.
013C                  00254 LCD_VisualizaBajo
013C   0813           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
013D                  00266 LCD_Nibble
013D   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
013E   0092           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
013F   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
0140   1C03           00270         btfss   STATUS,C        
0141   2945           00271         goto    LCD_EnviaByteLetra
0142   0812           00272         movf    LCD_Auxiliar1,W
0143   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
0144   2947           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0145                  00275 LCD_EnviaByteLetra
0145   0812           00276         movf    LCD_Auxiliar1,W
0146   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0147                  00278 LCD_FinVisualizaDigito
0147   2908           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00161         INCLUDE  <LCD_MENS.INC>
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  00000014            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  00000015            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
0148                  00042 LCD_Mensaje
0148   0094           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
0149   3005           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
014A   0294           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
014B   0394           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
014C                  00047 LCD_VisualizaOtroCaracter
014C   0814           00048         movf    LCD_ApuntaCaracter,W
014D   2005           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
014E   0095           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
014F   0895           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0150   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0151   2955           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0152                  00054 LCD_NoUltimoCaracter
0152   2108           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0153   0A94           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
0154   294C           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
0155                  00058 LCD_FinMensaje
0155   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  00000016            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
0156                  00073 LCD_MensajeMovimiento
0156   0094           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0157   3005           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0158   0294           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
0159   0394           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
015A                  00078 LCD_PrimeraPosicion
015A   0196           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
015B   2103           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
015C                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
015C   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
015D   0216           00083         subwf   LCD_CursorPosicion,W
015E   1D03           00084         btfss   STATUS,Z
015F   2965           00085         goto    LCD_NoEsFinalLinea
0160                  00086 LCD_EsFinalLinea
0160   2187           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
0161   2187           00088         call    Retardo_200ms
0162   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
0163   0294           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
0164   295A           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
0165                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
0165   0814           00093         movf    LCD_ApuntaCaracter,W
0166   2005           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0167   0095           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0168   0895           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0169   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
016A   296F           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
016B                  00099 LCD_NoUltimoCaracter2
016B   2108           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
016C   0A96           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
016D   0A94           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
016E   295C           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
016F                  00105 LCD_FinMovimiento                       ; de la línea.
016F   0008           00106         return                          ; Vuelve al programa principal.
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00162         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000017            00021         R_ContA                         ; Contadores para los retardos.
  00000018            00022         R_ContB
  00000019            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0170                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0170   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0171   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0172   0000           00035         nop                             ; Aporta 1 ciclo máquina.
0173   0000           00036         nop                             ; Aporta 1 ciclo máquina.
0174   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0175                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0175   0000           00039         nop                             ; Aporta 1 ciclo máquina.
0176                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
0176   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
0177                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
0177   0000           00046         nop                             ; Aporta 1 ciclo máquina.
0178   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
0179   2983           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
017A                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
017A   0000           00050         nop                             ; Aporta 1 ciclo máquina.
017B   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
017C   2983           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

017D                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
017D   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
017E   2983           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
017F                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
017F   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0180   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0181   2983           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0182                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
0182   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0183                  00066 RetardoMicros
0183   0097           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
0184                  00068 Rmicros_Bucle
0184   0B97           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0185   2984           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
0186   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
0187                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
0187   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0188   2996           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0189                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
0189   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
018A   2996           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
018B                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
018B   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
018C   2996           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
018D                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
018D   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
018E   2996           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
018F                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
018F   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0190   2996           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0191                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0191   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0192   2996           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0193                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0193   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0194   2996           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0195                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0195   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
0196                  00111 Retardos_ms
0196   0098           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
0197                  00113 R1ms_BucleExterno
0197   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
0198   0097           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
0199                  00116 R1ms_BucleInterno
0199   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
019A   0B97           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
019B   2999           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
019C   0B98           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
019D   2997           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
019E   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
019F                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
019F   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
01A0   29AA           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01A1                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
01A1   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
01A2   29AA           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01A3                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
01A3   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
01A4   29AA           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01A5                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
01A5   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
01A6   29AA           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01A7                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
01A7   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
01A8   29AA           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01A9                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
01A9   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00159 ;
01AA                  00160 Retardo_1Decima
01AA   0099           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
01AB                  00162 R1Decima_BucleExterno2
01AB   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
01AC   0098           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
01AD                  00165 R1Decima_BucleExterno
01AD   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
01AE   0097           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
01AF                  00168 R1Decima_BucleInterno          
01AF   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
01B0   0B97           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
01B1   29AF           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
01B2   0B98           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
01B3   29AD           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
01B4   0B99           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
01B5   29AB           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
01B6   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00163 
                      00164 ; Las posiciones de memoria RAM donde se guardará la clave leída se definen al final después
                      00165 ; de los "Includes", ya que van a ocupar varias posiciones de memoria mediante el 
                      00166 ; direccionamiento indirecto utilizado.
                      00167 
                      00168         CBLOCK
  0000001A            00169         ClaveTecleada
                      00170         ENDC
                      00171 
                      00172         END                             ; Fin del programa.
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 19


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
CerraduraSalida                   PORTA,3
ClaveCorrecta                     0000006F
ClaveIncorrecta                   00000076
ClaveSecreta                      00000044
ClaveTecleada                     0000001A
ComparaClaves                     00000062
ContadorCaracteres                0000000C
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
FinClaveSecreta                   0000004A
FinInterrupcion                   00000082
GIE                               00000007
GuardaClaveTecleada               0000000D
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
InicializaTodo                    0000007A
Inicio                            0000004A
LCD_2Lineas4Bits5x7               00000105
LCD_ApuntaCaracter                00000014
LCD_Auxiliar1                     00000012
LCD_Auxiliar2                     00000013
LCD_Borra                         00000103
LCD_BusDatos                      PORTB
LCD_Byte                          00000132
LCD_ByteCompleto                  00000139
LCD_Caracter                      00000108
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   0000010F
LCD_CursorIncr                    000000F3
LCD_CursorOFF                     00000101
LCD_CursorON                      000000FF
LCD_CursorPosicion                00000016
LCD_Dato                          0000000F
LCD_DosEspaciosBlancos            00000129
LCD_EnheMayuscula                 00000116
LCD_EnheMinuscula                 00000110
LCD_Envia                         0000010A
LCD_EnviaBlancos                  0000012C
LCD_EnviaByteLetra                00000145
LCD_EnviaComando                  00000106
LCD_EnviaOtroBlanco               0000012D
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 20


SYMBOL TABLE
  LABEL                             VALUE 

LCD_EsFinalLinea                  00000160
LCD_EscribeLCD                    000000DC
LCD_FinCGROM                      00000123
LCD_FinMensaje                    00000155
LCD_FinMovimiento                 0000016F
LCD_FinVisualizaDigito            00000147
LCD_Grado                         0000011D
LCD_GuardaDato                    00000010
LCD_GuardaTRISB                   00000011
LCD_Inicializa                    000000C4
LCD_Linea1                        000000F5
LCD_Linea2                        000000F7
LCD_LineaEnBlanco                 00000125
LCD_Mensaje                       00000148
LCD_MensajeMovimiento             00000156
LCD_Nibble                        0000013D
LCD_NoEsFinalLinea                00000165
LCD_NoUltimoCaracter              00000152
LCD_NoUltimoCaracter2             0000016B
LCD_OFF                           000000FD
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000F9
LCD_PosicionLinea2                000000FB
LCD_PrimeraPosicion               0000015A
LCD_TresEspaciosBlancos           0000012B
LCD_UnEspacioBlanco               00000127
LCD_ValorCaracter                 00000015
LCD_VisualizaAlto                 0000013A
LCD_VisualizaBajo                 0000013C
LCD_VisualizaCaracter             0000015C
LCD_VisualizaOtroCaracter         0000014C
LeeClaveSecreta                   00000043
LongitudClave                     (FinClaveSecreta-ClaveSecreta)
MensajeAbraPuerta                 00000023
MensajeClaveCorrecta              00000014
MensajeClaveIncorrecta            00000032
MensajeTeclee                     00000006
Mensajes                          00000005
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000052
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 21


SYMBOL TABLE
  LABEL                             VALUE 

R1Decima_BucleExterno             000001AD
R1Decima_BucleExterno2            000001AB
R1Decima_BucleInterno             000001AF
R1ms_BucleExterno                 00000197
R1ms_BucleInterno                 00000199
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000017
R_ContB                           00000018
R_ContC                           00000019
Retardo                           00000078
RetardoMicros                     00000183
Retardo_100micros                 0000017D
Retardo_100ms                     00000189
Retardo_10micros                  00000170
Retardo_10ms                      0000018F
Retardo_10s                       000001A1
Retardo_1Decima                   000001AA
Retardo_1ms                       00000195
Retardo_1s                        000001A7
Retardo_200micros                 0000017A
Retardo_200ms                     00000187
Retardo_20micros                  00000182
Retardo_20ms                      0000018D
Retardo_20s                       0000019F
Retardo_2ms                       00000193
Retardo_2s                        000001A5
Retardo_4micros                   00000176
Retardo_500micros                 00000177
Retardo_500ms                     000001A9
Retardo_50micros                  0000017F
Retardo_50ms                      0000018B
Retardo_5micros                   00000175
Retardo_5ms                       00000191
Retardo_5s                        000001A3
Retardos_ms                       00000196
Rmicros_Bucle                     00000184
STATUS                            00000003
ServicioInterrupcion              00000054
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
Tecl_ChequeaFila                  000000AB
Tecl_Columna1                     000000AC
Tecl_Columna2                     000000AF
Tecl_Columna3                     000000B2
MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 22


SYMBOL TABLE
  LABEL                             VALUE 

Tecl_Columna4                     000000B5
Tecl_ConvierteOrdenEnHex          0000008B
Tecl_FinLeeHex                    0000008A
Tecl_FinTecladoLee                000000C3
Tecl_GuardaValor                  000000C1
Tecl_NoPulsada                    000000BF
Tecl_TeclaOrden                   0000000E
Tecl_TerminaColumnas              000000B8
Tecl_UltimaTecla                  0000000F
Teclado_Comprobacion              000000F0
Teclado_EsperaDejePulsar          000000A1
Teclado_FinTablaHex               0000009C
Teclado_Inicializa                0000009C
Teclado_LeeHex                    00000085
Teclado_LeeOrdenTecla             000000A9
Teclado_SigueEsperando            000000A3
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXX---------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   436
Program Memory Words Free:   588


MPASM 03.50 Released                           TECLADO_09.ASM   10-11-2003  18:01:06         PAGE 23





Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

