MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*********************************** Macro_01.asm *************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Se conectará un pulsador al pin RA4 y mientras se mantenga pulsado se incrementarán dos
                      00010 ; contadores distintos que se visualizarán en la pantalla del modulo LCD:
                      00011 ;   - El Contador1 se visualiza en la línea 1 y cuenta de 3 a 16.
                      00012 ;   - El Contador2 se visualiza en la linea 2 y cuenta de 7 a 21.
                      00013 ;
                      00014 ; ZONA DE DATOS **********************************************************************
                      00015 
2007   3FF1           00016         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00017         LIST       P=16F84A
                      00018         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00019 
                      00020         CBLOCK  0x0C
  0000000C            00021         Contador1
  0000000D            00022         Contador2
                      00023         ENDC
                      00024 
  00000003            00025 Minimo1 EQU     .3
  00000010            00026 Maximo1 EQU     .16
  00000007            00027 Minimo2 EQU     .7
  00000015            00028 Maximo2 EQU     .21
                      00029 
                      00030 #DEFINE  Pulsador       PORTA,4                 ; Línea donde se conecta el pulsador.
                      00031 
                      00032 ; ZONA DE CÓDIGOS ********************************************************************
                      00033 
0000                  00034         ORG     0
0000                  00035 Inicio
0000   207E           00036         call    LCD_Inicializa
0001   1683           00037         bsf     STATUS,RP0              ; Acceso al Banco 1.
0002   1605           00038         bsf     Pulsador                        ; Línea del pulsador configurada como entrada.
0003   1283           00039         bcf     STATUS,RP0              ; Acceso al Banco 0.
0004   3003           00040         movlw   Minimo1                 ; Inicializa los contadores
0005   008C           00041         movwf   Contador1
0006   3007           00042         movlw   Minimo2
0007   008D           00043         movwf   Contador2
0008   201A           00044         call    VisualizaContadores
0009                  00045 Principal
0009   1E05           00046         btfss   Pulsador                        ; Lee el pulsador.
000A   200C           00047         call    IncrementaVisualiza             ; Salta a incrementar y visualizar el contador.
000B   2809           00048         goto    Principal
                      00049 ;
                      00050 ; Subrutina "IncrementaVisualiza" -------------------------------------------------------
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051 ;
                      00052 ; Subrutina que incrementa el contador y lo visualiza.
                      00053 ;
000C                  00054 IncrementaVisualiza
000C   0A8C           00055         incf    Contador1,F             ; Incrementa el contador 1.
000D   080C           00056         movf    Contador1,W             ; ¿Ha llegado a su valor máximo?
000E   3C10           00057         sublw   Maximo1                 ; (W) = Maximo1 - (Contador1).
000F   1803           00058         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿Maximo1<(Contador1)?
0010   2813           00059         goto    IncrementaContador2     ; No, ha resultado Maximo1>=(Contador1)
0011   3003           00060         movlw   Minimo1                 ; Sí, ha resultado Maximo1<(Contador1), entonces
0012   008C           00061         movwf   Contador1               ; inicializa el registro.
0013                  00062 IncrementaContador2
0013   0A8D           00063         incf    Contador2,F             ; Incrementa el contador 2.
0014   080D           00064         movf    Contador2,W             ; ¿Ha llegado a su valor máximo?
0015   3C15           00065         sublw   Maximo2                 ; (W) = Maximo2 - (Contador2).
0016   1803           00066         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿Maximo2<(Contador2)?
0017   281A           00067         goto    VisualizaContadores     ; No, ha resultado Maximo2>=(Contador2)
0018   3007           00068         movlw   Minimo2                 ; Sí, ha resultado Maximo2<(Contador2), entonces
0019   008D           00069         movwf   Contador2               ; inicializa el registro.
001A                  00070 VisualizaContadores
001A   20AF           00071         call    LCD_Linea1
001B   080C           00072         movf    Contador1,W
001C   206B           00073         call    BIN_a_BCD               ; Se debe visualizar en BCD.
001D   20EC           00074         call    LCD_Byte
001E   20B1           00075         call    LCD_Linea2
001F   080D           00076         movf    Contador2,W
0020   206B           00077         call    BIN_a_BCD               ; Se debe visualizar en BCD.
0021   20EC           00078         call    LCD_Byte
0022   203B           00079         call    Retardo_200ms           ; Se incrementa cada 200 ms.
0023   0008           00080         return
                      00081 ;
                      00082         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  0000000E            00021         R_ContA                         ; Contadores para los retardos.
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000F            00022         R_ContB
  00000010            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0024                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0024   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0025   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0026   0000           00035         nop                             ; Aporta 1 ciclo máquina.
0027   0000           00036         nop                             ; Aporta 1 ciclo máquina.
0028   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0029                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0029   0000           00039         nop                             ; Aporta 1 ciclo máquina.
002A                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
002A   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
002B                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
002B   0000           00046         nop                             ; Aporta 1 ciclo máquina.
002C   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
002D   2837           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
002E                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
002E   0000           00050         nop                             ; Aporta 1 ciclo máquina.
002F   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0030   2837           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0031                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0031   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0032   2837           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0033                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0033   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0034   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0035   2837           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0036                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
0036   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0037                  00066 RetardoMicros
0037   008E           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
0038                  00068 Rmicros_Bucle
0038   0B8E           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0039   2838           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
003A   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
003B                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
003B   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
003C   284A           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
003D                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
003D   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
003E   284A           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
003F                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
003F   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0040   284A           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0041                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0041   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0042   284A           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0043                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0043   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0044   284A           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0045                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0045   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0046   284A           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0047                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0047   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0048   284A           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0049                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0049   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
004A                  00111 Retardos_ms
004A   008F           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
004B                  00113 R1ms_BucleExterno
004B   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
004C   008E           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
004D                  00116 R1ms_BucleInterno
004D   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
004E   0B8E           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
004F   284D           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
0050   0B8F           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0051   284B           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0052   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0053                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0053   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0054   285E           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0055                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0055   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0056   285E           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0057                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0057   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0058   285E           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0059                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
0059   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
005A   285E           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
005B                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
005B   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
005C   285E           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
005D                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
005D   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
005E                  00160 Retardo_1Decima
005E   0090           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
005F                  00162 R1Decima_BucleExterno2
005F   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
0060   008F           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0061                  00165 R1Decima_BucleExterno
0061   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0062   008E           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0063                  00168 R1Decima_BucleInterno          
0063   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0064   0B8E           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0065   2863           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0066   0B8F           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0067   2861           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0068   0B90           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0069   285F           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
006A   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00083         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10 tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  00000011            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  00000012            00022         BCD_Decenas                     ; la última asignada.
  00000013            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
006B                  00026 BIN_a_BCD
006B   0191           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
006C   0192           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
006D   0093           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
006E                  00030 BCD_Resta10
006E   300A           00031         movlw   .10                     ; A las unidades se le va restando 10 en cada
006F   0213           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
0070   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?.
0071   287B           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
0072                  00035 BCD_IncrementaDecenas
0072   0093           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
0073   0A92           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
0074   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
0075   0212           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
0076   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?.
0077   286E           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
0078                  00042 BCD_IncrementaCentenas                  ; las unidades.
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0078   0192           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
0079   0A91           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
007A   286E           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
007B                  00046 BIN_BCD_Fin
007B   0E12           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
007C   0713           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
007D   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal, no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00084         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000014            00025         LCD_Dato
  00000015            00026         LCD_GuardaDato
  00000016            00027         LCD_GuardaTRISB
  00000017            00028         LCD_Auxiliar1
  00000018            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
007E                  00045 LCD_Inicializa
007E   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
007F   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0080   1105           00048         bcf     LCD_PinEnable
0081   1085           00049         bcf     LCD_PinRW
0082   1283           00050         bcf     STATUS,RP0
0083   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
0084   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
0085   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0086   2041           00055         call    Retardo_20ms
0087   3030           00056         movlw   b'00110000'     
0088   2096           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0089   2045           00058         call    Retardo_5ms     
008A   3030           00059         movlw   b'00110000'     
008B   2096           00060         call    LCD_EscribeLCD
008C   202E           00061         call    Retardo_200micros
008D   3030           00062         movlw   b'00110000'     
008E   2096           00063         call    LCD_EscribeLCD
008F   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
0090   2096           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
0091   20BF           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
0092   20BD           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
0093   20BB           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
0094   20AD           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
0095   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
0096                  00082 LCD_EscribeLCD
0096   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
0097   0094           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
0098   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
0099   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
009A   0494           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
009B   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

009C   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
009D   0096           00091         movwf   LCD_GuardaTRISB
009E   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
009F   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00A0   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00A1   0814           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00A2   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00A3   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00A4   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00A5   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00A6   2047           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00A7   2033           00102         call    Retardo_50micros
00A8   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00A9   0816           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00AA   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00AB   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00AC   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00AD                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00AD   3006           00114         movlw   b'00000110'
00AE   28C0           00115         goto    LCD_EnviaComando
00AF                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00AF   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00B0   28C0           00118         goto    LCD_EnviaComando
00B1                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00B1   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00B2   28C0           00121         goto    LCD_EnviaComando
00B3                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00B3   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00B4   28C0           00124         goto    LCD_EnviaComando        ; registro W.
00B5                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00B5   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00B6   28C0           00127         goto    LCD_EnviaComando        ; registro W.
00B7                  00128 LCD_OFF                         ; Pantalla apagada.
00B7   3008           00129         movlw   b'00001000'
00B8   28C0           00130         goto    LCD_EnviaComando
00B9                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00B9   300E           00132         movlw   b'00001110'
00BA   28C0           00133         goto    LCD_EnviaComando
00BB                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00BB   300C           00135         movlw   b'00001100'
00BC   28C0           00136         goto    LCD_EnviaComando
00BD                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00BD   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
00BE   28C0           00139         goto    LCD_EnviaComando
00BF                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00BF   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
00C0                  00151 LCD_EnviaComando
00C0   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00C1   28C4           00153         goto    LCD_Envia
00C2                  00154 LCD_Caracter
00C2   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00C3   20C9           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00C4                  00157 LCD_Envia
00C4   0095           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00C5   2096           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00C6   0E15           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
00C7   2096           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00C8   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00C9                  00177 LCD_CodigoCGROM
00C9   0094           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00CA                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00CA   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00CB   1D03           00181         btfss   STATUS,Z
00CC   28D0           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00CD   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00CE   0094           00184         movwf   LCD_Dato
00CF   28DD           00185         goto    LCD_FinCGROM
00D0                  00186 LCD_EnheMayuscula
00D0   0814           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00D1   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00D2   1D03           00189         btfss   STATUS,Z
00D3   28D7           00190         goto    LCD_Grado               ; No es "Ñ".
00D4   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00D5   0094           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00D6   28DD           00193         goto    LCD_FinCGROM    
00D7                  00194 LCD_Grado
00D7   0814           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D8   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00D9   1D03           00197         btfss   STATUS,Z
00DA   28DD           00198         goto    LCD_FinCGROM            ; No es "º".
00DB   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00DC   0094           00200         movwf   LCD_Dato
00DD                  00201 LCD_FinCGROM
00DD   0814           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
00DE   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
00DF                  00209 LCD_LineaEnBlanco
00DF   3010           00210         movlw   LCD_CaracteresPorLinea
00E0   28E6           00211         goto    LCD_EnviaBlancos
00E1                  00212 LCD_UnEspacioBlanco
00E1   3001           00213         movlw   .1
00E2   28E6           00214         goto    LCD_EnviaBlancos
00E3                  00215 LCD_DosEspaciosBlancos
00E3   3002           00216         movlw   .2
00E4   28E6           00217         goto    LCD_EnviaBlancos
00E5                  00218 LCD_TresEspaciosBlancos
00E5   3003           00219         movlw   .3
00E6                  00220 LCD_EnviaBlancos
00E6   0097           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00E7                  00222 LCD_EnviaOtroBlanco     
00E7   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
00E8   20C2           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00E9   0B97           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00EA   28E7           00226         goto    LCD_EnviaOtroBlanco
00EB   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
00EC                  00240 LCD_Byte
00EC   0098           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00ED   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
00EE   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
00EF   28F4           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
00F0   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
00F1   20C2           00246         call    LCD_Caracter
00F2   28F6           00247         goto    LCD_VisualizaBajo
                      00248 
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F3                  00249 LCD_ByteCompleto
00F3   0098           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00F4                  00251 LCD_VisualizaAlto
00F4   0E18           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
00F5   20F7           00253         call    LCD_Nibble              ; Lo visualiza.
00F6                  00254 LCD_VisualizaBajo
00F6   0818           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
00F7                  00266 LCD_Nibble
00F7   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
00F8   0097           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
00F9   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
00FA   1C03           00270         btfss   STATUS,C        
00FB   28FF           00271         goto    LCD_EnviaByteLetra
00FC   0817           00272         movf    LCD_Auxiliar1,W
00FD   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00FE   2901           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00FF                  00275 LCD_EnviaByteLetra
00FF   0817           00276         movf    LCD_Auxiliar1,W
0100   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0101                  00278 LCD_FinVisualizaDigito
0101   28C2           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00085         END
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

BCD_Centenas                      00000011
BCD_Decenas                       00000012
BCD_IncrementaCentenas            00000078
BCD_IncrementaDecenas             00000072
BCD_Resta10                       0000006E
BCD_Unidades                      00000013
BIN_BCD_Fin                       0000007B
BIN_a_BCD                         0000006B
C                                 00000000
Contador1                         0000000C
Contador2                         0000000D
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
IncrementaContador2               00000013
IncrementaVisualiza               0000000C
Inicio                            00000000
LCD_2Lineas4Bits5x7               000000BF
LCD_Auxiliar1                     00000017
LCD_Auxiliar2                     00000018
LCD_Borra                         000000BD
LCD_BusDatos                      PORTB
LCD_Byte                          000000EC
LCD_ByteCompleto                  000000F3
LCD_Caracter                      000000C2
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000C9
LCD_CursorIncr                    000000AD
LCD_CursorOFF                     000000BB
LCD_CursorON                      000000B9
LCD_Dato                          00000014
LCD_DosEspaciosBlancos            000000E3
LCD_EnheMayuscula                 000000D0
LCD_EnheMinuscula                 000000CA
LCD_Envia                         000000C4
LCD_EnviaBlancos                  000000E6
LCD_EnviaByteLetra                000000FF
LCD_EnviaComando                  000000C0
LCD_EnviaOtroBlanco               000000E7
LCD_EscribeLCD                    00000096
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

LCD_FinCGROM                      000000DD
LCD_FinVisualizaDigito            00000101
LCD_Grado                         000000D7
LCD_GuardaDato                    00000015
LCD_GuardaTRISB                   00000016
LCD_Inicializa                    0000007E
LCD_Linea1                        000000AF
LCD_Linea2                        000000B1
LCD_LineaEnBlanco                 000000DF
LCD_Nibble                        000000F7
LCD_OFF                           000000B7
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000B3
LCD_PosicionLinea2                000000B5
LCD_TresEspaciosBlancos           000000E5
LCD_UnEspacioBlanco               000000E1
LCD_VisualizaAlto                 000000F4
LCD_VisualizaBajo                 000000F6
Maximo1                           00000010
Maximo2                           00000015
Minimo1                           00000003
Minimo2                           00000007
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000009
Pulsador                          PORTA,4
R1Decima_BucleExterno             00000061
R1Decima_BucleExterno2            0000005F
R1Decima_BucleInterno             00000063
R1ms_BucleExterno                 0000004B
R1ms_BucleInterno                 0000004D
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           0000000E
R_ContB                           0000000F
R_ContC                           00000010
RetardoMicros                     00000037
Retardo_100micros                 00000031
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_100ms                     0000003D
Retardo_10micros                  00000024
Retardo_10ms                      00000043
Retardo_10s                       00000055
Retardo_1Decima                   0000005E
Retardo_1ms                       00000049
Retardo_1s                        0000005B
Retardo_200micros                 0000002E
Retardo_200ms                     0000003B
Retardo_20micros                  00000036
Retardo_20ms                      00000041
Retardo_20s                       00000053
Retardo_2ms                       00000047
Retardo_2s                        00000059
Retardo_4micros                   0000002A
Retardo_500micros                 0000002B
Retardo_500ms                     0000005D
Retardo_50micros                  00000033
Retardo_50ms                      0000003F
Retardo_5micros                   00000029
Retardo_5ms                       00000045
Retardo_5s                        00000057
Retardos_ms                       0000004A
Rmicros_Bucle                     00000038
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
VisualizaContadores               0000001A
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
MPASM 03.50 Released                             MACRO_01.ASM   10-15-1982  13:51:21         PAGE 16


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XX-------------- ---------------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   258
Program Memory Words Free:   766


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

