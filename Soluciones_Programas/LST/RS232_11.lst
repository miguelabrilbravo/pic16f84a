MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************ RS232_11.asm **************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; SISTEMA DE GOBIERNO DESDE ORDENADOR: Desde el teclado de un ordenador se desea comandar
                      00010 ; el movimiento de una estructura móvil, según la siguiente tabla:
                      00011 ;
                      00012 ;       TECLA (Por ejemplo)     MOVIMIENTO
                      00013 ;       -------------------             ----------
                      00014 ;               t               Adelante
                      00015 ;               b               Atrás
                      00016 ;               a               Izquierda
                      00017 ;               l               Derecha
                      00018 ;            Espacio            Parada
                      00019 ;
                      00020 ; La pulsación de cualquiera de estas teclas activa el estado de las salidas correspondiente
                      00021 ; RB3 (Adelante), RB2 (Atrás), RB1 (Izquierda), RB0 (Derecha) y apaga el resto.
                      00022 ;
                      00023 ; El movimiento que se está realizando aparece reflejado en un mensaje en el visualizador LCD
                      00024 ; del sistema y también en la pantalla del ordenador.
                      00025 ;
                      00026 ; El programa debe permitir modificar facilmente en posteriores revisiones en el hardware de
                      00027 ; la salida. Es decir, para activar las salidas conviene utilizar el direccionamiento por bit
                      00028 ; en lugar de por byte (utilizar instrucciones "bsf..." y "bcf ...", en lugar de "mov...").
                      00029 ;
                      00030 ; ZONA DE DATOS **********************************************************************
                      00031 
2007   3FF1           00032         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00033         LIST       P=16F84A
                      00034         INCLUDE  <P16f84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00035 
                      00036         CBLOCK   0x0C           
  0000000C            00037         TeclaPulsada                    ; Va a guardar el contenido de la tecla pulsada.
  0000000D            00038         MensajeApuntado                 ; Va a guarda la dirección del mensaje apuntado.
                      00039         ENDC
                      00040 
                      00041 #DEFINE  SalidaAdelante PORTB,3         ; Define donde se sitúan las salidas.
                      00042 #DEFINE  SalidaAtras    PORTB,2
                      00043 #DEFINE  SalidaIzquierda        PORTB,1
                      00044 #DEFINE  SalidaDerecha  PORTB,0
                      00045 
  00000074            00046 TeclaAdelante   EQU     't'             ; Código de las teclas utilizadas.
  00000062            00047 TeclaAtras      EQU     'b'
  00000061            00048 TeclaIzquierda  EQU     'a'
  0000006C            00049 TeclaDerecha    EQU     'l'
  00000020            00050 TeclaParada     EQU     ' '             ; Código de la tecla espaciadora. (Hay un espacio,
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051                                         ; tened cuidado al teclear el programa).
                      00052 ; ZONA DE CÓDIGOS ********************************************************************
                      00053 
0000                  00054         ORG     0
0000                  00055 Inicio
0000   20CF           00056         call    LCD_Inicializa
0001   2091           00057         call    RS232_Inicializa
0002   1683           00058         bsf     STATUS,RP0              ; Configura como salidas las 4 líneas del
0003   1186           00059         bcf     SalidaAdelante          ; del Puerto B respetando la configuración del
0004   1106           00060         bcf     SalidaAtras             ; resto de las líneas.
0005   1086           00061         bcf     SalidaIzquierda
0006   1006           00062         bcf     SalidaDerecha
0007   1283           00063         bcf     STATUS,RP0
0008   206B           00064         call    Parado                  ; En principio todas las salidas deben estar 
0009                  00065 Principal                                       ; apagadas.
0009   2096           00066         call    RS232_LeeDato           ; Espera recibir un carácter.
000A   2057           00067         call    TesteaTeclado
000B   2809           00068         goto    Principal
                      00069 
                      00070 ; "Mensajes" ----------------------------------------------------------------------------
                      00071 ;
000C                  00072 Mensajes
000C   0782           00073         addwf   PCL,F
000D                  00074 MensajeParado
000D   3453 3469 3473 00075         DT "Sistema PARADO", 0x00
       3474 3465 346D 
       3461 3420 3450 
       3441 3452 3441 
       3444 344F 3400 
001C                  00076 MensajeAdelante
001C   344D 3461 3472 00077         DT "Marcha ADELANTE", 0x00
       3463 3468 3461 
       3420 3441 3444 
       3445 344C 3441 
       344E 3454 3445 
       3400 
002C                  00078 MensajeAtras
002C   344D 3461 3472 00079         DT "Marcha ATRAS", 0x00
       3463 3468 3461 
       3420 3441 3454 
       3452 3441 3453 
       3400 
0039                  00080 MensajeIzquierda
0039   3448 3461 3463 00081         DT "Hacia IZQUIERDA", 0x00
       3469 3461 3420 
       3449 345A 3451 
       3455 3449 3445 
       3452 3444 3441 
       3400 
0049                  00082 MensajeDerecha
0049   3448 3461 3463 00083         DT "Hacia DERECHA", 0x00
       3469 3461 3420 
       3444 3445 3452 
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3445 3443 3448 
       3441 3400 
                      00084 
                      00085 ; Subrutina "TesteaTeclado" -------------------------------------------------------------
                      00086 ;
                      00087 ; Testea el teclado y actúa en consecuencia.
                      00088 
0057                  00089 TesteaTeclado
0057   008C           00090         movwf   TeclaPulsada            ; Guarda el contenido de la tecla pulsada.
0058   3A74           00091         xorlw   TeclaAdelante           ; ¿Es la tecla del movimiento hacia adelante?
0059   1903           00092         btfsc   STATUS,Z
005A   2871           00093         goto    Adelante                        ; Sí, se desea movimiento hacia adelante.
                      00094 ;
005B   080C           00095         movf    TeclaPulsada,W          ; Recupera el contenido de la tecla pulsada.
005C   3A62           00096         xorlw   TeclaAtras              ; ¿Es la tecla del movimiento hacia atrás?.
005D   1903           00097         btfsc   STATUS,Z
005E   2877           00098         goto    Atras                   ; Sí, se desea movimiento hacia atrás.
                      00099 ;
005F   080C           00100         movf    TeclaPulsada,W          ; Recupera el contenido de la tecla pulsada.
0060   3A61           00101         xorlw   TeclaIzquierda          ; ¿Es la tecla del movimiento hacia la izquierda?
0061   1903           00102         btfsc   STATUS,Z
0062   287D           00103         goto    Izquierda                       ; Sí, se desea movimiento hacia la izquierda.
                      00104 ;
0063   080C           00105         movf    TeclaPulsada,W          ; Recupera el contenido de la tecla pulsada.
0064   3A6C           00106         xorlw   TeclaDerecha            ; ¿Es tecla del movimiento hacia la derecha?.
0065   1903           00107         btfsc   STATUS,Z
0066   2883           00108         goto    Derecha                 ; Sí, se desea movimiento hacia la derecha.
                      00109 ;
0067   080C           00110         movf    TeclaPulsada,W          ; Recupera el contenido de la tecla pulsada.
0068   3A20           00111         xorlw   TeclaParada             ; ¿Es la tecla de parada?.
0069   1D03           00112         btfss   STATUS,Z
006A   2890           00113         goto    Fin                     ; No es ninguna tecla de movimiento. Sale.
006B                  00114 Parado
006B   1186           00115         bcf     SalidaAdelante          ; Como se ha pulsado la tecla de parada se
006C   1106           00116         bcf     SalidaAtras             ; desactivan todas las salidas.
006D   1086           00117         bcf     SalidaIzquierda
006E   1006           00118         bcf     SalidaDerecha
006F   300D           00119         movlw   MensajeParado
0070   2888           00120         goto    Visualiza
0071                  00121 Adelante
0071   1106           00122         bcf     SalidaAtras
0072   1586           00123         bsf     SalidaAdelante
0073   1086           00124         bcf     SalidaIzquierda
0074   1006           00125         bcf     SalidaDerecha
0075   301C           00126         movlw   MensajeAdelante
0076   2888           00127         goto    Visualiza
0077                  00128 Atras
0077   1186           00129         bcf     SalidaAdelante
0078   1506           00130         bsf     SalidaAtras
0079   1086           00131         bcf     SalidaIzquierda
007A   1006           00132         bcf     SalidaDerecha
007B   302C           00133         movlw   MensajeAtras
007C   2888           00134         goto    Visualiza
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007D                  00135 Izquierda
007D   1186           00136         bcf     SalidaAdelante
007E   1106           00137         bcf     SalidaAtras
007F   1486           00138         bsf     SalidaIzquierda
0080   1006           00139         bcf     SalidaDerecha
0081   3039           00140         movlw   MensajeIzquierda
0082   2888           00141         goto    Visualiza
0083                  00142 Derecha
0083   1186           00143         bcf     SalidaAdelante
0084   1106           00144         bcf     SalidaAtras
0085   1086           00145         bcf     SalidaIzquierda
0086   1406           00146         bsf     SalidaDerecha
0087   3049           00147         movlw   MensajeDerecha
                      00148 
                      00149 ; Según el estado de las salidas visualiza el estado del sistema en el visualizador LCD y en
                      00150 ; el monitor del ordenador.
                      00151 
0088                  00152 Visualiza
0088   008D           00153         movwf   MensajeApuntado                 ; Guarda la posición del mensaje.
0089   210E           00154         call    LCD_Borra                       ; Borra la pantalla del modulo LCD.
008A   080D           00155         movf    MensajeApuntado,W               ; Visualiza el mensaje en la pantalla
008B   2153           00156         call    LCD_Mensaje                     ; del visualizador LCD.
008C   20C6           00157         call    RS232_LineasBlanco              ; Borra la pantalla del ordenador.
008D   080D           00158         movf    MensajeApuntado,W
008E   20B8           00159         call    RS232_Mensaje                   ; Lo visualiza en el ordenador.
008F   20C6           00160         call    RS232_LineasBlanco
0090   0008           00161 Fin     return
                      00162 
                      00163         INCLUDE  <RS232.INC>
                      00001 ;***************************** Librería "RS232.INC" *************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de la transmisión
                      00010 ; seríe asincrona según normas RS-232.
                      00011 ;
                      00012 ; Los parámetros adoptados para la comunicación son los siguientes:
                      00013 ; - Velocidad de transmisión de 9600 baudios. La duración de cada bit será 104 µs.
                      00014 ; - Un bit de inicio ó Start a nivel bajo.
                      00015 ; - Dato de 8 bits.
                      00016 ; - Sin paridad.
                      00017 ; - Dos bits de final ó Stop a nivel alto.
                      00018 ;
                      00019 ; El tiempo entre bit y bit  debe coincidir con el período de la señal leída o enviada.
                      00020 ; Como la velocidad de transmisión ó recepción es de 9600 baudios, el período será:
                      00021 ; 1/9600Baudios= 104 µs. Se utilizará pues la subrutina "Retardos_100micros".
                      00022 
                      00023         CBLOCK
  0000000E            00024         RS232_ContadorBits
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000F            00025         RS232_Dato
                      00026         ENDC
                      00027 
                      00028 #DEFINE  RS232_Entrada  PORTA,3         ; Línea por la que se reciben los datos.
                      00029 #DEFINE  RS232_Salida   PORTA,4         ; Línea por la que se envían los datos.
                      00030 ;
                      00031 ; Subrutina "RS232_Inicializa" -------------------------------------------------------------
                      00032 ;
                      00033 ; Configura las líneas de salida y entrada del microcontrolador.
                      00034 
0091                  00035 RS232_Inicializa
0091   1683           00036         bsf     STATUS,RP0
0092   1585           00037         bsf     RS232_Entrada           ; Esta línea se configura como entrada.
0093   1205           00038         bcf     RS232_Salida            ; Esta línea se configura como salida.
0094   1283           00039         bcf     STATUS,RP0
0095   0008           00040         return
                      00041 
                      00042 ; Subrutina "RS232_LeeDato" -------------------------------------------------------------
                      00043 ;
                      00044 ; El microcontrolador lee el dato por la línea de entrada comenzando por el bit de menor
                      00045 ; peso. El dato leído se envía finalmente en el registro de trabajo W.
                      00046 ;
                      00047 ; El ordenador parte siempre de un nivel alto, que es el estado que tiene cuando no 
                      00048 ; envía información. La secuencia utilizada es:
                      00049 ; 1º    Espera que se ejecute el pulso negativo del bit Start, o flanco de bajada.
                      00050 ; 2º    Deja pasar un tiempo una y media veces mayor que el periodo de transmisión para
                      00051 ;       saltarse el bit de Start y lee el primer bit en su mitad.
                      00052 ; 3º    Lee el resto de los bits de datos, esperando un tiempo igual a la duración del
                      00053 ;       período entre lectura y lectura para testearlos en mitad del bit.
                      00054 ;
                      00055 ; Salida: En el registro de trabajo W el byte leído.
                      00056 
0096                  00057 RS232_LeeDato
0096   3008           00058         movlw   d'8'                    ; Número de bits a recibir.
0097   008E           00059         movwf   RS232_ContadorBits
0098                  00060 RS232_EsperaBitStart
0098   1985           00061         btfsc   RS232_Entrada           ; Lee la entrada y espera a que sea "0".
0099   2898           00062         goto    RS232_EsperaBitStart    ; No, pues espera el nivel bajo.
009A   2188           00063         call    Retardo_100micros               ; El primer bit debe leerlo un tiempo igual a una
009B   218A           00064         call    Retardo_50micros                ; vez y media el periodo de transmisión.
009C                  00065 RS232_LeeBit
009C   1003           00066         bcf     STATUS,C                ; Ahora lee el pin. En principio supone que es 0.
009D   1985           00067         btfsc   RS232_Entrada           ; ¿Realmente es cero?.
009E   1403           00068         bsf     STATUS,C                ; No, pues cambia a uno.
009F   0C8F           00069         rrf     RS232_Dato,F            ; Introduce el bit en el registro de lectura.
00A0   2188           00070         call    Retardo_100micros               ; Los siguientes bits los lee un período más tarde.
00A1   0B8E           00071         decfsz  RS232_ContadorBits,F    ; Comprueba que es el último bit.
00A2   289C           00072         goto    RS232_LeeBit            ; Si no es el último bit, pasa a leer el siguiente.
00A3   2185           00073         call    Retardo_200micros               ; Espera un tiempo igual al los 2 bits de "Stop".
00A4   080F           00074         movf    RS232_Dato,W            ; El resultado en el registro W.
00A5   0008           00075         return  
                      00076 
                      00077 ; Subrutinas "RS232_EnviaDato" y "RS232_EnviaNúmero" -------------------------------------
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00078 ;
                      00079 ; El microcontrolador envía un dato por la línea de salida comenzando por el bit de menor
                      00080 ; peso. En dato enviado será el que le llegue a través del registro de trabajo W.
                      00081 ; 1º.   Envía un "0" durante un tiempo igual al período de la velocidad de transmisión.
                      00082 ;       Este es el bit de "Start".
                      00083 ; 2º.   Envía el bit correspondiente:
                      00084 ;       - Si va a enviar un "0" permanece en bajo durante el período correspondiente.
                      00085 ;       - Si va a escribir un "1" permanece en alto durante el período correspondiente.
                      00086 ; 3º.   Envía dos bits "1" durante un tiempo igual al período de la velocidad de 
                      00087 ;       transmisión cada uno. Estos son los dos bits de "Stop".
                      00088 ;
                      00089 ; Entrada:      En (W) el dato a enviar.
                      00090 
00A6                  00091 RS232_EnviaNumero                       ; Envía el código ASCII de un número.
00A6   3E30           00092         addlw   '0'                     ; Lo pasa a código ASCII sumándole el ASCII del 0.
00A7                  00093 RS232_EnviaDato
00A7   008F           00094         movwf   RS232_Dato              ; Guarda el contenido del byte a transmitir.
00A8   3008           00095         movlw   d'8'                    ; Este es el número de bits a transmitir.
00A9   008E           00096         movwf   RS232_ContadorBits
00AA   1205           00097         bcf     RS232_Salida            ; Bit de Start.
00AB   2188           00098         call    Retardo_100micros
00AC                  00099 RS232_EnviaBit                          ; Comienza a enviar datos.
00AC   0C8F           00100         rrf     RS232_Dato,F            ; Lleva el bit que se quiere enviar al Carry para
00AD   1C03           00101         btfss   STATUS,C                ; deducir su valor. ¿Es un "1" el bit a transmitir?.
00AE   28B1           00102         goto    RS232_EnviaCero         ; No, pues envía un "0".
00AF                  00103 RS232_EnviaUno
00AF   1605           00104         bsf     RS232_Salida            ; Transmite un "1".
00B0   28B2           00105         goto    RS232_FinEnviaBit
00B1                  00106 RS232_EnviaCero
00B1   1205           00107         bcf     RS232_Salida            ; Transmite un "0".
00B2                  00108 RS232_FinEnviaBit
00B2   2188           00109         call    Retardo_100micros               ; Este es el tiempo que estará en alto o bajo.
00B3   0B8E           00110         decfsz  RS232_ContadorBits,F    ; Comprueba que es el último bit.
00B4   28AC           00111         goto    RS232_EnviaBit          ; Como no es el último bit repite la operación.
00B5   1605           00112         bsf     RS232_Salida            ; Envía dos bits de Stop.
00B6   2185           00113         call    Retardo_200micros
00B7   0008           00114         return
                      00115         
                      00116 ;       ===================================================================
                      00117 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00118 ;         E. Palacios, F. Remiro y L. López.
                      00119 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00120 ;       ===================================================================
                      00164         INCLUDE  <RS232MEN.INC>
                      00001 ;***************************** Librería "RS232MEN.INC" **********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten transmitir mensajes desde el microcontrolador hacia el 
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00010 ; ordenador a través del puerto serie RS232.
                      00011 ;
                      00012 ; Subrutina "RS232_Mensaje" -------------------------------------------------------------
                      00013 ;
                      00014 ; Envía por el puerto serie el mensaje apuntado por el registro W y grabado en memoria
                      00015 ; de programa del PIC. El mensaje se visualizará en el monitor del ordenador. Esta
                      00016 ; subrutina sigue la estructura de funcionamiento similar a la ya conocida "LCD_Mensaje"
                      00017 ; para visualización de mensajes en pantallas de  modulos LCD.
                      00018 ;
                      00019         CBLOCK
  00000010            00020         RS232_ApuntaCaracter            ; Apunta al carácter a visualizar.
  00000011            00021         RS232_ValorCaracter             ; Valor ASCII del carácter a visualizar.
                      00022         ENDC
                      00023 
00B8                  00024 RS232_Mensaje
00B8   0090           00025         movwf   RS232_ApuntaCaracter    ; Posición del primer carácter del mensaje.
00B9   300C           00026         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
00BA   0290           00027         subwf   RS232_ApuntaCaracter,F  ; del mensaje respecto del comienzo de todos los
                      00028                                         ; mensajes (identificados mediante la etiqueta
                      00029                                         ; "Mensajes")
00BB   0390           00030         decf    RS232_ApuntaCaracter,F  ; Para compensar la posición que ocupa la 
00BC                  00031 RS232_VisualizaOtroCaracter                     ; instrucción "addwf PCL,F".
00BC   0810           00032         movf    RS232_ApuntaCaracter,W  ; Apunta al carácter a visualizar.
00BD   200C           00033         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
00BE   0091           00034         movwf   RS232_ValorCaracter     ; Guarda el valor de carácter.
00BF   0891           00035         movf    RS232_ValorCaracter,F   ; Lo único que hace es posicionar flag Z. En caso
00C0   1903           00036         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
00C1   28C5           00037         goto    RS232_FinMensaje                ; de mensaje, sale fuera.
00C2                  00038 RS232_NoUltimoCaracter
00C2   20A7           00039         call    RS232_EnviaDato         ; Visualiza el carácter ASCII leído.
00C3   0A90           00040         incf    RS232_ApuntaCaracter,F  ; Apunta a la posición del siguiente carácter
00C4   28BC           00041         goto    RS232_VisualizaOtroCaracter     ; dentro del mensaje.
00C5                  00042 RS232_FinMensaje
00C5   0008           00043         return
                      00044 
                      00045 ; Subrutina "RS232_LineasBlanco" ------------------------------------------------
                      00046 ;
                      00047 ; Visualiza unas cuantas líneas en blanco en el monitor del ordenador.
                      00048 
                      00049         CBLOCK
  00000012            00050         RS232_ContadorLineas
                      00051         ENDC
                      00052 
00C6                  00053 RS232_LineasBlanco
00C6   300A           00054         movlw   d'10'                   ; Por ejemplo este número de líneas en
00C7   0092           00055         movwf   RS232_ContadorLineas    ; blanco.
00C8                  00056 R232_LineasBlancoLazo
00C8   300A           00057         movlw   .10                     ; Código del salto de línea
00C9   20A7           00058         call    RS232_EnviaDato
00CA   0B92           00059         decfsz  RS232_ContadorLineas,F
00CB   28C8           00060         goto    R232_LineasBlancoLazo
00CC   300D           00061         movlw   .13                     ; Código del retorno de carro.
00CD   20A7           00062         call    RS232_EnviaDato         ; Finaliza con un retorno de carro.
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CE   0008           00063         return
                      00064         
                      00065 ;       ===================================================================
                      00066 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00067 ;         E. Palacios, F. Remiro y L. López.
                      00068 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00069 ;       ===================================================================
                      00165         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000013            00025         LCD_Dato
  00000014            00026         LCD_GuardaDato
  00000015            00027         LCD_GuardaTRISB
  00000016            00028         LCD_Auxiliar1
  00000017            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
00CF                  00045 LCD_Inicializa
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CF   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
00D0   1005           00047         bcf     LCD_PinRS               ; R/W y E.
00D1   1105           00048         bcf     LCD_PinEnable
00D2   1085           00049         bcf     LCD_PinRW
00D3   1283           00050         bcf     STATUS,RP0
00D4   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
00D5   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
00D6   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00D7   2198           00055         call    Retardo_20ms
00D8   3030           00056         movlw   b'00110000'     
00D9   20E7           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
00DA   219C           00058         call    Retardo_5ms     
00DB   3030           00059         movlw   b'00110000'     
00DC   20E7           00060         call    LCD_EscribeLCD
00DD   2185           00061         call    Retardo_200micros
00DE   3030           00062         movlw   b'00110000'     
00DF   20E7           00063         call    LCD_EscribeLCD
00E0   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00E1   20E7           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
00E2   2110           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
00E3   210E           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
00E4   210C           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00E5   20FE           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00E6   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00E7                  00082 LCD_EscribeLCD
00E7   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00E8   0093           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00E9   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00EA   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00EB   0493           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00EC   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00EE   0095           00091         movwf   LCD_GuardaTRISB
00EF   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00F0   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00F1   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00F2   0813           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00F3   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F4   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00F5   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00F6   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00F7   219E           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00F8   218A           00102         call    Retardo_50micros
00F9   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00FA   0815           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00FB   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00FC   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00FD   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00FE                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00FE   3006           00114         movlw   b'00000110'
00FF   2911           00115         goto    LCD_EnviaComando
0100                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
0100   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
0101   2911           00118         goto    LCD_EnviaComando
0102                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
0102   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
0103   2911           00121         goto    LCD_EnviaComando
0104                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
0104   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
0105   2911           00124         goto    LCD_EnviaComando        ; registro W.
0106                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
0106   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
0107   2911           00127         goto    LCD_EnviaComando        ; registro W.
0108                  00128 LCD_OFF                         ; Pantalla apagada.
0108   3008           00129         movlw   b'00001000'
0109   2911           00130         goto    LCD_EnviaComando
010A                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
010A   300E           00132         movlw   b'00001110'
010B   2911           00133         goto    LCD_EnviaComando
010C                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
010C   300C           00135         movlw   b'00001100'
010D   2911           00136         goto    LCD_EnviaComando
010E                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
010E   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
010F   2911           00139         goto    LCD_EnviaComando
0110                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
0110   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0111                  00151 LCD_EnviaComando
0111   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0112   2915           00153         goto    LCD_Envia
0113                  00154 LCD_Caracter
0113   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
0114   211A           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
0115                  00157 LCD_Envia
0115   0094           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
0116   20E7           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
0117   0E14           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
0118   20E7           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
0119   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
011A                  00177 LCD_CodigoCGROM
011A   0093           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
011B                  00179 LCD_EnheMinuscula                       ; un carácter especial.
011B   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
011C   1D03           00181         btfss   STATUS,Z
011D   2921           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
011E   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
011F   0093           00184         movwf   LCD_Dato
0120   292E           00185         goto    LCD_FinCGROM
0121                  00186 LCD_EnheMayuscula
0121   0813           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0122   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
0123   1D03           00189         btfss   STATUS,Z
0124   2928           00190         goto    LCD_Grado               ; No es "Ñ".
0125   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
0126   0093           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
0127   292E           00193         goto    LCD_FinCGROM    
0128                  00194 LCD_Grado
0128   0813           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0129   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
012A   1D03           00197         btfss   STATUS,Z
012B   292E           00198         goto    LCD_FinCGROM            ; No es "º".
012C   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
012D   0093           00200         movwf   LCD_Dato
012E                  00201 LCD_FinCGROM
012E   0813           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
012F   0008           00203         return
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
0130                  00209 LCD_LineaEnBlanco
0130   3010           00210         movlw   LCD_CaracteresPorLinea
0131   2937           00211         goto    LCD_EnviaBlancos
0132                  00212 LCD_UnEspacioBlanco
0132   3001           00213         movlw   .1
0133   2937           00214         goto    LCD_EnviaBlancos
0134                  00215 LCD_DosEspaciosBlancos
0134   3002           00216         movlw   .2
0135   2937           00217         goto    LCD_EnviaBlancos
0136                  00218 LCD_TresEspaciosBlancos
0136   3003           00219         movlw   .3
0137                  00220 LCD_EnviaBlancos
0137   0096           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
0138                  00222 LCD_EnviaOtroBlanco     
0138   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
0139   2113           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
013A   0B96           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
013B   2938           00226         goto    LCD_EnviaOtroBlanco
013C   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
013D                  00240 LCD_Byte
013D   0097           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
013E   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
013F   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0140   2945           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0141   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0142   2113           00246         call    LCD_Caracter
0143   2947           00247         goto    LCD_VisualizaBajo
                      00248 
0144                  00249 LCD_ByteCompleto
0144   0097           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0145                  00251 LCD_VisualizaAlto
0145   0E17           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0146   2148           00253         call    LCD_Nibble              ; Lo visualiza.
0147                  00254 LCD_VisualizaBajo
0147   0817           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
0148                  00266 LCD_Nibble
0148   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
0149   0096           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
014A   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
014B   1C03           00270         btfss   STATUS,C        
014C   2950           00271         goto    LCD_EnviaByteLetra
014D   0816           00272         movf    LCD_Auxiliar1,W
014E   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
014F   2952           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0150                  00275 LCD_EnviaByteLetra
0150   0816           00276         movf    LCD_Auxiliar1,W
0151   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0152                  00278 LCD_FinVisualizaDigito
0152   2913           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00166         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  00000018            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  00000019            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
0153                  00042 LCD_Mensaje
0153   0098           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
0154   300C           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0155   0298           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
0156   0398           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0157                  00047 LCD_VisualizaOtroCaracter
0157   0818           00048         movf    LCD_ApuntaCaracter,W
0158   200C           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
0159   0099           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
015A   0899           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
015B   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
015C   2960           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
015D                  00054 LCD_NoUltimoCaracter
015D   2113           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
015E   0A98           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
015F   2957           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
0160                  00058 LCD_FinMensaje
0160   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  0000001A            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
0161                  00073 LCD_MensajeMovimiento
0161   0098           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0162   300C           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0163   0298           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
0164   0398           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0165                  00078 LCD_PrimeraPosicion
0165   019A           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
0166   210E           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
0167                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0167   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
0168   021A           00083         subwf   LCD_CursorPosicion,W
0169   1D03           00084         btfss   STATUS,Z
016A   2970           00085         goto    LCD_NoEsFinalLinea
016B                  00086 LCD_EsFinalLinea
016B   2192           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
016C   2192           00088         call    Retardo_200ms
016D   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
016E   0298           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
016F   2965           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
0170                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
0170   0818           00093         movf    LCD_ApuntaCaracter,W
0171   200C           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0172   0099           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0173   0899           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0174   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0175   297A           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
0176                  00099 LCD_NoUltimoCaracter2
0176   2113           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0177   0A9A           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
0178   0A98           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
0179   2967           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
017A                  00105 LCD_FinMovimiento                       ; de la línea.
017A   0008           00106         return                          ; Vuelve al programa principal.
                      00167         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  0000001B            00021         R_ContA                         ; Contadores para los retardos.
  0000001C            00022         R_ContB
  0000001D            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
017B                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
017B   0000           00033         nop                             ; Aporta 1 ciclo máquina.
017C   0000           00034         nop                             ; Aporta 1 ciclo máquina.
017D   0000           00035         nop                             ; Aporta 1 ciclo máquina.
017E   0000           00036         nop                             ; Aporta 1 ciclo máquina.
017F   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0180                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0180   0000           00039         nop                             ; Aporta 1 ciclo máquina.
0181                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
0181   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
0182                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
0182   0000           00046         nop                             ; Aporta 1 ciclo máquina.
0183   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
0184   298E           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0185                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
0185   0000           00050         nop                             ; Aporta 1 ciclo máquina.
0186   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0187   298E           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0188                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0188   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0189   298E           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
018A                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
018A   0000           00057         nop                             ; Aporta 1 ciclo máquina.
018B   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
018C   298E           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
018D                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
018D   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
018E                  00066 RetardoMicros
018E   009B           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
018F                  00068 Rmicros_Bucle
018F   0B9B           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0190   298F           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
0191   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00081 ;
0192                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
0192   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0193   29A1           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0194                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
0194   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0195   29A1           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0196                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
0196   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0197   29A1           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0198                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0198   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0199   29A1           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
019A                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
019A   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
019B   29A1           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
019C                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
019C   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
019D   29A1           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
019E                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
019E   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
019F   29A1           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
01A0                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
01A0   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
01A1                  00111 Retardos_ms
01A1   009C           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
01A2                  00113 R1ms_BucleExterno
01A2   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
01A3   009B           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
01A4                  00116 R1ms_BucleInterno
01A4   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
01A5   0B9B           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
01A6   29A4           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
01A7   0B9C           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
01A8   29A2           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
01A9   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
01AA                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
01AA   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
01AB   29B5           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01AC                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
01AC   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
01AD   29B5           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01AE                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
01AE   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
01AF   29B5           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01B0                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
01B0   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
01B1   29B5           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01B2                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
01B2   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
01B3   29B5           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
01B4                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
01B4   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
01B5                  00160 Retardo_1Decima
01B5   009D           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
01B6                  00162 R1Decima_BucleExterno2
01B6   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
01B7   009C           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
01B8                  00165 R1Decima_BucleExterno
01B8   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
01B9   009B           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
01BA                  00168 R1Decima_BucleInterno          
01BA   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
01BB   0B9B           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
01BC   29BA           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
01BD   0B9C           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
01BE   29B8           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
01BF   0B9D           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
01C0   29B6           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
01C1   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00168         END
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 20


SYMBOL TABLE
  LABEL                             VALUE 

Adelante                          00000071
Atras                             00000077
C                                 00000000
DC                                00000001
Derecha                           00000083
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
Fin                               00000090
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000000
Izquierda                         0000007D
LCD_2Lineas4Bits5x7               00000110
LCD_ApuntaCaracter                00000018
LCD_Auxiliar1                     00000016
LCD_Auxiliar2                     00000017
LCD_Borra                         0000010E
LCD_BusDatos                      PORTB
LCD_Byte                          0000013D
LCD_ByteCompleto                  00000144
LCD_Caracter                      00000113
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   0000011A
LCD_CursorIncr                    000000FE
LCD_CursorOFF                     0000010C
LCD_CursorON                      0000010A
LCD_CursorPosicion                0000001A
LCD_Dato                          00000013
LCD_DosEspaciosBlancos            00000134
LCD_EnheMayuscula                 00000121
LCD_EnheMinuscula                 0000011B
LCD_Envia                         00000115
LCD_EnviaBlancos                  00000137
LCD_EnviaByteLetra                00000150
LCD_EnviaComando                  00000111
LCD_EnviaOtroBlanco               00000138
LCD_EsFinalLinea                  0000016B
LCD_EscribeLCD                    000000E7
LCD_FinCGROM                      0000012E
LCD_FinMensaje                    00000160
LCD_FinMovimiento                 0000017A
LCD_FinVisualizaDigito            00000152
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 21


SYMBOL TABLE
  LABEL                             VALUE 

LCD_Grado                         00000128
LCD_GuardaDato                    00000014
LCD_GuardaTRISB                   00000015
LCD_Inicializa                    000000CF
LCD_Linea1                        00000100
LCD_Linea2                        00000102
LCD_LineaEnBlanco                 00000130
LCD_Mensaje                       00000153
LCD_MensajeMovimiento             00000161
LCD_Nibble                        00000148
LCD_NoEsFinalLinea                00000170
LCD_NoUltimoCaracter              0000015D
LCD_NoUltimoCaracter2             00000176
LCD_OFF                           00000108
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                00000104
LCD_PosicionLinea2                00000106
LCD_PrimeraPosicion               00000165
LCD_TresEspaciosBlancos           00000136
LCD_UnEspacioBlanco               00000132
LCD_ValorCaracter                 00000019
LCD_VisualizaAlto                 00000145
LCD_VisualizaBajo                 00000147
LCD_VisualizaCaracter             00000167
LCD_VisualizaOtroCaracter         00000157
MensajeAdelante                   0000001C
MensajeApuntado                   0000000D
MensajeAtras                      0000002C
MensajeDerecha                    00000049
MensajeIzquierda                  00000039
MensajeParado                     0000000D
Mensajes                          0000000C
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Parado                            0000006B
Principal                         00000009
R1Decima_BucleExterno             000001B8
R1Decima_BucleExterno2            000001B6
R1Decima_BucleInterno             000001BA
R1ms_BucleExterno                 000001A2
R1ms_BucleInterno                 000001A4
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 22


SYMBOL TABLE
  LABEL                             VALUE 

R232_LineasBlancoLazo             000000C8
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
RS232_ApuntaCaracter              00000010
RS232_ContadorBits                0000000E
RS232_ContadorLineas              00000012
RS232_Dato                        0000000F
RS232_Entrada                     PORTA,3
RS232_EnviaBit                    000000AC
RS232_EnviaCero                   000000B1
RS232_EnviaDato                   000000A7
RS232_EnviaNumero                 000000A6
RS232_EnviaUno                    000000AF
RS232_EsperaBitStart              00000098
RS232_FinEnviaBit                 000000B2
RS232_FinMensaje                  000000C5
RS232_Inicializa                  00000091
RS232_LeeBit                      0000009C
RS232_LeeDato                     00000096
RS232_LineasBlanco                000000C6
RS232_Mensaje                     000000B8
RS232_NoUltimoCaracter            000000C2
RS232_Salida                      PORTA,4
RS232_ValorCaracter               00000011
RS232_VisualizaOtroCaracter       000000BC
R_ContA                           0000001B
R_ContB                           0000001C
R_ContC                           0000001D
RetardoMicros                     0000018E
Retardo_100micros                 00000188
Retardo_100ms                     00000194
Retardo_10micros                  0000017B
Retardo_10ms                      0000019A
Retardo_10s                       000001AC
Retardo_1Decima                   000001B5
Retardo_1ms                       000001A0
Retardo_1s                        000001B2
Retardo_200micros                 00000185
Retardo_200ms                     00000192
Retardo_20micros                  0000018D
Retardo_20ms                      00000198
Retardo_20s                       000001AA
Retardo_2ms                       0000019E
Retardo_2s                        000001B0
Retardo_4micros                   00000181
Retardo_500micros                 00000182
Retardo_500ms                     000001B4
Retardo_50micros                  0000018A
Retardo_50ms                      00000196
Retardo_5micros                   00000180
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 23


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_5ms                       0000019C
Retardo_5s                        000001AE
Retardos_ms                       000001A1
Rmicros_Bucle                     0000018F
STATUS                            00000003
SalidaAdelante                    PORTB,3
SalidaAtras                       PORTB,2
SalidaDerecha                     PORTB,0
SalidaIzquierda                   PORTB,1
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
TeclaAdelante                     00000074
TeclaAtras                        00000062
TeclaDerecha                      0000006C
TeclaIzquierda                    00000061
TeclaParada                       00000020
TeclaPulsada                      0000000C
TesteaTeclado                     00000057
Visualiza                         00000088
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM 03.50 Released                             RS232_11.ASM   10-12-2000  20:09:07         PAGE 24


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XX-------------- ---------------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   450
Program Memory Words Free:   574


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

