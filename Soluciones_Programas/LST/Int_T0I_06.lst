MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************ Int_T0I_06.asm ************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; En la línea superior de la pantalla aparece un mensaje fijo. En la línea inferior aparece
                      00010 ; un mensaje intermitente que se enciende durante 500 ms y se apaga durante 300 ms.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 
2007   3FF1           00014         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00015         LIST       P=16F84A
                      00016         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00017 
                      00018         CBLOCK  0x0C
  0000000C            00019         Registro50ms
  0000000D            00020         Intermitencia                   ; Si es cero se apaga en intermitencia. Para
                      00021         ENDC                            ; cualquier otro valor se enciende.
                      00022 
  00000010            00023 Carga500ms      EQU     10              ; 500 ms, ya que 50ms x 10 = 500ms 
  00000006            00024 Carga300ms      EQU     6               ; 300ms, ya que 50ms x 6 = 300ms 
  FFFFFF3D            00025 TMR0_Carga50ms  EQU     -d'195'         ; Para conseguir la interrupción del
                      00026                                         ; Timer 0 cada 50 ms.
                      00027 ; ZONA DE CÓDIGOS ********************************************************************
                      00028 
0000                  00029         ORG     0
0000   2805           00030         goto    Inicio
0004                  00031         ORG     4                       ; Vector de interrupción
0004   2813           00032         goto    ServicioInterrupcion
0005                  00033 Inicio
0005   2089           00034         call    LCD_Inicializa
0006   3028           00035         movlw   MensajeFijo             ; Visualiza mensaje fijo en la primera
0007   210D           00036         call    LCD_Mensaje             ; línea.
0008   1683           00037         bsf     STATUS,RP0
0009   3007           00038         movlw   b'00000111'             ; Prescaler de 256 para el TMR0.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
000A   0081           00039         movwf   OPTION_REG
000B   1283           00040         bcf     STATUS,RP0
000C   303D           00041         movlw   TMR0_Carga50ms          ; Carga el TMR0.
000D   0081           00042         movwf   TMR0
000E   3010           00043         movlw   Carga500ms
000F   008C           00044         movwf   Registro50ms
0010   30A0           00045         movlw   b'10100000'
0011   008B           00046         movwf   INTCON
0012                  00047 Principal
0012   2812           00048         goto    $
                      00049 
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00050 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
                      00051 ;
0013                  00052 ServicioInterrupcion
0013   303D           00053         movlw   TMR0_Carga50ms          ; Carga el Timer 0.
0014   0081           00054         movwf   TMR0
0015   0B8C           00055         decfsz  Registro50ms,F          ; Decrementa el contador.
0016   2819           00056         goto    FinInterrupcion
0017   098D           00057         comf    Intermitencia,F         ; Conmuta la intermitencia
0018   201B           00058         call    Visualiza
0019                  00059 FinInterrupcion
0019   110B           00060         bcf     INTCON,T0IF
001A   0009           00061         retfie
                      00062         
                      00063 ; Subrutina "Visualiza" -----------------------------------------------------------------
                      00064 ;
                      00065 ; Visualiza o no un mensaje en función del contenido del registro Intermitencia.
                      00066 ;
001B                  00067 Visualiza
001B   20BC           00068         call    LCD_Linea2              ; Se sitúa en la segunda línea.
001C   1C0D           00069         btfss   Intermitencia,0         ; ¿Apaga o enciende el mensaje en intermitencia?
001D   2823           00070         goto    ApagaMensaje            ; Apaga el mensaje.
001E   3034           00071         movlw   MensajeIntermitente     ; Visualiza el mensaje intermitente.
001F   210D           00072         call    LCD_Mensaje
0020   3010           00073         movlw   Carga500ms              ; Debe estar 500 ms encendido.
0021   008C           00074         movwf   Registro50ms
0022   2826           00075         goto    FinVisualiza
0023                  00076 ApagaMensaje
0023   20EA           00077         call    LCD_LineaEnBlanco       ; Visualiza una línea en blanco.
0024   3006           00078         movlw   Carga300ms              ; Debe estar 300 ms apagado.
0025   008C           00079         movwf   Registro50ms
0026                  00080 FinVisualiza
0026   0008           00081         return
                      00082 
                      00083 ; "Mensajes" ----------------------------------------------------------------------------
                      00084 ;
0027                  00085 Mensajes
0027   0782           00086         addwf   PCL,F
0028                  00087 MensajeFijo
0028   3420 3420 3420 00088         DT "    Estudia", 0x00
       3420 3445 3473 
       3474 3475 3464 
       3469 3461 3400 
0034                  00089 MensajeIntermitente
0034   3420 3420 3445 00090         DT "  ELECTRONICA", 0x00
       344C 3445 3443 
       3454 3452 344F 
       344E 3449 3443 
       3441 3400 
                      00091 
                      00092         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  0000000E            00021         R_ContA                         ; Contadores para los retardos.
  0000000F            00022         R_ContB
  00000010            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0042                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0042   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0043   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0044   0000           00035         nop                             ; Aporta 1 ciclo máquina.
0045   0000           00036         nop                             ; Aporta 1 ciclo máquina.
0046   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0047                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0047   0000           00039         nop                             ; Aporta 1 ciclo máquina.
0048                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
0048   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
0049                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
0049   0000           00046         nop                             ; Aporta 1 ciclo máquina.
004A   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
004B   2855           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
004C                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
004C   0000           00050         nop                             ; Aporta 1 ciclo máquina.
004D   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
004E   2855           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
004F                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
004F   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0050   2855           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0051                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0051   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0052   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0053   2855           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0054                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
0054   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0055                  00066 RetardoMicros
0055   008E           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
0056                  00068 Rmicros_Bucle
0056   0B8E           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0057   2856           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
0058   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
0059                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
0059   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
005A   2868           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
005B                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
005B   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
005C   2868           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
005D                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
005D   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
005E   2868           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
005F                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
005F   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0060   2868           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0061                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0061   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0062   2868           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0063                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0063   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0064   2868           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0065                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0065   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0066   2868           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0067                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0067   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00110 ;
0068                  00111 Retardos_ms
0068   008F           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
0069                  00113 R1ms_BucleExterno
0069   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
006A   008E           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
006B                  00116 R1ms_BucleInterno
006B   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
006C   0B8E           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
006D   286B           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
006E   0B8F           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
006F   2869           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0070   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0071                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0071   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0072   287C           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0073                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0073   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0074   287C           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0075                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0075   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0076   287C           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0077                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
0077   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0078   287C           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0079                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
0079   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
007A   287C           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
007B                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
007B   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
007C                  00160 Retardo_1Decima
007C   0090           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
007D                  00162 R1Decima_BucleExterno2
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007D   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
007E   008F           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
007F                  00165 R1Decima_BucleExterno
007F   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0080   008E           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0081                  00168 R1Decima_BucleInterno          
0081   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0082   0B8E           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0083   2881           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0084   0B8F           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0085   287F           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0086   0B90           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0087   287D           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
0088   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00093         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000011            00025         LCD_Dato
  00000012            00026         LCD_GuardaDato
  00000013            00027         LCD_GuardaTRISB
  00000014            00028         LCD_Auxiliar1
  00000015            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
0089                  00045 LCD_Inicializa
0089   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
008A   1005           00047         bcf     LCD_PinRS               ; R/W y E.
008B   1105           00048         bcf     LCD_PinEnable
008C   1085           00049         bcf     LCD_PinRW
008D   1283           00050         bcf     STATUS,RP0
008E   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
008F   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
0090   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0091   205F           00055         call    Retardo_20ms
0092   3030           00056         movlw   b'00110000'     
0093   20A1           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0094   2063           00058         call    Retardo_5ms     
0095   3030           00059         movlw   b'00110000'     
0096   20A1           00060         call    LCD_EscribeLCD
0097   204C           00061         call    Retardo_200micros
0098   3030           00062         movlw   b'00110000'     
0099   20A1           00063         call    LCD_EscribeLCD
009A   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
009B   20A1           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
009C   20CA           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
009D   20C8           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
009E   20C6           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
009F   20B8           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00A0   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00A1                  00082 LCD_EscribeLCD
00A1   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00A2   0091           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00A3   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00A4   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00A5   0491           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00A6   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00A7   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00A8   0093           00091         movwf   LCD_GuardaTRISB
00A9   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00AA   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00AB   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00AC   0811           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00AD   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00AE   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00AF   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00B0   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00B1   2065           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00B2   2051           00102         call    Retardo_50micros
00B3   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00B4   0813           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00B5   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00B6   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00B7   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00B8                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00B8   3006           00114         movlw   b'00000110'
00B9   28CB           00115         goto    LCD_EnviaComando
00BA                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00BA   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00BB   28CB           00118         goto    LCD_EnviaComando
00BC                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00BC   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00BD   28CB           00121         goto    LCD_EnviaComando
00BE                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00BE   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00BF   28CB           00124         goto    LCD_EnviaComando        ; registro W.
00C0                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00C0   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00C1   28CB           00127         goto    LCD_EnviaComando        ; registro W.
00C2                  00128 LCD_OFF                         ; Pantalla apagada.
00C2   3008           00129         movlw   b'00001000'
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C3   28CB           00130         goto    LCD_EnviaComando
00C4                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00C4   300E           00132         movlw   b'00001110'
00C5   28CB           00133         goto    LCD_EnviaComando
00C6                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00C6   300C           00135         movlw   b'00001100'
00C7   28CB           00136         goto    LCD_EnviaComando
00C8                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00C8   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
00C9   28CB           00139         goto    LCD_EnviaComando
00CA                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00CA   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
00CB                  00151 LCD_EnviaComando
00CB   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00CC   28CF           00153         goto    LCD_Envia
00CD                  00154 LCD_Caracter
00CD   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00CE   20D4           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00CF                  00157 LCD_Envia
00CF   0092           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00D0   20A1           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00D1   0E12           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
00D2   20A1           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00D3   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00D4                  00177 LCD_CodigoCGROM
00D4   0091           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00D5                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00D5   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00D6   1D03           00181         btfss   STATUS,Z
00D7   28DB           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D8   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00D9   0091           00184         movwf   LCD_Dato
00DA   28E8           00185         goto    LCD_FinCGROM
00DB                  00186 LCD_EnheMayuscula
00DB   0811           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00DC   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00DD   1D03           00189         btfss   STATUS,Z
00DE   28E2           00190         goto    LCD_Grado               ; No es "Ñ".
00DF   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00E0   0091           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00E1   28E8           00193         goto    LCD_FinCGROM    
00E2                  00194 LCD_Grado
00E2   0811           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00E3   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00E4   1D03           00197         btfss   STATUS,Z
00E5   28E8           00198         goto    LCD_FinCGROM            ; No es "º".
00E6   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00E7   0091           00200         movwf   LCD_Dato
00E8                  00201 LCD_FinCGROM
00E8   0811           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
00E9   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
00EA                  00209 LCD_LineaEnBlanco
00EA   3010           00210         movlw   LCD_CaracteresPorLinea
00EB   28F1           00211         goto    LCD_EnviaBlancos
00EC                  00212 LCD_UnEspacioBlanco
00EC   3001           00213         movlw   .1
00ED   28F1           00214         goto    LCD_EnviaBlancos
00EE                  00215 LCD_DosEspaciosBlancos
00EE   3002           00216         movlw   .2
00EF   28F1           00217         goto    LCD_EnviaBlancos
00F0                  00218 LCD_TresEspaciosBlancos
00F0   3003           00219         movlw   .3
00F1                  00220 LCD_EnviaBlancos
00F1   0094           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00F2                  00222 LCD_EnviaOtroBlanco     
00F2   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
00F3   20CD           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00F4   0B94           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00F5   28F2           00226         goto    LCD_EnviaOtroBlanco
00F6   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
00F7                  00240 LCD_Byte
00F7   0095           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00F8   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
00F9   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
00FA   28FF           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
00FB   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
00FC   20CD           00246         call    LCD_Caracter
00FD   2901           00247         goto    LCD_VisualizaBajo
                      00248 
00FE                  00249 LCD_ByteCompleto
00FE   0095           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00FF                  00251 LCD_VisualizaAlto
00FF   0E15           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0100   2102           00253         call    LCD_Nibble              ; Lo visualiza.
0101                  00254 LCD_VisualizaBajo
0101   0815           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
0102                  00266 LCD_Nibble
0102   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
0103   0094           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
0104   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
0105   1C03           00270         btfss   STATUS,C        
0106   290A           00271         goto    LCD_EnviaByteLetra
0107   0814           00272         movf    LCD_Auxiliar1,W
0108   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
0109   290C           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
010A                  00275 LCD_EnviaByteLetra
010A   0814           00276         movf    LCD_Auxiliar1,W
010B   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
010C                  00278 LCD_FinVisualizaDigito
010C   28CD           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00094         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  00000016            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  00000017            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
010D                  00042 LCD_Mensaje
010D   0096           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
010E   3027           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
010F   0296           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
0110   0396           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0111                  00047 LCD_VisualizaOtroCaracter
0111   0816           00048         movf    LCD_ApuntaCaracter,W
0112   2027           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
0113   0097           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0114   0897           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0115   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0116   291A           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
0117                  00054 LCD_NoUltimoCaracter
0117   20CD           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0118   0A96           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
0119   2911           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
011A                  00058 LCD_FinMensaje
011A   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  00000018            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
011B                  00073 LCD_MensajeMovimiento
011B   0096           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
011C   3027           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
011D   0296           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
011E   0396           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
011F                  00078 LCD_PrimeraPosicion
011F   0198           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
0120   20C8           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
0121                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
0121   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
0122   0218           00083         subwf   LCD_CursorPosicion,W
0123   1D03           00084         btfss   STATUS,Z
0124   292A           00085         goto    LCD_NoEsFinalLinea
0125                  00086 LCD_EsFinalLinea
0125   2059           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
0126   2059           00088         call    Retardo_200ms
0127   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
0128   0296           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
0129   291F           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
012A                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
012A   0816           00093         movf    LCD_ApuntaCaracter,W
012B   2027           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
012C   0097           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
012D   0897           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
012E   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
012F   2934           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
0130                  00099 LCD_NoUltimoCaracter2
0130   20CD           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0131   0A98           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
0132   0A96           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
0133   2921           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
0134                  00105 LCD_FinMovimiento                       ; de la línea.
0134   0008           00106         return                          ; Vuelve al programa principal.
                      00095         END
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

ApagaMensaje                      00000023
C                                 00000000
Carga300ms                        00000006
Carga500ms                        00000010
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
FinInterrupcion                   00000019
FinVisualiza                      00000026
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000005
Intermitencia                     0000000D
LCD_2Lineas4Bits5x7               000000CA
LCD_ApuntaCaracter                00000016
LCD_Auxiliar1                     00000014
LCD_Auxiliar2                     00000015
LCD_Borra                         000000C8
LCD_BusDatos                      PORTB
LCD_Byte                          000000F7
LCD_ByteCompleto                  000000FE
LCD_Caracter                      000000CD
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000D4
LCD_CursorIncr                    000000B8
LCD_CursorOFF                     000000C6
LCD_CursorON                      000000C4
LCD_CursorPosicion                00000018
LCD_Dato                          00000011
LCD_DosEspaciosBlancos            000000EE
LCD_EnheMayuscula                 000000DB
LCD_EnheMinuscula                 000000D5
LCD_Envia                         000000CF
LCD_EnviaBlancos                  000000F1
LCD_EnviaByteLetra                0000010A
LCD_EnviaComando                  000000CB
LCD_EnviaOtroBlanco               000000F2
LCD_EsFinalLinea                  00000125
LCD_EscribeLCD                    000000A1
LCD_FinCGROM                      000000E8
LCD_FinMensaje                    0000011A
LCD_FinMovimiento                 00000134
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

LCD_FinVisualizaDigito            0000010C
LCD_Grado                         000000E2
LCD_GuardaDato                    00000012
LCD_GuardaTRISB                   00000013
LCD_Inicializa                    00000089
LCD_Linea1                        000000BA
LCD_Linea2                        000000BC
LCD_LineaEnBlanco                 000000EA
LCD_Mensaje                       0000010D
LCD_MensajeMovimiento             0000011B
LCD_Nibble                        00000102
LCD_NoEsFinalLinea                0000012A
LCD_NoUltimoCaracter              00000117
LCD_NoUltimoCaracter2             00000130
LCD_OFF                           000000C2
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000BE
LCD_PosicionLinea2                000000C0
LCD_PrimeraPosicion               0000011F
LCD_TresEspaciosBlancos           000000F0
LCD_UnEspacioBlanco               000000EC
LCD_ValorCaracter                 00000017
LCD_VisualizaAlto                 000000FF
LCD_VisualizaBajo                 00000101
LCD_VisualizaCaracter             00000121
LCD_VisualizaOtroCaracter         00000111
MensajeFijo                       00000028
MensajeIntermitente               00000034
Mensajes                          00000027
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000012
R1Decima_BucleExterno             0000007F
R1Decima_BucleExterno2            0000007D
R1Decima_BucleInterno             00000081
R1ms_BucleExterno                 00000069
R1ms_BucleInterno                 0000006B
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

RP1                               00000006
R_ContA                           0000000E
R_ContB                           0000000F
R_ContC                           00000010
Registro50ms                      0000000C
RetardoMicros                     00000055
Retardo_100micros                 0000004F
Retardo_100ms                     0000005B
Retardo_10micros                  00000042
Retardo_10ms                      00000061
Retardo_10s                       00000073
Retardo_1Decima                   0000007C
Retardo_1ms                       00000067
Retardo_1s                        00000079
Retardo_200micros                 0000004C
Retardo_200ms                     00000059
Retardo_20micros                  00000054
Retardo_20ms                      0000005F
Retardo_20s                       00000071
Retardo_2ms                       00000065
Retardo_2s                        00000077
Retardo_4micros                   00000048
Retardo_500micros                 00000049
Retardo_500ms                     0000007B
Retardo_50micros                  00000051
Retardo_50ms                      0000005D
Retardo_5micros                   00000047
Retardo_5ms                       00000063
Retardo_5s                        00000075
Retardos_ms                       00000068
Rmicros_Bucle                     00000056
STATUS                            00000003
ServicioInterrupcion              00000013
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0_Carga50ms                    FFFFFF3D
TRISA                             00000085
TRISB                             00000086
Visualiza                         0000001B
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
MPASM 03.50 Released                           INT_T0I_06.ASM   10-10-2003  13:17:27         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXX-----------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   306
Program Memory Words Free:   718


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

