MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*********************************** Int_INT_08.asm *************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Cada vez que se oprima el pulsador conectado a la línea RB0/INT, se pondrá intermitente
                      00010 ; o no un mensaje publicitario que aparece en la pantalla del módulo LCD.
                      00011 ; En la línea superior aparecerá "Mensaje FIJO" o "M. INTERMITENTE".
                      00012 ; En la inferior un mensaje publicitario fijo o intermitente según corresponda.
                      00013 ;
                      00014 ; ZONA DE DATOS **********************************************************************
                      00015 
2007   3FF1           00016         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00017         LIST       P=16F84A
                      00018         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00019 
                      00020         CBLOCK  0x0C
  0000000C            00021         Intermitencia                   ; Si está a 0 el mensaje permanece fijo.
                      00022         ENDC                            ; En caso contrario se pone en intermitencia.
                      00023 
                      00024 #DEFINE   Pulsador      PORTB,0
                      00025 
                      00026 ; ZONA DE CÓDIGOS ********************************************************************
                      00027 
0000                  00028         ORG     0
0000   2805           00029         goto    Inicio
0004                  00030         ORG     4
0004   281C           00031         goto    ServicioInterrupcion
0005                  00032 Inicio
0005   20AD           00033         call    LCD_Inicializa
0006   1683           00034         bsf     STATUS,RP0
0007   1406           00035         bsf     Pulsador
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0008   1381           00036         bcf     OPTION_REG,NOT_RBPU
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0009   1301           00037         bcf     OPTION_REG,INTEDG
000A   1283           00038         bcf     STATUS,RP0
000B   018C           00039         clrf    Intermitencia           ; En principio mensaje fijo.
000C   3090           00040         movlw   b'10010000'
000D   008B           00041         movwf   INTCON
000E                  00042 Principal
000E   20DE           00043         call    LCD_Linea1
000F   3054           00044         movlw   MensajeFijo             ; En principio supone mensaje fijo
0010   180C           00045         btfsc   Intermitencia,0         ; Testea cualquier bit.
0011   3044           00046         movlw   MensajeIntermitencia    ; Está en intermitencia.
0012   2131           00047         call    LCD_Mensaje
0013   20E0           00048         call    LCD_Linea2              ; Visualiza el mensaje publicitario en la
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0014   3033           00049         movlw   MensajePublicitario     ; línea 2.
0015   2131           00050         call    LCD_Mensaje
0016   207D           00051         call    Retardo_200ms
0017   20E0           00052         call    LCD_Linea2              ; Se sitúa de nuevo al inicio de la línea 2.
0018   180C           00053         btfsc   Intermitencia,0         ; Si está a 0 no se produce la intermitencia.
0019   210E           00054         call    LCD_LineaEnBlanco       ; Borra la segunda línea para producir la 
001A   207D           00055         call    Retardo_200ms           ; intermitencia.
001B   280E           00056         goto    Principal
                      00057 
                      00058 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
                      00059 ;
                      00060         CBLOCK  
  0000000D            00061         Guarda_W
  0000000E            00062         Guarda_STATUS
  0000000F            00063         Guarda_R_ContA
  00000010            00064         Guarda_R_ContB
                      00065         ENDC
                      00066 
001C                  00067 ServicioInterrupcion                    ; Conmuta el valor "Intermitencia",
001C   008D           00068         movwf   Guarda_W                ; Guarda W y STATUS.
001D   0E03           00069         swapf   STATUS,W                ; Ya que "movf STATUS,W", corrompe el bit Z.
001E   008E           00070         movwf   Guarda_STATUS
001F   1283           00071         bcf     STATUS,RP0              ; Para asegurarse que trabaja con el banco 0.
0020   0811           00072         movf    R_ContA,W               ; Guarda los registros utilizados en esta 
0021   008F           00073         movwf   Guarda_R_ContA          ; subrutina y también en la principal.
0022   0812           00074         movf    R_ContB,W
0023   0090           00075         movwf   Guarda_R_ContB
                      00076 ;
0024   2083           00077         call    Retardo_20ms
0025   1806           00078         btfsc   Pulsador                ; Comprueba si es un rebote.
0026   2828           00079         goto    FinInterrupcion         ; Era un rebote y por tanto sale.
0027   098C           00080         comf    Intermitencia,F         ; Complementa su estado.
0028                  00081 FinInterrupcion
0028   0E0E           00082         swapf   Guarda_STATUS,W         ; Restaura el STATUS.
0029   0083           00083         movwf   STATUS
002A   0E8D           00084         swapf   Guarda_W,F              ; Restaura W como estaba antes de producirse
002B   0E0D           00085         swapf   Guarda_W,W              ; interrupción.
002C   080F           00086         movf    Guarda_R_ContA,W        ; Restaura los registros utilizados en esta 
002D   0091           00087         movwf   R_ContA                 ; subrutina y también en la principal.
002E   0810           00088         movf    Guarda_R_ContB,W
002F   0092           00089         movwf   R_ContB
0030   108B           00090         bcf     INTCON,INTF
0031   0009           00091         retfie
                      00092 
                      00093 ; "Mensajes" ----------------------------------------------------------------------------
                      00094 
0032                  00095 Mensajes
0032   0782           00096         addwf   PCL,F
0033                  00097 MensajePublicitario
0033   3445 3464 3469 00098         DT "Editorial  Ra-Ma", 0x00
       3474 346F 3472 
       3469 3461 346C 
       3420 3420 3452 
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3461 342D 344D 
       3461 3400 
0044                  00099 MensajeIntermitencia
0044   344D 342E 3420 00100         DT "M. INTERMITENTE", 0x00
       3449 344E 3454 
       3445 3452 344D 
       3449 3454 3445 
       344E 3454 3445 
       3400 
0054                  00101 MensajeFijo
0054   3420 3420 344D 00102         DT "  Mensaje FIJO   ", 0x00
       3465 346E 3473 
       3461 346A 3465 
       3420 3446 3449 
       344A 344F 3420 
       3420 3420 3400 
                      00103 ;
                      00104         INCLUDE   <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000011            00021         R_ContA                         ; Contadores para los retardos.
  00000012            00022         R_ContB
  00000013            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0066                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0066   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0067   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0068   0000           00035         nop                             ; Aporta 1 ciclo máquina.
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0069   0000           00036         nop                             ; Aporta 1 ciclo máquina.
006A   0000           00037         nop                             ; Aporta 1 ciclo máquina.
006B                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
006B   0000           00039         nop                             ; Aporta 1 ciclo máquina.
006C                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
006C   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
006D                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
006D   0000           00046         nop                             ; Aporta 1 ciclo máquina.
006E   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
006F   2879           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0070                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
0070   0000           00050         nop                             ; Aporta 1 ciclo máquina.
0071   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0072   2879           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0073                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0073   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0074   2879           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0075                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0075   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0076   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0077   2879           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0078                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
0078   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0079                  00066 RetardoMicros
0079   0091           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
007A                  00068 Rmicros_Bucle
007A   0B91           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
007B   287A           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
007C   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
007D                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
007D   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
007E   288C           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
007F                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
007F   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0080   288C           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0081                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0081   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0082   288C           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0083                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0083   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0084   288C           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0085                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0085   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0086   288C           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0087                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0087   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0088   288C           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0089                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0089   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
008A   288C           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
008B                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
008B   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
008C                  00111 Retardos_ms
008C   0092           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
008D                  00113 R1ms_BucleExterno
008D   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
008E   0091           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
008F                  00116 R1ms_BucleInterno
008F   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
0090   0B91           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
0091   288F           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
0092   0B92           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0093   288D           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0094   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0095                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0095   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0096   28A0           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0097                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0097   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0098   28A0           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0099                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0099   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
009A   28A0           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
009B                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
009B   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
009C   28A0           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
009D                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
009D   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
009E   28A0           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
009F                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
009F   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
00A0                  00160 Retardo_1Decima
00A0   0093           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
00A1                  00162 R1Decima_BucleExterno2
00A1   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
00A2   0092           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
00A3                  00165 R1Decima_BucleExterno
00A3   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
00A4   0091           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
00A5                  00168 R1Decima_BucleInterno          
00A5   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
00A6   0B91           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
00A7   28A5           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
00A8   0B92           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
00A9   28A3           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
00AA   0B93           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00AB   28A1           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
00AC   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00105         INCLUDE   <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000014            00025         LCD_Dato
  00000015            00026         LCD_GuardaDato
  00000016            00027         LCD_GuardaTRISB
  00000017            00028         LCD_Auxiliar1
  00000018            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
00AD                  00045 LCD_Inicializa
00AD   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
00AE   1005           00047         bcf     LCD_PinRS               ; R/W y E.
00AF   1105           00048         bcf     LCD_PinEnable
00B0   1085           00049         bcf     LCD_PinRW
00B1   1283           00050         bcf     STATUS,RP0
00B2   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
00B3   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
00B4   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00B5   2083           00055         call    Retardo_20ms
00B6   3030           00056         movlw   b'00110000'     
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B7   20C5           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
00B8   2087           00058         call    Retardo_5ms     
00B9   3030           00059         movlw   b'00110000'     
00BA   20C5           00060         call    LCD_EscribeLCD
00BB   2070           00061         call    Retardo_200micros
00BC   3030           00062         movlw   b'00110000'     
00BD   20C5           00063         call    LCD_EscribeLCD
00BE   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00BF   20C5           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
00C0   20EE           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
00C1   20EC           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
00C2   20EA           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00C3   20DC           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00C4   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00C5                  00082 LCD_EscribeLCD
00C5   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00C6   0094           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00C7   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00C8   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00C9   0494           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00CA   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00CB   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00CC   0096           00091         movwf   LCD_GuardaTRISB
00CD   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00CE   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00CF   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00D0   0814           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00D1   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00D2   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00D3   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00D4   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00D5   2089           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00D6   2075           00102         call    Retardo_50micros
00D7   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00D8   0816           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00D9   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00DA   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00DB   0008           00107         return
                      00108 
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00DC                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00DC   3006           00114         movlw   b'00000110'
00DD   28EF           00115         goto    LCD_EnviaComando
00DE                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00DE   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00DF   28EF           00118         goto    LCD_EnviaComando
00E0                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00E0   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00E1   28EF           00121         goto    LCD_EnviaComando
00E2                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00E2   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00E3   28EF           00124         goto    LCD_EnviaComando        ; registro W.
00E4                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00E4   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00E5   28EF           00127         goto    LCD_EnviaComando        ; registro W.
00E6                  00128 LCD_OFF                         ; Pantalla apagada.
00E6   3008           00129         movlw   b'00001000'
00E7   28EF           00130         goto    LCD_EnviaComando
00E8                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00E8   300E           00132         movlw   b'00001110'
00E9   28EF           00133         goto    LCD_EnviaComando
00EA                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00EA   300C           00135         movlw   b'00001100'
00EB   28EF           00136         goto    LCD_EnviaComando
00EC                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00EC   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
00ED   28EF           00139         goto    LCD_EnviaComando
00EE                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00EE   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
00EF                  00151 LCD_EnviaComando
00EF   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00F0   28F3           00153         goto    LCD_Envia
00F1                  00154 LCD_Caracter
00F1   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00F2   20F8           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00F3                  00157 LCD_Envia
00F3   0095           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00F4   20C5           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00F5   0E15           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F6   20C5           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00F7   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00F8                  00177 LCD_CodigoCGROM
00F8   0094           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00F9                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00F9   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00FA   1D03           00181         btfss   STATUS,Z
00FB   28FF           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00FC   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00FD   0094           00184         movwf   LCD_Dato
00FE   290C           00185         goto    LCD_FinCGROM
00FF                  00186 LCD_EnheMayuscula
00FF   0814           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0100   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
0101   1D03           00189         btfss   STATUS,Z
0102   2906           00190         goto    LCD_Grado               ; No es "Ñ".
0103   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
0104   0094           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
0105   290C           00193         goto    LCD_FinCGROM    
0106                  00194 LCD_Grado
0106   0814           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0107   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
0108   1D03           00197         btfss   STATUS,Z
0109   290C           00198         goto    LCD_FinCGROM            ; No es "º".
010A   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
010B   0094           00200         movwf   LCD_Dato
010C                  00201 LCD_FinCGROM
010C   0814           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
010D   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
010E                  00209 LCD_LineaEnBlanco
010E   3010           00210         movlw   LCD_CaracteresPorLinea
010F   2915           00211         goto    LCD_EnviaBlancos
0110                  00212 LCD_UnEspacioBlanco
0110   3001           00213         movlw   .1
0111   2915           00214         goto    LCD_EnviaBlancos
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0112                  00215 LCD_DosEspaciosBlancos
0112   3002           00216         movlw   .2
0113   2915           00217         goto    LCD_EnviaBlancos
0114                  00218 LCD_TresEspaciosBlancos
0114   3003           00219         movlw   .3
0115                  00220 LCD_EnviaBlancos
0115   0097           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
0116                  00222 LCD_EnviaOtroBlanco     
0116   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
0117   20F1           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
0118   0B97           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
0119   2916           00226         goto    LCD_EnviaOtroBlanco
011A   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
011B                  00240 LCD_Byte
011B   0098           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
011C   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
011D   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
011E   2923           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
011F   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0120   20F1           00246         call    LCD_Caracter
0121   2925           00247         goto    LCD_VisualizaBajo
                      00248 
0122                  00249 LCD_ByteCompleto
0122   0098           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0123                  00251 LCD_VisualizaAlto
0123   0E18           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0124   2126           00253         call    LCD_Nibble              ; Lo visualiza.
0125                  00254 LCD_VisualizaBajo
0125   0818           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
0126                  00266 LCD_Nibble
0126   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0127   0097           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
0128   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
0129   1C03           00270         btfss   STATUS,C        
012A   292E           00271         goto    LCD_EnviaByteLetra
012B   0817           00272         movf    LCD_Auxiliar1,W
012C   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
012D   2930           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
012E                  00275 LCD_EnviaByteLetra
012E   0817           00276         movf    LCD_Auxiliar1,W
012F   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0130                  00278 LCD_FinVisualizaDigito
0130   28F1           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00106         INCLUDE   <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  00000019            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  0000001A            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
0131                  00042 LCD_Mensaje
0131   0099           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
0132   3032           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0133   0299           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
0134   0399           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0135                  00047 LCD_VisualizaOtroCaracter
0135   0819           00048         movf    LCD_ApuntaCaracter,W
0136   2032           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
0137   009A           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0138   089A           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0139   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
013A   293E           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
013B                  00054 LCD_NoUltimoCaracter
013B   20F1           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
013C   0A99           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
013D   2935           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
013E                  00058 LCD_FinMensaje
013E   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  0000001B            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
013F                  00073 LCD_MensajeMovimiento
013F   0099           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0140   3032           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0141   0299           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
0142   0399           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0143                  00078 LCD_PrimeraPosicion
0143   019B           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
0144   20EC           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
0145                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
0145   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
0146   021B           00083         subwf   LCD_CursorPosicion,W
0147   1D03           00084         btfss   STATUS,Z
0148   294E           00085         goto    LCD_NoEsFinalLinea
0149                  00086 LCD_EsFinalLinea
0149   207D           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
014A   207D           00088         call    Retardo_200ms
014B   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
014C   0299           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
014D   2943           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
014E                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

014E   0819           00093         movf    LCD_ApuntaCaracter,W
014F   2032           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0150   009A           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0151   089A           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0152   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0153   2958           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
0154                  00099 LCD_NoUltimoCaracter2
0154   20F1           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0155   0A9B           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
0156   0A99           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
0157   2945           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
0158                  00105 LCD_FinMovimiento                       ; de la línea.
0158   0008           00106         return                          ; Vuelve al programa principal.
                      00107         END
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
FinInterrupcion                   00000028
GIE                               00000007
Guarda_R_ContA                    0000000F
Guarda_R_ContB                    00000010
Guarda_STATUS                     0000000E
Guarda_W                          0000000D
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000005
Intermitencia                     0000000C
LCD_2Lineas4Bits5x7               000000EE
LCD_ApuntaCaracter                00000019
LCD_Auxiliar1                     00000017
LCD_Auxiliar2                     00000018
LCD_Borra                         000000EC
LCD_BusDatos                      PORTB
LCD_Byte                          0000011B
LCD_ByteCompleto                  00000122
LCD_Caracter                      000000F1
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000F8
LCD_CursorIncr                    000000DC
LCD_CursorOFF                     000000EA
LCD_CursorON                      000000E8
LCD_CursorPosicion                0000001B
LCD_Dato                          00000014
LCD_DosEspaciosBlancos            00000112
LCD_EnheMayuscula                 000000FF
LCD_EnheMinuscula                 000000F9
LCD_Envia                         000000F3
LCD_EnviaBlancos                  00000115
LCD_EnviaByteLetra                0000012E
LCD_EnviaComando                  000000EF
LCD_EnviaOtroBlanco               00000116
LCD_EsFinalLinea                  00000149
LCD_EscribeLCD                    000000C5
LCD_FinCGROM                      0000010C
LCD_FinMensaje                    0000013E
LCD_FinMovimiento                 00000158
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

LCD_FinVisualizaDigito            00000130
LCD_Grado                         00000106
LCD_GuardaDato                    00000015
LCD_GuardaTRISB                   00000016
LCD_Inicializa                    000000AD
LCD_Linea1                        000000DE
LCD_Linea2                        000000E0
LCD_LineaEnBlanco                 0000010E
LCD_Mensaje                       00000131
LCD_MensajeMovimiento             0000013F
LCD_Nibble                        00000126
LCD_NoEsFinalLinea                0000014E
LCD_NoUltimoCaracter              0000013B
LCD_NoUltimoCaracter2             00000154
LCD_OFF                           000000E6
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000E2
LCD_PosicionLinea2                000000E4
LCD_PrimeraPosicion               00000143
LCD_TresEspaciosBlancos           00000114
LCD_UnEspacioBlanco               00000110
LCD_ValorCaracter                 0000001A
LCD_VisualizaAlto                 00000123
LCD_VisualizaBajo                 00000125
LCD_VisualizaCaracter             00000145
LCD_VisualizaOtroCaracter         00000135
MensajeFijo                       00000054
MensajeIntermitencia              00000044
MensajePublicitario               00000033
Mensajes                          00000032
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         0000000E
Pulsador                          PORTB,0
R1Decima_BucleExterno             000000A3
R1Decima_BucleExterno2            000000A1
R1Decima_BucleInterno             000000A5
R1ms_BucleExterno                 0000008D
R1ms_BucleInterno                 0000008F
RBIE                              00000003
RBIF                              00000000
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000011
R_ContB                           00000012
R_ContC                           00000013
RetardoMicros                     00000079
Retardo_100micros                 00000073
Retardo_100ms                     0000007F
Retardo_10micros                  00000066
Retardo_10ms                      00000085
Retardo_10s                       00000097
Retardo_1Decima                   000000A0
Retardo_1ms                       0000008B
Retardo_1s                        0000009D
Retardo_200micros                 00000070
Retardo_200ms                     0000007D
Retardo_20micros                  00000078
Retardo_20ms                      00000083
Retardo_20s                       00000095
Retardo_2ms                       00000089
Retardo_2s                        0000009B
Retardo_4micros                   0000006C
Retardo_500micros                 0000006D
Retardo_500ms                     0000009F
Retardo_50micros                  00000075
Retardo_50ms                      00000081
Retardo_5micros                   0000006B
Retardo_5ms                       00000087
Retardo_5s                        00000099
Retardos_ms                       0000008C
Rmicros_Bucle                     0000007A
STATUS                            00000003
ServicioInterrupcion              0000001C
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
MPASM 03.50 Released                           INT_INT_08.ASM   10-10-2003  13:00:44         PAGE 18


SYMBOL TABLE
  LABEL                             VALUE 

_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXX------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   342
Program Memory Words Free:   682


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     3 reported,     0 suppressed

