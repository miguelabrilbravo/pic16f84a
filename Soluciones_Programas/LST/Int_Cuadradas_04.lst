MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************ Int_Cuadradas_04 ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Ejemplo de control del ciclo de trabajo.
                      00010 ;
                      00011 ; Por la línea 3 del Puerto B se genera una onda cuadrada de frecuencia constante a 100 Hz y
                      00012 ; ciclo de trabajo variable desde 0% a 100%. Es decir, el tiempo en alto varía entre  0 µs (0%)
                      00013 ; y 10000 µs (100%).
                      00014 ; El valor del ciclo de trabajo cambia mediante activación del pulsador conectado al pin
                      00015 ; 7 del Puerto B, de la siguiente forma:
                      00016 ;
                      00017 ;       PULSACIÓN       DC (%)             SEMIPERIODO ALTO        SEMIPERIODO BAJO
                      00018 ;       ---------       -------         ----------------------  -----------------------
                      00019 ;       Inicial          0 %               0 µs =   0 x 100 µs  10000 µs = 100 x 100 µs
                      00020 ;       Primera         10 %            1000 µs =  10 x 100 µs   9000 µs =  90 x 100 µs
                      00021 ;       Segunda         20 %            2000 µs =  20 x 100 µs   8000 µs =  80 x 100 µs
                      00022 ;       Tercera         30 %            3000 µs =  30 x 100 µs   7000 µs =  70 x 100 µs
                      00023 ;       Cuarta          40 %            4000 µs =  40 x 100 µs   6000 µs =  60 x 100 µs
                      00024 ;       Quinta          50 %            5000 µs =  50 x 100 µs   5000 µs =  50 x 100 µs
                      00025 ;       Sexta           60 %            6000 µs =  60 x 100 µs   4000 µs =  40 x 100 µs
                      00026 ;       Septima         70 %            7000 µs =  70 x 100 µs   3000 µs =  30 x 100 µs
                      00027 ;       Octava          80 %            8000 µs =  80 x 100 µs   2000 µs =  20 x 100 µs
                      00028 ;       Novena          90 %            9000 µs =  90 x 100 µs   1000 µs =  10 x 100 µs
                      00029 ;       Décima          100 %           10000µs = 100 x 100 µs      0 µs =   0 x 100 µs 
                      00030 ;
                      00031 ; Al conectarlo por primera vez se genera un ciclo de trabajo de 0%, al presionar el pulsador
                      00032 ; cambia a 10%, al actuar una segunda vez cambia al 20%, y así sucesivamente.
                      00033 ; El módulo LCD visualiza el ciclo de trabajo vigente en cada momento.
                      00034 ;
                      00035 ; ZONA DE DATOS **********************************************************************
                      00036 
2007   3FF1           00037         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00038         LIST       P=16F84A
                      00039         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00040 
                      00041         CBLOCK  0x0C
  0000000C            00042         CicloTrabajo                    ; Ciclo de trabajo deseado.
  0000000D            00043         Timer0_ContadorA                ; Contador auxiliar.
                      00044         ENDC
                      00045 
  FFFFFFA7            00046 TMR0_Carga      EQU     -d'89'          ; El semiperiodo patrón va a ser de 100 µs.
  0000000A            00047 IncrementoDC    EQU     d'10'           ; Incremento de cada paso del ciclo de trabajo.
                      00048 #DEFINE  Salida PORTB,3
                      00049 #DEFINE  Pulsador       PORTB,7
                      00050 
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051 ; ZONA DE CÓDIGOS ********************************************************************
                      00052 
0000                  00053         ORG     0
0000   2817           00054         goto    Inicio
0004                  00055         ORG     .4
0004   2822           00056         goto    ServicioInterrupcion
                      00057 
0005                  00058 Mensajes
0005   0782           00059         addwf   PCL,F
0006                  00060 Mensaje_DC
0006   3444 3475 3474 00061         DT "Duty Cycle: ", 0x00
       3479 3420 3443 
       3479 3463 346C 
       3465 343A 3420 
       3400 
0013                  00062 Mensaje_TantoPorCiento
0013   3425 3420 3420 00063         DT "%  ", 0x00
       3400 
                      00064 
0017   1683           00065 Inicio  bsf     STATUS,RP0
0018   1186           00066         bcf     Salida
0019   1786           00067         bsf     Pulsador
001A   3008           00068         movlw   b'00001000'             ; TMR0 sin prescaler.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
001B   0081           00069         movwf   OPTION_REG
001C   1283           00070         bcf     STATUS,RP0
001D   2090           00071         call    LCD_Inicializa
001E   2035           00072         call    DC_CeroPorCiento        ; Inicializa con un DC = 0%, por tanto salida.
001F   3088           00073         movlw   b'10001000'             ; en bajo permanentemente.
0020   008B           00074         movwf   INTCON                  ; Habilita solo interrupción RBI.
0021                  00075 Principal
0021   2821           00076         goto    Principal
                      00077 
                      00078 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
                      00079 ;
0022                  00080 ServicioInterrupcion
0022   180B           00081         btfsc   INTCON,RBIF             ; ¿Interrupción por cambio en el Puerto B?.
0023   2029           00082         call    Pulsador_Interrupcion
0024   190B           00083         btfsc   INTCON,T0IF             ; ¿Interrupción por desbordamiento del TMR0?.
0025   2044           00084         call    Timer0_Interrupcion
0026   100B           00085         bcf     INTCON,RBIF             ; Limpia flags de reconocimiento.
0027   110B           00086         bcf     INTCON,T0IF
0028   0009           00087         retfie
                      00088 
                      00089 ; Subrutina "Pulsador_Interrupcion" -----------------------------------------------------
                      00090 ;
                      00091 ; Subrutina de atención a la interrupción por cambio en la línea RB7 donde se ha
                      00092 ; conectado un pulsador.
                      00093 ; Incrementa el registro (CicloTrabajo), desde 0 (que corresponde a un DC = 0%
                      00094 ; hasta d'100' (que corresponde a un ciclo de trabajo del 100%).
                      00095 ;
0029                  00096 Pulsador_Interrupcion
0029   2131           00097         call    Retardo_20ms
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002A   1B86           00098         btfsc   Pulsador                ; Si no es la línea del pulsador sale.
002B   283F           00099         goto    Fin_PulsadorInterrupcion
002C   168B           00100         bsf     INTCON,T0IE             ; En principio habilita interrupciones TMR0.
002D   300A           00101         movlw   IncrementoDC            ; Se le va a sumar al ciclo de trabajo
002E   070C           00102         addwf   CicloTrabajo,W          ; (W)=(CicloTrabajo)+IncrementoDC
002F   008C           00103         movwf   CicloTrabajo            ; Guarda resultado.
0030   3C64           00104         sublw   .100                    ; Si ha DC llegado al 100%, la salida pasa a 
0031   1903           00105         btfsc   STATUS,Z                ; a alto permanentemente.
0032   2838           00106         goto    DC_100PorCiento
0033   1803           00107         btfsc   STATUS,C                ; Si pasa de 100, lo inicializa. 
0034   283C           00108         goto    Visualiza
0035                  00109 DC_CeroPorCiento
0035   1186           00110         bcf     Salida                  ; Pone la salida siempre en bajo.
0036   018C           00111         clrf    CicloTrabajo            ; Inicializa el ciclo de trabajo a 0%.
0037   283B           00112         goto    InhabilitaInterrupcionTMR0
0038                  00113 DC_100PorCiento
0038   1586           00114         bsf     Salida                  ; Pone la salida siempre en alto.
0039   3064           00115         movlw   .100                    ; Está al máximo, DC=100%.
003A   008C           00116         movwf   CicloTrabajo
003B                  00117 InhabilitaInterrupcionTMR0
003B   128B           00118         bcf     INTCON,T0IE
003C                  00119 Visualiza
003C   2055           00120         call    VisualizaCicloTrabajo   ; Visualiza el ciclo de trabajo seleccionado.
003D                  00121 EsperaDejePulsar
003D   1F86           00122         btfss   Pulsador
003E   283D           00123         goto    EsperaDejePulsar
003F                  00124 Fin_PulsadorInterrupcion
003F   080C           00125         movf    CicloTrabajo,W          ; Carga todos los contadores.
0040   008D           00126         movwf   Timer0_ContadorA
0041   30A7           00127         movlw   TMR0_Carga
0042   0081           00128         movwf   TMR0
0043   0008           00129         return
                      00130 
                      00131 ; Subrutina "Timer0_Interrupcion" -------------------------------------------------------
                      00132 ;
                      00133 ; Mantiene la salida en alto un tiempo igual a 100µs x (CicloTrabajo)
                      00134 ; y en bajo un tiempo igual a 100µs x (100-CicloTrabajo).
                      00135 ;
0044                  00136 Timer0_Interrupcion
0044   30A7           00137         movlw   TMR0_Carga
0045   0081           00138         movwf   TMR0
0046   0B8D           00139         decfsz  Timer0_ContadorA,F      ; Decrementa el contador.
0047   2854           00140         goto    Fin_Timer0_Interrupcion
0048   1986           00141         btfsc   Salida                  ; Testea el anterior estado de la salida.
0049   2850           00142         goto    EstabaAlto
004A                  00143 EstabaBajo
004A   0000           00144         nop
004B   1586           00145         bsf     Salida                  ; Estaba bajo y lo pasa a alto.
004C   080C           00146         movf    CicloTrabajo,W          ; Repone el contador nuevamente con el tiempo en 
004D   008D           00147         movwf   Timer0_ContadorA        ; alto.
004E   0000           00148         nop
004F   2854           00149         goto    Fin_Timer0_Interrupcion
0050                  00150 EstabaAlto
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0050   1186           00151         bcf     Salida                  ; Estaba alto y lo pasa a bajo.
0051   080C           00152         movf    CicloTrabajo,W          ; Repone el contador nuevamente con el tiempo
0052   3C64           00153         sublw   .100                    ; en bajo.
0053   008D           00154         movwf   Timer0_ContadorA
0054                  00155 Fin_Timer0_Interrupcion
0054   0008           00156         return
                      00157 
                      00158 ; Subrutina "VisualizaCicloTrabajo" -----------------------------------------------------
                      00159 ;
                      00160 ; Visualiza el ciclo de trabajo en el visualizador LCD. Se hace de manera tal que cuando
                      00161 ; haya que visualizar un número mayor de 99, las decenas siempre se visualicen aunque sean
                      00162 ; cero. Y cuando sea menor de 99 las decenas no se visualicen si es cero.
                      00163 ;
0055                  00164 VisualizaCicloTrabajo
0055   20C1           00165         call    LCD_Linea1              ; Visualiza el ciclo de trabajo seleccionado.
0056   3006           00166         movlw   Mensaje_DC
0057   2068           00167         call    LCD_Mensaje
0058   080C           00168         movf    CicloTrabajo,W
0059   215B           00169         call    BIN_a_BCD               ; Lo pasa a BCD.
005A   0819           00170         movf    BCD_Centenas,W          ; Visualiza las centenas.
005B   1D03           00171         btfss   STATUS,Z                ; Si son cero no visualiza las centenas.
005C   2861           00172         goto    VisualizaCentenas
005D   080C           00173         movf    CicloTrabajo,W          ; Vuelve a recuperar este valor.
005E   215B           00174         call    BIN_a_BCD               ; Lo pasa a BCD.
005F   20FE           00175         call    LCD_Byte                ; Visualiza las decenas y unidades.
0060   2865           00176         goto    VisualizaTantoPorCiento
0061                  00177 VisualizaCentenas
0061   2109           00178         call    LCD_Nibble              ; Visualiza las centenas.
0062   080C           00179         movf    CicloTrabajo,W          ; Vuelve a recuperar este valor.
0063   215B           00180         call    BIN_a_BCD               ; Lo pasa a BCD.
0064   2105           00181         call    LCD_ByteCompleto        ; Visualiza las decenas (aunque sea cero) y
0065                  00182 VisualizaTantoPorCiento                 ; unidades.
0065   3013           00183         movlw   Mensaje_TantoPorCiento  ; Y ahora el simbolo "%".
0066   2068           00184         call    LCD_Mensaje
0067   0008           00185         return
                      00186 
                      00187         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  0000000E            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  0000000F            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
0068                  00042 LCD_Mensaje
0068   008E           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
0069   3005           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
006A   028E           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
006B   038E           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
006C                  00047 LCD_VisualizaOtroCaracter
006C   080E           00048         movf    LCD_ApuntaCaracter,W
006D   2005           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
006E   008F           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
006F   088F           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0070   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0071   2875           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
0072                  00054 LCD_NoUltimoCaracter
0072   20D4           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0073   0A8E           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
0074   286C           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
0075                  00058 LCD_FinMensaje
0075   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000010            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
0076                  00073 LCD_MensajeMovimiento
0076   008E           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0077   3005           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0078   028E           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
0079   038E           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
007A                  00078 LCD_PrimeraPosicion
007A   0190           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
007B   20CF           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
007C                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
007C   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
007D   0210           00083         subwf   LCD_CursorPosicion,W
007E   1D03           00084         btfss   STATUS,Z
007F   2885           00085         goto    LCD_NoEsFinalLinea
0080                  00086 LCD_EsFinalLinea
0080   212B           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
0081   212B           00088         call    Retardo_200ms
0082   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
0083   028E           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
0084   287A           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
0085                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
0085   080E           00093         movf    LCD_ApuntaCaracter,W
0086   2005           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0087   008F           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0088   088F           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0089   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
008A   288F           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
008B                  00099 LCD_NoUltimoCaracter2
008B   20D4           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
008C   0A90           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
008D   0A8E           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
008E   287C           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
008F                  00105 LCD_FinMovimiento                       ; de la línea.
008F   0008           00106         return                          ; Vuelve al programa principal.
                      00188         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000011            00025         LCD_Dato
  00000012            00026         LCD_GuardaDato
  00000013            00027         LCD_GuardaTRISB
  00000014            00028         LCD_Auxiliar1
  00000015            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
0090                  00045 LCD_Inicializa
0090   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0091   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0092   1105           00048         bcf     LCD_PinEnable
0093   1085           00049         bcf     LCD_PinRW
0094   1283           00050         bcf     STATUS,RP0
0095   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
0096   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
0097   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
0098   2131           00055         call    Retardo_20ms
0099   3030           00056         movlw   b'00110000'     
009A   20A8           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
009B   2135           00058         call    Retardo_5ms     
009C   3030           00059         movlw   b'00110000'     
009D   20A8           00060         call    LCD_EscribeLCD
009E   211E           00061         call    Retardo_200micros
009F   3030           00062         movlw   b'00110000'     
00A0   20A8           00063         call    LCD_EscribeLCD
00A1   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00A2   20A8           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00A3   20D1           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
00A4   20CF           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
00A5   20CD           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00A6   20BF           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00A7   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00A8                  00082 LCD_EscribeLCD
00A8   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00A9   0091           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00AA   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00AB   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00AC   0491           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00AD   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00AE   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00AF   0093           00091         movwf   LCD_GuardaTRISB
00B0   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00B1   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00B2   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00B3   0811           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00B4   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00B5   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00B6   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00B7   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00B8   2137           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00B9   2123           00102         call    Retardo_50micros
00BA   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00BB   0813           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00BC   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00BD   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00BE   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00BF                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00BF   3006           00114         movlw   b'00000110'
00C0   28D2           00115         goto    LCD_EnviaComando
00C1                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00C1   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00C2   28D2           00118         goto    LCD_EnviaComando
00C3                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00C3   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C4   28D2           00121         goto    LCD_EnviaComando
00C5                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00C5   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00C6   28D2           00124         goto    LCD_EnviaComando        ; registro W.
00C7                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00C7   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00C8   28D2           00127         goto    LCD_EnviaComando        ; registro W.
00C9                  00128 LCD_OFF                         ; Pantalla apagada.
00C9   3008           00129         movlw   b'00001000'
00CA   28D2           00130         goto    LCD_EnviaComando
00CB                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00CB   300E           00132         movlw   b'00001110'
00CC   28D2           00133         goto    LCD_EnviaComando
00CD                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00CD   300C           00135         movlw   b'00001100'
00CE   28D2           00136         goto    LCD_EnviaComando
00CF                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00CF   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
00D0   28D2           00139         goto    LCD_EnviaComando
00D1                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00D1   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
00D2                  00151 LCD_EnviaComando
00D2   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00D3   28D6           00153         goto    LCD_Envia
00D4                  00154 LCD_Caracter
00D4   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00D5   20DB           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00D6                  00157 LCD_Envia
00D6   0092           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00D7   20A8           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00D8   0E12           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
00D9   20A8           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00DA   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00DB                  00177 LCD_CodigoCGROM
00DB   0091           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00DC                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00DC   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00DD   1D03           00181         btfss   STATUS,Z
00DE   28E2           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00DF   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00E0   0091           00184         movwf   LCD_Dato
00E1   28EF           00185         goto    LCD_FinCGROM
00E2                  00186 LCD_EnheMayuscula
00E2   0811           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00E3   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00E4   1D03           00189         btfss   STATUS,Z
00E5   28E9           00190         goto    LCD_Grado               ; No es "Ñ".
00E6   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00E7   0091           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00E8   28EF           00193         goto    LCD_FinCGROM    
00E9                  00194 LCD_Grado
00E9   0811           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00EA   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00EB   1D03           00197         btfss   STATUS,Z
00EC   28EF           00198         goto    LCD_FinCGROM            ; No es "º".
00ED   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00EE   0091           00200         movwf   LCD_Dato
00EF                  00201 LCD_FinCGROM
00EF   0811           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
00F0   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
00F1                  00209 LCD_LineaEnBlanco
00F1   3010           00210         movlw   LCD_CaracteresPorLinea
00F2   28F8           00211         goto    LCD_EnviaBlancos
00F3                  00212 LCD_UnEspacioBlanco
00F3   3001           00213         movlw   .1
00F4   28F8           00214         goto    LCD_EnviaBlancos
00F5                  00215 LCD_DosEspaciosBlancos
00F5   3002           00216         movlw   .2
00F6   28F8           00217         goto    LCD_EnviaBlancos
00F7                  00218 LCD_TresEspaciosBlancos
00F7   3003           00219         movlw   .3
00F8                  00220 LCD_EnviaBlancos
00F8   0094           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00F9                  00222 LCD_EnviaOtroBlanco     
00F9   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
00FA   20D4           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00FB   0B94           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00FC   28F9           00226         goto    LCD_EnviaOtroBlanco
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00FD   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
00FE                  00240 LCD_Byte
00FE   0095           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00FF   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
0100   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0101   2906           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0102   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0103   20D4           00246         call    LCD_Caracter
0104   2908           00247         goto    LCD_VisualizaBajo
                      00248 
0105                  00249 LCD_ByteCompleto
0105   0095           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0106                  00251 LCD_VisualizaAlto
0106   0E15           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0107   2109           00253         call    LCD_Nibble              ; Lo visualiza.
0108                  00254 LCD_VisualizaBajo
0108   0815           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
0109                  00266 LCD_Nibble
0109   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
010A   0094           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
010B   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
010C   1C03           00270         btfss   STATUS,C        
010D   2911           00271         goto    LCD_EnviaByteLetra
010E   0814           00272         movf    LCD_Auxiliar1,W
010F   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
0110   2913           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0111                  00275 LCD_EnviaByteLetra
0111   0814           00276         movf    LCD_Auxiliar1,W
0112   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0113                  00278 LCD_FinVisualizaDigito
0113   28D4           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00280                                         ; para no sobrecargar la pila.
                      00189         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000016            00021         R_ContA                         ; Contadores para los retardos.
  00000017            00022         R_ContB
  00000018            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0114                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0114   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0115   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0116   0000           00035         nop                             ; Aporta 1 ciclo máquina.
0117   0000           00036         nop                             ; Aporta 1 ciclo máquina.
0118   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0119                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0119   0000           00039         nop                             ; Aporta 1 ciclo máquina.
011A                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
011A   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
011B                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
011B   0000           00046         nop                             ; Aporta 1 ciclo máquina.
011C   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
011D   2927           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
011E                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
011E   0000           00050         nop                             ; Aporta 1 ciclo máquina.
011F   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0120   2927           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0121                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0121   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0122   2927           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0123                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0123   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0124   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0125   2927           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0126                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
0126   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0127                  00066 RetardoMicros
0127   0096           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
0128                  00068 Rmicros_Bucle
0128   0B96           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0129   2928           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
012A   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
012B                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
012B   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
012C   293A           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
012D                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
012D   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
012E   293A           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
012F                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
012F   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0130   293A           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0131                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0131   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0132   293A           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0133                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0133   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0134   293A           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0135                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0135   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0136   293A           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0137                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0137   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0138   293A           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0139                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0139   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
013A                  00111 Retardos_ms
013A   0097           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
013B                  00113 R1ms_BucleExterno
013B   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
013C   0096           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
013D                  00116 R1ms_BucleInterno
013D   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
013E   0B96           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
013F   293D           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
0140   0B97           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0141   293B           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0142   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0143                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0143   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0144   294E           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0145                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0145   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0146   294E           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0147                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0147   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0148   294E           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0149                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
0149   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
014A   294E           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
014B                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
014B   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
014C   294E           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
014D                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
014D   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
014E                  00160 Retardo_1Decima
014E   0098           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
014F                  00162 R1Decima_BucleExterno2
014F   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
0150   0097           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0151                  00165 R1Decima_BucleExterno
0151   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0152   0096           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0153                  00168 R1Decima_BucleInterno          
0153   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0154   0B96           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0155   2953           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0156   0B97           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0157   2951           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0158   0B98           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0159   294F           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
015A   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00190         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ; Un número binario de 8 bits es convertido en BCD. El resultado se guarda en tres
                      00004 ; posiciones de memorias llamadas BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00005 ;
                      00006 ; El procedimiento utilizado es mediante restas de 10 tal como se explicó en el capítulo 9.
                      00007 ;
                      00008 ; Entrada:      En el registro W el número binario a convertir.
                      00009 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00010 ;       En el registro W también las decenas (nibble alto) y unidades (bajo).
                      00011 
                      00012 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00013 
                      00014         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  00000019            00015         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  0000001A            00016         BCD_Decenas                     ; la última asignada.
  0000001B            00017         BCD_Unidades    
                      00018         ENDC
                      00019 ;
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

015B                  00020 BIN_a_BCD
015B   0199           00021         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
015C   019A           00022         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
015D   009B           00023         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
015E                  00024 BCD_Resta10
015E   300A           00025         movlw   .10                     ; A las unidades se le va restando 10 en cada
015F   021B           00026         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
0160   1C03           00027         btfss   STATUS,C                ; ¿(BCD_Unidades)>=10?, ¿(W) positivo?, ¿C = 1?.
0161   296B           00028         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
0162                  00029 BCD_IncrementaDecenas
0162   009B           00030         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
0163   0A9A           00031         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
0164   300A           00032         movlw   .10                     ; a 10. Lo hace mediante una resta.
0165   021A           00033         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
0166   1C03           00034         btfss   STATUS,C                ; ¿(BCD_Decenas)>=10?, ¿(W) positivo?, ¿C = 1?.
0167   295E           00035         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
0168                  00036 BCD_IncrementaCentenas                  ; las unidades.
0168   019A           00037         clrf    BCD_Decenas             ; Pone a cero las decenas 
0169   0A99           00038         incf    BCD_Centenas,F          ; e incrementa las centenas.
016A   295E           00039         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
016B                  00040 BIN_BCD_Fin
016B   0E1A           00041         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
016C   071B           00042         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
016D   0008           00043         return                          ; Vuelve al programa principal.
                      00044         
                      00045 ; La directiva "END" se debe poner en el programa principal, no aquí.
                      00191         END
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

BCD_Centenas                      00000019
BCD_Decenas                       0000001A
BCD_IncrementaCentenas            00000168
BCD_IncrementaDecenas             00000162
BCD_Resta10                       0000015E
BCD_Unidades                      0000001B
BIN_BCD_Fin                       0000016B
BIN_a_BCD                         0000015B
C                                 00000000
CicloTrabajo                      0000000C
DC                                00000001
DC_100PorCiento                   00000038
DC_CeroPorCiento                  00000035
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
EsperaDejePulsar                  0000003D
EstabaAlto                        00000050
EstabaBajo                        0000004A
F                                 00000001
FSR                               00000004
Fin_PulsadorInterrupcion          0000003F
Fin_Timer0_Interrupcion           00000054
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
IncrementoDC                      0000000A
InhabilitaInterrupcionTMR0        0000003B
Inicio                            00000017
LCD_2Lineas4Bits5x7               000000D1
LCD_ApuntaCaracter                0000000E
LCD_Auxiliar1                     00000014
LCD_Auxiliar2                     00000015
LCD_Borra                         000000CF
LCD_BusDatos                      PORTB
LCD_Byte                          000000FE
LCD_ByteCompleto                  00000105
LCD_Caracter                      000000D4
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000DB
LCD_CursorIncr                    000000BF
LCD_CursorOFF                     000000CD
LCD_CursorON                      000000CB
LCD_CursorPosicion                00000010
LCD_Dato                          00000011
LCD_DosEspaciosBlancos            000000F5
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 18


SYMBOL TABLE
  LABEL                             VALUE 

LCD_EnheMayuscula                 000000E2
LCD_EnheMinuscula                 000000DC
LCD_Envia                         000000D6
LCD_EnviaBlancos                  000000F8
LCD_EnviaByteLetra                00000111
LCD_EnviaComando                  000000D2
LCD_EnviaOtroBlanco               000000F9
LCD_EsFinalLinea                  00000080
LCD_EscribeLCD                    000000A8
LCD_FinCGROM                      000000EF
LCD_FinMensaje                    00000075
LCD_FinMovimiento                 0000008F
LCD_FinVisualizaDigito            00000113
LCD_Grado                         000000E9
LCD_GuardaDato                    00000012
LCD_GuardaTRISB                   00000013
LCD_Inicializa                    00000090
LCD_Linea1                        000000C1
LCD_Linea2                        000000C3
LCD_LineaEnBlanco                 000000F1
LCD_Mensaje                       00000068
LCD_MensajeMovimiento             00000076
LCD_Nibble                        00000109
LCD_NoEsFinalLinea                00000085
LCD_NoUltimoCaracter              00000072
LCD_NoUltimoCaracter2             0000008B
LCD_OFF                           000000C9
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000C5
LCD_PosicionLinea2                000000C7
LCD_PrimeraPosicion               0000007A
LCD_TresEspaciosBlancos           000000F7
LCD_UnEspacioBlanco               000000F3
LCD_ValorCaracter                 0000000F
LCD_VisualizaAlto                 00000106
LCD_VisualizaBajo                 00000108
LCD_VisualizaCaracter             0000007C
LCD_VisualizaOtroCaracter         0000006C
Mensaje_DC                        00000006
Mensaje_TantoPorCiento            00000013
Mensajes                          00000005
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 19


SYMBOL TABLE
  LABEL                             VALUE 

PS2                               00000002
PSA                               00000003
Principal                         00000021
Pulsador                          PORTB,7
Pulsador_Interrupcion             00000029
R1Decima_BucleExterno             00000151
R1Decima_BucleExterno2            0000014F
R1Decima_BucleInterno             00000153
R1ms_BucleExterno                 0000013B
R1ms_BucleInterno                 0000013D
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000016
R_ContB                           00000017
R_ContC                           00000018
RetardoMicros                     00000127
Retardo_100micros                 00000121
Retardo_100ms                     0000012D
Retardo_10micros                  00000114
Retardo_10ms                      00000133
Retardo_10s                       00000145
Retardo_1Decima                   0000014E
Retardo_1ms                       00000139
Retardo_1s                        0000014B
Retardo_200micros                 0000011E
Retardo_200ms                     0000012B
Retardo_20micros                  00000126
Retardo_20ms                      00000131
Retardo_20s                       00000143
Retardo_2ms                       00000137
Retardo_2s                        00000149
Retardo_4micros                   0000011A
Retardo_500micros                 0000011B
Retardo_500ms                     0000014D
Retardo_50micros                  00000123
Retardo_50ms                      0000012F
Retardo_5micros                   00000119
Retardo_5ms                       00000135
Retardo_5s                        00000147
Retardos_ms                       0000013A
Rmicros_Bucle                     00000128
STATUS                            00000003
Salida                            PORTB,3
ServicioInterrupcion              00000022
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0_Carga                        FFFFFFA7
MPASM 03.50 Released                     INT_CUADRADAS_04.ASM   10-9-2003  11:38:58         PAGE 20


SYMBOL TABLE
  LABEL                             VALUE 

TRISA                             00000085
TRISB                             00000086
Timer0_ContadorA                  0000000D
Timer0_Interrupcion               00000044
Visualiza                         0000003C
VisualizaCentenas                 00000061
VisualizaCicloTrabajo             00000055
VisualizaTantoPorCiento           00000065
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXX-- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   363
Program Memory Words Free:   661


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

