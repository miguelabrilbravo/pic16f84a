MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;******************************* I2C_Termometro_01.asm *******************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Programa de control para un termómetro digital con el sensor de temperatura DS1624.
                      00010 ;
                      00011 ; ZONA DE DATOS **********************************************************************
                      00012 
2007   3FF1           00013         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00014         LIST       P=16F84A
                      00015         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00016 
                      00017         CBLOCK   0x0C
  0000000C            00018         Registro50ms                    ; Guarda los incrementos cada 50 ms.
                      00019         ENDC
                      00020 
  FFFFFF3D            00021 TMR0_Carga50ms  EQU     -d'195'         ; Para conseguir interrupción cada 50 ms.
  00000028            00022 Carga2s         EQU     d'40'           ; Leerá cada 2s = 40 x 50ms = 2000ms.
                      00023 
                      00024 ; ZONA DE CÓDIGOS ********************************************************************
                      00025 
0000                  00026         ORG     0
0000   282A           00027         goto    Inicio
0004                  00028         ORG     4
0004   2839           00029         goto    ServicioInterrupcion
                      00030 
0005                  00031 Mensajes
0005   0782           00032         addwf   PCL,F
0006                  00033 MensajePublicitario
0006   3449 3445 3453 00034         DT "IES. ISAAC PERAL", 0x00
       342E 3420 3449 
       3453 3441 3441 
       3443 3420 3450 
       3445 3452 3441 
       344C 3400 
0017                  00035 MensajeTemperatura
0017   3454 3465 346D 00036         DT "Temperatura: ", 0x00
       3470 3465 3472 
       3461 3474 3475 
       3472 3461 343A 
       3420 3400 
0025                  00037 MensajeGradoCentigrado
0025   34BA 3443 3420 00038         DT "ºC  ", 0x00                 ; En la pantalla: "ºC  "
       3420 3400 
                      00039 
002A   20B3           00040 Inicio  call    DS1624_Inicializa               ; Configura el DS1624 e inicia la conversión.
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002B   213A           00041         call    LCD_Inicializa
002C   1683           00042         bsf     STATUS,RP0
002D   3007           00043         movlw   b'00000111'             ; Preescaler de 256 para el TMR0.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002E   0081           00044         movwf   OPTION_REG
002F   1283           00045         bcf     STATUS,RP0
0030   3006           00046         movlw   MensajePublicitario             ; Visualiza un mensaje publicitario en la primera
0031   21BE           00047         call    LCD_Mensaje             ; línea del LCD.
0032   303D           00048         movlw   TMR0_Carga50ms          ; Carga el TMR0 en complemento a 2.
0033   0081           00049         movwf   TMR0
0034   3028           00050         movlw   Carga2s                 ; Y el registro cuyo decremento consigue los 2 s.
0035   008C           00051         movwf   Registro50ms
0036   30A8           00052         movlw   b'10101000'             ; Activa interrupción del TMR0 (T0IE), por cambio en
0037   008B           00053         movwf   INTCON                  ; las líneas del Puerto B (RBIE) y la general (GIE).
0038                  00054 Principal
0038   2838           00055         goto    Principal
                      00056 
                      00057 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
                      00058 ;
                      00059 ; Detecta qué ha producido la interrupción y ejecuta la subrutina de atención correspondiente.
                      00060 
0039                  00061 ServicioInterrupcion
0039   190B           00062         btfsc   INTCON,T0IF
003A   203D           00063         call    Termometro
003B   110B           00064         bcf     INTCON,T0IF
003C   0009           00065         retfie
                      00066 
                      00067 ; Subrutina "Termometro" ----------------------------------------------------------------
                      00068 ;
                      00069 ; Esta subrutina lee y visualiza el termómetro cada 2 segundos aproximadamente.
                      00070 ; Se ejecuta debido a la petición de interrupción del Timer 0, cada 50 ms.
                      00071 ; Para conseguir una temporización de 2 s habrá que repetir 40 veces el lazo de
                      00072 ; 50 ms (40x50ms = 2000ms = 2s).
                      00073 ;
003D                  00074 Termometro
003D   303D           00075         movlw   TMR0_Carga50ms
003E   0081           00076         movwf   TMR0                    ; Recarga el TMR0.
003F   0B8C           00077         decfsz  Registro50ms,F          ; Decrementa el contador.
0040   2846           00078         goto    Fin_Termometro          ; No han pasado 2 segundos y por tanto sale.
0041   3028           00079         movlw   Carga2s                 ; Repone el contador nuevamente.
0042   008C           00080         movwf   Registro50ms
0043   20C1           00081         call    DS1624_LeeTemperatura   ; Lee la temperatura.
0044   20BA           00082         call    DS1624_IniciaConversion ; Comienza conversión para la siguiente lectura.
0045   2047           00083         call    VisualizaTermometro
0046                  00084 Fin_Termometro
0046   0008           00085         return
                      00086 
                      00087 ; Subrutina "VisualizaTermometro" -----------------------------------------------------------------
                      00088 ;
                      00089 ; Visualiza la temperatura en la segunda línea de la pantalla LCD.
                      00090 ;
                      00091 ; Entradas:     - (DS1624_Temperatura), temperatura medida en valor absoluto.
                      00092 ;               - (DS1624_Decimal), parte decimal de la temperatura medida.
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00093 ;               - (DS1624_Signo), indica signo de la temperatura.
                      00094 
0047                  00095 VisualizaTermometro
0047   3005           00096         movlw   .5                      ; Se coloca para centrar visualización en la
0048   216E           00097         call    LCD_PosicionLinea2      ; segunda línea.
0049   1F92           00098         btfss   DS1624_Signo,7          ; ¿Temperatura negativa?.
004A   284D           00099         goto    TemperaturaPositiva             ; No, la temperatura es positiva.
004B                  00100 TemperaturaNegativa:
004B   302D           00101         movlw   '-'                     ; Visualiza el signo "-" de temperatura negativa.
004C   217B           00102         call    LCD_Caracter
004D                  00103 TemperaturaPositiva
004D   0810           00104         movf    DS1624_Temperatura,W    ; Visualiza el valor absoluto de la temperatura,
004E   2127           00105         call    BIN_a_BCD               ; pasándola previamente a BCD.
004F   21A8           00106         call    LCD_Byte                ; Visualiza apagando el cero no significativo.
0050   302E           00107         movlw   '.'                     ; Visualiza el punto decimal.
0051   217B           00108         call    LCD_Caracter
0052   0811           00109         movf    DS1624_Decimal,W        ; Visualiza la parte decimal.
0053   21B3           00110         call    LCD_Nibble
0054   3025           00111         movlw   MensajeGradoCentigrado  ; En pantalla aparece "ºC  ".
0055   21BE           00112         call    LCD_Mensaje
0056   0008           00113         return
                      00114 
                      00115         INCLUDE  <BUS_I2C.INC>
                      00001 ;**************************** Librería "BUS_I2C.INC" ************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control del bus serie I2C, 
                      00010 ; por parte de un solo microcontrolador maestro.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 ;
                      00014         CBLOCK
  0000000D            00015         I2C_ContadorBits                ; Cuenta los bits a transmitir o a recibir.
  0000000E            00016         I2C_Dato                        ; Dato a transmitir o recibido.
  0000000F            00017         I2C_Flags                       ; Guarda la información del estado del bus I2C.
                      00018         ENDC
                      00019 
                      00020 #DEFINE I2C_UltimoByteLeer      I2C_Flags,0
                      00021 ;    -  (I2C_UltimoByteLeer)=0, NO es el último byte a leer por el maestro.
                      00022 ;    -  (I2C_UltimoByteLeer)=1, SÍ es el último byte a leer por el maestro.
                      00023 
                      00024 ; La definición de las líneas SCL y SDA del bus I2C se puede cambiar según las
                      00025 ; necesidades del hardware.
                      00026 
                      00027 #DEFINE SCL     PORTA,3                 ; Línea SCL del bus I2C.
                      00028 #DEFINE SDA     PORTA,4                 ; Línea SDA del bus I2C.
                      00029 ;
                      00030 ; Subrutina "SDA_Bajo" -------------------------------------------------------------------------------
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00031 ;
0057                  00032 SDA_Bajo
0057   1683           00033         bsf     STATUS,RP0              ; Configura la línea SDA como salida.
0058   1205           00034         bcf     SDA
0059   1283           00035         bcf     STATUS,RP0
005A   1205           00036         bcf     SDA                     ; SDA en bajo.
005B   0008           00037         return
                      00038 ;
                      00039 ; Subrutina "SDA_AltaImpedancia" --------------------------------------------------------
                      00040 ;
005C                  00041 SDA_AltaImpedancia
005C   1683           00042         bsf     STATUS,RP0              ; Configura la línea SDA entrada.
005D   1605           00043         bsf     SDA                     ; Lo pone en alta impedancia y, gracias a la
005E   1283           00044         bcf     STATUS,RP0              ; Rp de esta línea, se mantiene a nivel alto.
005F   0008           00045         return
                      00046 ;
                      00047 ; Subrutina "SCL_Bajo" ------------------------------------------------------------------
                      00048 ;
0060                  00049 SCL_Bajo
0060   1683           00050         bsf     STATUS,RP0
0061   1185           00051         bcf     SCL                     ; Configura la línea SCL como salida.
0062   1283           00052         bcf     STATUS,RP0
0063   1185           00053         bcf     SCL                     ; La línea de reloj SCL en bajo.
0064   0008           00054         return
                      00055 ;
                      00056 ; Subrutina "SCL_AltaImpedancia" --------------------------------------------------------
                      00057 ;
0065                  00058 SCL_AltaImpedancia
0065   1683           00059         bsf     STATUS,RP0              ; Configura la línea SCL entrada.
0066   1585           00060         bsf     SCL                     ; Lo pone en alta impedancia y, gracias a la Rp
0067   1283           00061         bcf     STATUS,RP0              ; de esta línea, se mantiene a nivel alto.
0068                  00062 SCL_EsperaNivelAlto
0068   1D85           00063         btfss   SCL                     ; Si algún esclavo mantiene esta línea en bajo
0069   2868           00064         goto    SCL_EsperaNivelAlto     ; hay que esperar.
006A   0008           00065         return
                      00066 ;
                      00067 ; Subrutina "I2C_EnviaStart" ------------------------------------------------------------
                      00068 ;
                      00069 ; Esta subrutina envía una condición de Start o inicio.
                      00070 ;
006B                  00071 I2C_EnviaStart
006B   205C           00072         call    SDA_AltaImpedancia      ; Línea SDA en alto.
006C   2065           00073         call    SCL_AltaImpedancia      ; Línea SCL en alto.
006D   20E6           00074         call    Retardo_4micros         ; Tiempo tBUF del protocolo.
006E   2057           00075         call    SDA_Bajo                ; Flanco de bajada de SDA mientras SCL está alto.
006F   20E6           00076         call    Retardo_4micros         ; Tiempo tHD;STA del protocolo.
0070   2060           00077         call    SCL_Bajo                ; Flanco de bajada del reloj SCL.
0071   20E6           00078         call    Retardo_4micros 
0072   0008           00079         return
                      00080 ;
                      00081 ; Subrutina "I2C_EnviaStop" -------------------------------------------------------------
                      00082 ;
                      00083 ; Esta subrutina envía un condición de Stop o parada.
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00084 ;
0073                  00085 I2C_EnviaStop
0073   2057           00086         call    SDA_Bajo
0074   2065           00087         call    SCL_AltaImpedancia      ; Flanco de subida de SCL.
0075   20E6           00088         call    Retardo_4micros         ; Tiempo tSU;STO del protocolo.
0076   205C           00089         call    SDA_AltaImpedancia      ; Flanco de subida de SDA.
0077   20E6           00090         call    Retardo_4micros         ; Tiempo tBUF del protocolo.
0078   0008           00091         return
                      00092 ;
                      00093 ; Subrutina "I2C_EnviaByte" -------------------------------------------------------------
                      00094 ;
                      00095 ; El microcontrolador maestro transmite un byte por el bus I2C, comenzando por el bit
                      00096 ; MSB. El byte a transmitir debe estar cargado previamente en el registro de trabajo W.
                      00097 ; De la subrutina ejecutada anteriormente I2C_EnviaStart o esta misma I2C_EnviaByte, 
                      00098 ; la línea SCL se debe encontrar a nivel bajo al menos durante 5 µs.
                      00099 ;
0079                  00100 I2C_EnviaByte
0079   008E           00101         movwf   I2C_Dato                        ; Almacena el byte a transmitir.
007A   3008           00102         movlw   0x08                    ; A transmitir 8 bits.
007B   008D           00103         movwf   I2C_ContadorBits
007C                  00104 I2C_EnviaBit
007C   0D8E           00105         rlf     I2C_Dato,F              ; Chequea el bit, llevándolo previamente al Carry.
007D   1803           00106         btfsc   STATUS,C
007E   2881           00107         goto    I2C_EnviaUno
007F                  00108 I2C_EnviaCero
007F   2057           00109         call    SDA_Bajo                ; Si es "0" envía un nivel bajo.
0080   2882           00110         goto    I2C_FlancoSCL
0081                  00111 I2C_EnviaUno
0081   205C           00112         call    SDA_AltaImpedancia      ; Si es "1" lo activará a alto.
0082                  00113 I2C_FlancoSCL
0082   2065           00114         call    SCL_AltaImpedancia      ; Flanco de subida del SCL.
0083   20E6           00115         call    Retardo_4micros         ; Tiempo tHIGH del protocolo.
0084   2060           00116         call    SCL_Bajo                ; Termina el semiperiodo positivo del reloj.
0085   20E6           00117         call    Retardo_4micros         ; Tiempo tHD;DAT del protocolo.
0086   0B8D           00118         decfsz  I2C_ContadorBits,F              ; Lazo para los ocho bits.
0087   287C           00119         goto    I2C_EnviaBit
                      00120 ;
0088   205C           00121         call    SDA_AltaImpedancia      ; Libera la línea de datos.
0089   2065           00122         call    SCL_AltaImpedancia      ; Pulso en alto de reloj para que el esclavo
008A   20E6           00123         call    Retardo_4micros         ; pueda enviar el bit ACK.
008B   2060           00124         call    SCL_Bajo
008C   20E6           00125         call    Retardo_4micros
008D   0008           00126         return
                      00127 ;
                      00128 ; Subrutina "I2C_LeeByte" ---------------------------------------------------------------
                      00129 ;
                      00130 ; El microcontrolador maestro lee un byte desde el esclavo conectado al bus I2C. El dato
                      00131 ; recibido se carga en el registro I2C_Dato y lo envía a la subrutina superior a través
                      00132 ; del registro W. Se empieza a leer por el bit de mayor peso MSB.
                      00133 ; De alguna de las subrutinas ejecutadas anteriormente I2C_EnviaStart, I2C_EnviaByte
                      00134 ; o esta misma I2C_LeeByte, la línea SCL lleva en bajo al menos 5 µs.
                      00135 
008E                  00136 I2C_LeeByte
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

008E   3008           00137         movlw   0x08                    ; A recibir 8 bits.
008F   008D           00138         movwf   I2C_ContadorBits
0090   205C           00139         call    SDA_AltaImpedancia      ; Deja libre la línea de datos.
0091                  00140 I2C_LeeBit
0091   2065           00141         call    SCL_AltaImpedancia      ; Flanco de subida del reloj.
0092   1003           00142         bcf     STATUS,C                ; En principio supone que es "0".
0093   1A05           00143         btfsc   SDA                     ; Lee el bit
0094   1403           00144         bsf     STATUS,C                ; Si es "1" carga 1 en el Carry.
0095   0D8E           00145         rlf     I2C_Dato,F              ; Lo introduce en el registro.
0096   2060           00146         call    SCL_Bajo                ; Termina el semiperiodo positivo del reloj.
0097   20E6           00147         call    Retardo_4micros         ; Tiempo tHD;DAT del protocolo.
0098   0B8D           00148         decfsz  I2C_ContadorBits,F              ; Lazo para los 8 bits.
0099   2891           00149         goto    I2C_LeeBit
                      00150 ;
                      00151 ; Chequea si este es el último byte a leer para enviar o no el bit de reconocimiento
                      00152 ; ACK en consecuencia.
                      00153 ;
009A   1C0F           00154         btfss   I2C_UltimoByteLeer      ; Si es el último, no debe enviar
                      00155                                         ; el bit de reconocimiento ACK.
009B   2057           00156         call    SDA_Bajo                ; Envía el bit de reconocimiento ACK
                      00157                                         ; porque todavía no es el último byte a leer.
009C   2065           00158         call    SCL_AltaImpedancia      ; Pulso en alto del SCL para transmitir el
009D   20E6           00159         call    Retardo_4micros         ; bit ACK de reconocimiento. Este es tHIGH.
009E   2060           00160         call    SCL_Bajo                ; Pulso de bajada del SCL.
009F   20E6           00161         call    Retardo_4micros
00A0   080E           00162         movf    I2C_Dato,W              ; El resultado se manda en el registro de
00A1   0008           00163         return                          ; de trabajo W.
                      00164         
                      00165 ;       ===================================================================
                      00166 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00167 ;         E. Palacios, F. Remiro y L. López.
                      00168 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00169 ;       ===================================================================
                      00116         INCLUDE  <DS1624.INC>   
                      00001 ;**************************** Librería "DS1624.INC" *************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas de manejo del sensor de temperatura 
                      00010 ; DS1624. Este sensor transmite la información vía serie a través de un bus I2C.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 
                      00014         CBLOCK
  00000010            00015         DS1624_Temperatura                      ; Parte entera de la temperatura medida.
  00000011            00016         DS1624_Decimal                          ; Parte decimal de la temperatura medida.
  00000012            00017         DS1624_Signo                            ; Signo de la temperatura medida.
                      00018         ENDC
                      00019 
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000090            00020 DS1624_DireccionEscritura               EQU     b'10010000'
  00000091            00021 DS1624_DireccionLectura         EQU     b'10010001'
                      00022 
  000000AA            00023 Comando_ReadTemperature         EQU     0AAh    ; Comandos del DS1624.
  000000EE            00024 Comando_StartConvert_T          EQU     0EEh
  000000AC            00025 Comando_AccessConfig            EQU     0ACh
                      00026 
                      00027 ; Subrutina "DS1624_RedondeaDecimal" ----------------------------------------------------
                      00028 ;
                      00029 ; Esta subrutina redondea el valor del contenido del registro de trabajo W al valor más cercano
                      00030 ; con un decimal indicado en una tabla.
                      00031 ;
00A2                  00032 DS1624_RedondeoDecimal
00A2   0782           00033         addwf   PCL,F   
00A3   3400           00034         retlw   d'0'    ; (DS1624_Decimal)=b'0000'. Mide 0,0000ºC. Redondeado a 0,0ºC.
00A4   3401           00035         retlw   d'1'    ; (DS1624_Decimal)=b'0001'. Mide 0,0625ºC. Redondeado a 0,1ºC.
00A5   3401           00036         retlw   d'1'    ; (DS1624_Decimal)=b'0010'. Mide 0,1250ºC. Redondeado a 0,1ºC.
00A6   3402           00037         retlw   d'2'    ; (DS1624_Decimal)=b'0011'. Mide 0,1875ºC. Redondeado a 0,2ºC.
00A7   3403           00038         retlw   d'3'    ; (DS1624_Decimal)=b'0100'. Mide 0,2500ºC. Redondeado a 0,3ºC.
00A8   3403           00039         retlw   d'3'    ; (DS1624_Decimal)=b'0101'. Mide 0,3125ºC. Redondeado a 0,3ºC.  
00A9   3404           00040         retlw   d'4'    ; (DS1624_Decimal)=b'0110'. Mide 0,3750ºC. Redondeado a 0,4ºC.
00AA   3404           00041         retlw   d'4'    ; (DS1624_Decimal)=b'0111'. Mide 0,4375ºC. Redondeado a 0,4ºC.
00AB   3405           00042         retlw   d'5'    ; (DS1624_Decimal)=b'1000'. Mide 0,5000ºC. Redondeado a 0,5ºC.
00AC   3406           00043         retlw   d'6'    ; (DS1624_Decimal)=b'1001'. Mide 0,5625ºC. Redondeado a 0,6ºC.
00AD   3406           00044         retlw   d'6'    ; (DS1624_Decimal)=b'1010'. Mide 0,6250ºC. Redondeado a 0,6ºC.
00AE   3407           00045         retlw   d'7'    ; (DS1624_Decimal)=b'1011'. Mide 0,6875ºC. Redondeado a 0,7ºC.  
00AF   3408           00046         retlw   d'8'    ; (DS1624_Decimal)=b'1100'. Mide 0,7500ºC. Redondeado a 0,8ºC.
00B0   3408           00047         retlw   d'8'    ; (DS1624_Decimal)=b'1101'. Mide 0,8125ºC. Redondeado a 0,8ºC.
00B1   3409           00048         retlw   d'9'    ; (DS1624_Decimal)=b'1110'. Mide 0,8750ºC. Redondeado a 0,9ºC.
00B2   3409           00049         retlw   d'9'    ; (DS1624_Decimal)=b'1111'. Mide 0,9375ºC. Redondeado a 0,9ºC.
00B3                  00050 DS1624_FinTablaRedondeo
                      00051 
                      00052         IF (DS1624_FinTablaRedondeo > 0xFF)
                      00053                 ERROR   "¡CUIDADO!: La tabla ha superado el tamaño de la página de los"
                      00054                 MESSG   "primeros 256 bytes de memoria ROM. NO funcionará correctamente."
                      00055         ENDIF
                      00056 
                      00057 ; Subrutina "DS1624_Inicializa" ---------------------------------------------------------
                      00058 ;
                      00059 ; Configura el DS1624 para que trabaje en modo One-Shot.
                      00060 
00B3                  00061 DS1624_Inicializa
00B3   3090           00062         movlw   DS1624_DireccionEscritura       ; Apunta al dispositivo.
00B4   2079           00063         call    I2C_EnviaByte
00B5   30AC           00064         movlw   Comando_AccessConfig    ; Comando indicando que el próximo byte es la
00B6   2079           00065         call    I2C_EnviaByte           ; palabra de control.
00B7   304B           00066         movlw   b'01001011'             ; Carga la palabra de control para modo One-Shot.
00B8   2079           00067         call    I2C_EnviaByte
00B9   2073           00068         call    I2C_EnviaStop
                      00069 ;       call    DS1624_IniciaConversion ; Inicia la conversión de temperatura.
                      00070 ;       return
                      00071 
                      00072 ; Subrutina "DS1624_IniciaConversion" ---------------------------------------------------------
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00073 ;
                      00074 ; Inicializa el DS1624 para que comience la conversión de temperatura.
                      00075 ;
00BA                  00076 DS1624_IniciaConversion
00BA   206B           00077         call    I2C_EnviaStart          ; Configura el DS1624.
00BB   3090           00078         movlw   DS1624_DireccionEscritura       ; Apunta al dispositivo.
00BC   2079           00079         call    I2C_EnviaByte
00BD   30EE           00080         movlw   Comando_StartConvert_T  ; Comando que ordena el comienzo de la conversión 
00BE   2079           00081         call    I2C_EnviaByte           ; de la temperatura.
00BF   2073           00082         call    I2C_EnviaStop
00C0   0008           00083         return
                      00084 
                      00085 ; Subrutina "DS1624_LeeTemperatura" -----------------------------------------------------
                      00086 ;
                      00087 ; El DS1624 lee la temperatura en un formato ejemplificado como sigue:
                      00088 ;
                      00089 ; +125.0000 ºC  01111101 00000000
                      00090 ; + 25.0625 ºC  00011001 00010000
                      00091 ; +  0.5000 ºC  00000000 10000000
                      00092 ; +  0.0000 ºC  00000000 00000000
                      00093 ; -  0.5000 ºC  11111111 10000000
                      00094 ; - 25.0625 ºC  11100110 11110000
                      00095 ; - 55.0000 ºC  11001001 00000000
                      00096 ;
                      00097 ; Se observa que:
                      00098 ;    -  El formato es de dos bytes. El primer byte es la parte entera y el segundo la 
                      00099 ;       parte decimal.
                      00100 ;    -  Las temperaturas vienen dadas en complemento a 2.
                      00101 ;    -  Las temperaturas positivas comienzan con el bit MSB a cero: b'0xxxxxxx xxxxxxxx'.
                      00102 ;    -  Las temperaturas negativas comienzan con e1 bit MSB a uno:  b'1xxxxxxx xxxxxxxx'.
                      00103 ;
                      00104 ; Esta subrutina lee la temperatura, proporcionando tres datos: 
                      00105 ; Salida:       - En (DS1624_Temperatura) la parte entera del valor de la temperatura medida.
                      00106 ;               - En (DS1624_Decimal) la parte decimal del valor de la temperatura.
                      00107 ;               - En (DS1624_Signo)=b'11111111' si la temperatura es negativa y 
                      00108 ;                 (DS1624_Signo)=b'00000000' si es positiva.
                      00109 ;
00C1                  00110 DS1624_LeeTemperatura
00C1   100F           00111         bcf     I2C_UltimoByteLeer
00C2   206B           00112         call    I2C_EnviaStart
00C3   3090           00113         movlw   DS1624_DireccionEscritura       ; Apunta al dispositivo.
00C4   2079           00114         call    I2C_EnviaByte
00C5   30AA           00115         movlw   Comando_ReadTemperature ; Comando de lectura de la temperatura.
00C6   2079           00116         call    I2C_EnviaByte
00C7   206B           00117         call    I2C_EnviaStart          ; Comienza a leer.
00C8   3091           00118         movlw   DS1624_DireccionLectura ; Apunta al dispositivo.
00C9   2079           00119         call    I2C_EnviaByte
00CA   208E           00120         call    I2C_LeeByte             ; Lee el primer byte
00CB   0090           00121         movwf   DS1624_Temperatura      ; y lo guarda.
00CC   140F           00122         bsf     I2C_UltimoByteLeer      ; El próximo es el último byte a leer.
00CD   208E           00123         call    I2C_LeeByte             ; Lee el segundo byte
00CE   0091           00124         movwf   DS1624_Decimal          ; y lo guarda.
00CF   2073           00125         call    I2C_EnviaStop
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00126 ;
                      00127 ; Ahora deduce si la temperatura es positiva o negativa y halla su valor absoluto.
                      00128 ;
00D0   0192           00129         clrf    DS1624_Signo            ; Supone que la temperatura es positiva.
00D1   1F90           00130         btfss   DS1624_Temperatura,7    ; Si el bit MSB es "1", la temperatura es negativa.
00D2   28DA           00131         goto    DS1624_FinLeeTemperatura        ; La temperatura es positiva y salta.
00D3                  00132 DS1624_TemperaturaNegativa
00D3   0992           00133         comf    DS1624_Signo,F          ; Indica que la temperatura es negativa.
00D4   0991           00134         comf    DS1624_Decimal,F                ; Para hallar el valor absoluto de la
00D5   0990           00135         comf    DS1624_Temperatura,F    ; temperatura invierte los dos registros y le
00D6   3001           00136         movlw   .1                      ; suma una unidad.
00D7   0791           00137         addwf   DS1624_Decimal,F
00D8   1803           00138         btfsc   STATUS,C                ; Si hay acarreo tiene que llevarlo al byte superior.
00D9   0A90           00139         incf    DS1624_Temperatura,F    ; Le suma 1.
00DA                  00140 DS1624_FinLeeTemperatura                
00DA   0E11           00141         swapf   DS1624_Decimal,W        ; Para las temperaturas es suficiente trabajar
00DB   390F           00142         andlw   b'00001111'             ; con un solo digito decimal, por lo que
00DC   20A2           00143         call    DS1624_RedondeoDecimal  ; primero se queda con los 4 bits menos 
00DD   0091           00144         movwf   DS1624_Decimal          ; significativo y pasa a redondear su valor.
00DE   0810           00145         movf    DS1624_Temperatura,W    ; En (W) la parte entera del valor absoluto de la
00DF   0008           00146         return                          ; temperatura.
                      00147         
                      00148 ;       ===================================================================
                      00149 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00150 ;         E. Palacios, F. Remiro y L. López.
                      00151 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00152 ;       ===================================================================
                      00117         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000013            00021         R_ContA                         ; Contadores para los retardos.
  00000014            00022         R_ContB
  00000015            00023         R_ContC
                      00024         ENDC
                      00025 ;
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
00E0                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
00E0   0000           00033         nop                             ; Aporta 1 ciclo máquina.
00E1   0000           00034         nop                             ; Aporta 1 ciclo máquina.
00E2   0000           00035         nop                             ; Aporta 1 ciclo máquina.
00E3   0000           00036         nop                             ; Aporta 1 ciclo máquina.
00E4   0000           00037         nop                             ; Aporta 1 ciclo máquina.
00E5                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
00E5   0000           00039         nop                             ; Aporta 1 ciclo máquina.
00E6                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
00E6   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
00E7                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
00E7   0000           00046         nop                             ; Aporta 1 ciclo máquina.
00E8   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
00E9   28F3           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00EA                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
00EA   0000           00050         nop                             ; Aporta 1 ciclo máquina.
00EB   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00EC   28F3           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00ED                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
00ED   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00EE   28F3           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00EF                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
00EF   0000           00057         nop                             ; Aporta 1 ciclo máquina.
00F0   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00F1   28F3           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00F2                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
00F2   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
00F3                  00066 RetardoMicros
00F3   0093           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
00F4                  00068 Rmicros_Bucle
00F4   0B93           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00F5   28F4           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
00F6   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
00F7                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
00F7   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00F8   2906           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00F9                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
00F9   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00FA   2906           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00FB                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
00FB   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00FC   2906           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00FD                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
00FD   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00FE   2906           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00FF                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
00FF   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0100   2906           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0101                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0101   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0102   2906           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0103                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0103   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0104   2906           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0105                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0105   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
0106                  00111 Retardos_ms
0106   0094           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
0107                  00113 R1ms_BucleExterno
0107   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
0108   0093           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
0109                  00116 R1ms_BucleInterno
0109   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
010A   0B93           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
010B   2909           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
010C   0B94           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
010D   2907           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
010E   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
010F                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
010F   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0110   291A           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0111                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0111   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0112   291A           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0113                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0113   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0114   291A           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0115                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
0115   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0116   291A           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0117                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
0117   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0118   291A           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0119                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
0119   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
011A                  00160 Retardo_1Decima
011A   0095           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
011B                  00162 R1Decima_BucleExterno2
011B   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
011C   0094           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
011D                  00165 R1Decima_BucleExterno
011D   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
011E   0093           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
011F                  00168 R1Decima_BucleInterno          
011F   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0120   0B93           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0121   291F           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0122   0B94           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0123   291D           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0124   0B95           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0125   291B           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
0126   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00191 
                      00192 ;       ===================================================================
                      00193 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00194 ;         E. Palacios, F. Remiro y L. López.
                      00195 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00196 ;       ===================================================================
                      00197 
                      00198 
                      00199 
                      00200 
                      00118         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10, tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  00000016            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  00000017            00022         BCD_Decenas                     ; la última asignada.
  00000018            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
0127                  00026 BIN_a_BCD
0127   0196           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
0128   0197           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
0129   0098           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
012A                  00030 BCD_Resta10
012A   300A           00031         movlw   .10                     ; A las unidades se les va restando 10 en cada
012B   0218           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
012C   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?
012D   2937           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
012E                  00035 BCD_IncrementaDecenas
012E   0098           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012F   0A97           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
0130   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
0131   0217           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
0132   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?
0133   292A           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
0134                  00042 BCD_IncrementaCentenas                  ; las unidades.
0134   0197           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
0135   0A96           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
0136   292A           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
0137                  00046 BIN_BCD_Fin
0137   0E17           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
0138   0718           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
0139   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00119         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000019            00025         LCD_Dato
  0000001A            00026         LCD_GuardaDato
  0000001B            00027         LCD_GuardaTRISB
  0000001C            00028         LCD_Auxiliar1
  0000001D            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
013A                  00045 LCD_Inicializa
013A   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
013B   1005           00047         bcf     LCD_PinRS               ; R/W y E.
013C   1105           00048         bcf     LCD_PinEnable
013D   1085           00049         bcf     LCD_PinRW
013E   1283           00050         bcf     STATUS,RP0
013F   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado le indica
                      00052                                         ; que se va a escribir en el LCD.
0140   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD poniendo E=0.
0141   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando poniendo RS=0.
0142   20FD           00055         call    Retardo_20ms
0143   3030           00056         movlw   b'00110000'     
0144   2152           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0145   2101           00058         call    Retardo_5ms     
0146   3030           00059         movlw   b'00110000'     
0147   2152           00060         call    LCD_EscribeLCD
0148   20EA           00061         call    Retardo_200micros
0149   3030           00062         movlw   b'00110000'     
014A   2152           00063         call    LCD_EscribeLCD
014B   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
014C   2152           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
014D   2178           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
014E   2176           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
014F   2174           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
0150   2166           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
0151   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el pin
                      00078 ; Enable del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B que
                      00079 ; no son utilizadas para el LCD (pines RB3:RB0), primero se lee estas líneas y después se
                      00080 ; vuelve a enviar este dato sin cambiarlo.
                      00081 
0152                  00082 LCD_EscribeLCD
0152   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
0153   0099           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0154   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
0155   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
0156   0499           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
0157   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0158   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
0159   009B           00091         movwf   LCD_GuardaTRISB
015A   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
015B   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
015C   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
015D   0819           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
015E   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
015F   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD mediante un pequeño
0160   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
0161   1683           00100         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
0162   081B           00101         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
0163   0086           00102         movwf   PORTB                   ; Realmente es TRISB.
0164   1283           00103         bcf     STATUS,RP0              ; Acceso al Banco 0.
0165   0008           00104         return
                      00105 
                      00106 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00107 ;
                      00108 ;Los comandos que pueden ser ejecutados son:
                      00109 ;
0166                  00110 LCD_CursorIncr                          ; Cursor en modo incrementar.
0166   3006           00111         movlw   b'00000110'
0167   2979           00112         goto    LCD_EnviaComando
0168                  00113 LCD_Linea1                              ; Cursor al principio de la Línea 1.
0168   3080           00114         movlw   b'10000000'             ; Dirección 00h de la DDRAM
0169   2979           00115         goto    LCD_EnviaComando
016A                  00116 LCD_Linea2                              ; Cursor al principio de la Línea 2.
016A   30C0           00117         movlw   b'11000000'             ; Dirección 40h de la DDRAM
016B   2979           00118         goto    LCD_EnviaComando
016C                  00119 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
016C   3880           00120         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
016D   2979           00121         goto    LCD_EnviaComando        ; registro W.
016E                  00122 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
016E   38C0           00123         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
016F   2979           00124         goto    LCD_EnviaComando        ; registro W.
0170                  00125 LCD_OFF                         ; Pantalla apagada.
0170   3008           00126         movlw   b'00001000'
0171   2979           00127         goto    LCD_EnviaComando
0172                  00128 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
0172   300E           00129         movlw   b'00001110'
0173   2979           00130         goto    LCD_EnviaComando
0174                  00131 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
0174   300C           00132         movlw   b'00001100'
0175   2979           00133         goto    LCD_EnviaComando
0176                  00134 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
0176   3001           00135         movlw   b'00000001'             ; cursor a principio de la línea 1.
0177   2979           00136         goto    LCD_EnviaComando
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0178                  00137 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
0178   3028           00138         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00139 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00140 
                      00141 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00142 ;
                      00143 ; "LCD_EnviaComando". Escribe un comando en el registro del módulo LCD. La palabra de
                      00144 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00145 ; "LCD_Caracter". Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00146 ; a través del registro W. Trabaja en Modo Dato.
                      00147 ;
0179                  00148 LCD_EnviaComando
0179   1005           00149         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
017A   297D           00150         goto    LCD_Envia
017B                  00151 LCD_Caracter
017B   1405           00152         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
017C   2185           00153         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
017D                  00154 LCD_Envia
017D   009A           00155         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
017E   2152           00156         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
017F   0E1A           00157         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00158                                         ; nibble bajo del dato a enviar a parte alta del byte.
0180   2152           00159         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
0181   1C05           00160         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
0182   2103           00161         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
0183   20EF           00162         call    Retardo_50micros
0184   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
0185                  00177 LCD_CodigoCGROM
0185   0099           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
0186                  00179 LCD_EnheMinuscula                       ; un carácter especial.
0186   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
0187   1D03           00181         btfss   STATUS,Z
0188   298C           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
0189   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
018A   0099           00184         movwf   LCD_Dato
018B   2999           00185         goto    LCD_FinCGROM
018C                  00186 LCD_EnheMayuscula
018C   0819           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
018D   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
018E   1D03           00189         btfss   STATUS,Z
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

018F   2993           00190         goto    LCD_Grado               ; No es "Ñ".
0190   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
0191   0099           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
0192   2999           00193         goto    LCD_FinCGROM    
0193                  00194 LCD_Grado
0193   0819           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0194   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
0195   1D03           00197         btfss   STATUS,Z
0196   2999           00198         goto    LCD_FinCGROM            ; No es "º".
0197   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
0198   0099           00200         movwf   LCD_Dato
0199                  00201 LCD_FinCGROM
0199   0819           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
019A   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
019B                  00209 LCD_LineaEnBlanco
019B   3010           00210         movlw   LCD_CaracteresPorLinea
019C   29A2           00211         goto    LCD_EnviaBlancos
019D                  00212 LCD_UnEspacioBlanco
019D   3001           00213         movlw   .1
019E   29A2           00214         goto    LCD_EnviaBlancos
019F                  00215 LCD_DosEspaciosBlancos
019F   3002           00216         movlw   .2
01A0   29A2           00217         goto    LCD_EnviaBlancos
01A1                  00218 LCD_TresEspaciosBlancos
01A1   3003           00219         movlw   .3
01A2                  00220 LCD_EnviaBlancos
01A2   009C           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
01A3                  00222 LCD_EnviaOtroBlanco     
01A3   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
01A4   217B           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
01A5   0B9C           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
01A6   29A3           00226         goto    LCD_EnviaOtroBlanco
01A7   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
01A8                  00240 LCD_Byte
01A8   009D           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
01A9   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01AA   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
01AB   29B0           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
01AC   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
01AD   217B           00246         call    LCD_Caracter
01AE   29B2           00247         goto    LCD_VisualizaBajo
                      00248 
01AF                  00249 LCD_ByteCompleto
01AF   009D           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
01B0                  00251 LCD_VisualizaAlto
01B0   0E1D           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
01B1   21B3           00253         call    LCD_Nibble              ; Lo visualiza.
01B2                  00254 LCD_VisualizaBajo
01B2   081D           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
01B3                  00266 LCD_Nibble
01B3   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
01B4   009C           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
01B5   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
01B6   1C03           00270         btfss   STATUS,C        
01B7   29BB           00271         goto    LCD_EnviaByteLetra
01B8   081C           00272         movf    LCD_Auxiliar1,W
01B9   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
01BA   29BD           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
01BB                  00275 LCD_EnviaByteLetra
01BB   081C           00276         movf    LCD_Auxiliar1,W
01BC   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
01BD                  00278 LCD_FinVisualizaDigito
01BD   297B           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00281                                         
                      00282 ;       ===================================================================
                      00283 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00284 ;         E. Palacios, F. Remiro y L. López.
                      00285 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00286 ;       ===================================================================
                      00120         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  0000001E            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  0000001F            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
01BE                  00042 LCD_Mensaje
01BE   009E           00043         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
01BF   3005           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
01C0   029E           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
01C1   039E           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
01C2                  00047 LCD_VisualizaOtroCaracter
01C2   081E           00048         movf    LCD_ApuntaCaracter,W
01C3   2005           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
01C4   009F           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
01C5   089F           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
01C6   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
01C7   29CB           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
01C8                  00054 LCD_NoUltimoCaracter
01C8   217B           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
01C9   0A9E           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
01CA   29C2           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
01CB                  00058 LCD_FinMensaje
01CB   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  00000020            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
01CC                  00073 LCD_MensajeMovimiento
01CC   009E           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
01CD   3005           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
01CE   029E           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
01CF   039E           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
01D0                  00078 LCD_PrimeraPosicion
01D0   01A0           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
01D1   2176           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
01D2                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
01D2   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
01D3   0220           00083         subwf   LCD_CursorPosicion,W
01D4   1D03           00084         btfss   STATUS,Z
01D5   29DB           00085         goto    LCD_NoEsFinalLinea
01D6                  00086 LCD_EsFinalLinea
01D6   20F7           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
01D7   20F7           00088         call    Retardo_200ms
01D8   300F           00089         movlw   LCD_CaracteresPorLinea-1; Apunta a la posición del segundo carácter visualizado
01D9   029E           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla, que será el primero en la siguiente
01DA   29D0           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
01DB                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
01DB   081E           00093         movf    LCD_ApuntaCaracter,W
01DC   2005           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
01DD   009F           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
01DE   089F           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
01DF   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
01E0   29E5           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
01E1                  00099 LCD_NoUltimoCaracter2
01E1   217B           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
01E2   0AA0           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
01E3   0A9E           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
01E4   29D2           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
01E5                  00105 LCD_FinMovimiento                       ; de la línea.
01E5   0008           00106         return                          ; Vuelve al programa principal.
                      00107         
                      00108 ;       ===================================================================
                      00109 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00110 ;         E. Palacios, F. Remiro y L. López.
                      00111 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00112 ;       ===================================================================     
                      00113         
                      00121         END
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 22


SYMBOL TABLE
  LABEL                             VALUE 

BCD_Centenas                      00000016
BCD_Decenas                       00000017
BCD_IncrementaCentenas            00000134
BCD_IncrementaDecenas             0000012E
BCD_Resta10                       0000012A
BCD_Unidades                      00000018
BIN_BCD_Fin                       00000137
BIN_a_BCD                         00000127
C                                 00000000
Carga2s                           00000028
Comando_AccessConfig              000000AC
Comando_ReadTemperature           000000AA
Comando_StartConvert_T            000000EE
DC                                00000001
DS1624_Decimal                    00000011
DS1624_DireccionEscritura         00000090
DS1624_DireccionLectura           00000091
DS1624_FinLeeTemperatura          000000DA
DS1624_FinTablaRedondeo           000000B3
DS1624_IniciaConversion           000000BA
DS1624_Inicializa                 000000B3
DS1624_LeeTemperatura             000000C1
DS1624_RedondeoDecimal            000000A2
DS1624_Signo                      00000012
DS1624_Temperatura                00000010
DS1624_TemperaturaNegativa        000000D3
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
Fin_Termometro                    00000046
GIE                               00000007
I2C_ContadorBits                  0000000D
I2C_Dato                          0000000E
I2C_EnviaBit                      0000007C
I2C_EnviaByte                     00000079
I2C_EnviaCero                     0000007F
I2C_EnviaStart                    0000006B
I2C_EnviaStop                     00000073
I2C_EnviaUno                      00000081
I2C_Flags                         0000000F
I2C_FlancoSCL                     00000082
I2C_LeeBit                        00000091
I2C_LeeByte                       0000008E
I2C_UltimoByteLeer                I2C_Flags,0
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 23


SYMBOL TABLE
  LABEL                             VALUE 

INTF                              00000001
IRP                               00000007
Inicio                            0000002A
LCD_2Lineas4Bits5x7               00000178
LCD_ApuntaCaracter                0000001E
LCD_Auxiliar1                     0000001C
LCD_Auxiliar2                     0000001D
LCD_Borra                         00000176
LCD_BusDatos                      PORTB
LCD_Byte                          000001A8
LCD_ByteCompleto                  000001AF
LCD_Caracter                      0000017B
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   00000185
LCD_CursorIncr                    00000166
LCD_CursorOFF                     00000174
LCD_CursorON                      00000172
LCD_CursorPosicion                00000020
LCD_Dato                          00000019
LCD_DosEspaciosBlancos            0000019F
LCD_EnheMayuscula                 0000018C
LCD_EnheMinuscula                 00000186
LCD_Envia                         0000017D
LCD_EnviaBlancos                  000001A2
LCD_EnviaByteLetra                000001BB
LCD_EnviaComando                  00000179
LCD_EnviaOtroBlanco               000001A3
LCD_EsFinalLinea                  000001D6
LCD_EscribeLCD                    00000152
LCD_FinCGROM                      00000199
LCD_FinMensaje                    000001CB
LCD_FinMovimiento                 000001E5
LCD_FinVisualizaDigito            000001BD
LCD_Grado                         00000193
LCD_GuardaDato                    0000001A
LCD_GuardaTRISB                   0000001B
LCD_Inicializa                    0000013A
LCD_Linea1                        00000168
LCD_Linea2                        0000016A
LCD_LineaEnBlanco                 0000019B
LCD_Mensaje                       000001BE
LCD_MensajeMovimiento             000001CC
LCD_Nibble                        000001B3
LCD_NoEsFinalLinea                000001DB
LCD_NoUltimoCaracter              000001C8
LCD_NoUltimoCaracter2             000001E1
LCD_OFF                           00000170
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                0000016C
LCD_PosicionLinea2                0000016E
LCD_PrimeraPosicion               000001D0
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 24


SYMBOL TABLE
  LABEL                             VALUE 

LCD_TresEspaciosBlancos           000001A1
LCD_UnEspacioBlanco               0000019D
LCD_ValorCaracter                 0000001F
LCD_VisualizaAlto                 000001B0
LCD_VisualizaBajo                 000001B2
LCD_VisualizaCaracter             000001D2
LCD_VisualizaOtroCaracter         000001C2
MensajeGradoCentigrado            00000025
MensajePublicitario               00000006
MensajeTemperatura                00000017
Mensajes                          00000005
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000038
R1Decima_BucleExterno             0000011D
R1Decima_BucleExterno2            0000011B
R1Decima_BucleInterno             0000011F
R1ms_BucleExterno                 00000107
R1ms_BucleInterno                 00000109
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000013
R_ContB                           00000014
R_ContC                           00000015
Registro50ms                      0000000C
RetardoMicros                     000000F3
Retardo_100micros                 000000ED
Retardo_100ms                     000000F9
Retardo_10micros                  000000E0
Retardo_10ms                      000000FF
Retardo_10s                       00000111
Retardo_1Decima                   0000011A
Retardo_1ms                       00000105
Retardo_1s                        00000117
Retardo_200micros                 000000EA
Retardo_200ms                     000000F7
Retardo_20micros                  000000F2
Retardo_20ms                      000000FD
Retardo_20s                       0000010F
Retardo_2ms                       00000103
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 25


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_2s                        00000115
Retardo_4micros                   000000E6
Retardo_500micros                 000000E7
Retardo_500ms                     00000119
Retardo_50micros                  000000EF
Retardo_50ms                      000000FB
Retardo_5micros                   000000E5
Retardo_5ms                       00000101
Retardo_5s                        00000113
Retardos_ms                       00000106
Rmicros_Bucle                     000000F4
SCL                               PORTA,3
SCL_AltaImpedancia                00000065
SCL_Bajo                          00000060
SCL_EsperaNivelAlto               00000068
SDA                               PORTA,4
SDA_AltaImpedancia                0000005C
SDA_Bajo                          00000057
STATUS                            00000003
ServicioInterrupcion              00000039
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0_Carga50ms                    FFFFFF3D
TRISA                             00000085
TRISB                             00000086
TemperaturaNegativa               0000004B
TemperaturaPositiva               0000004D
Termometro                        0000003D
VisualizaTermometro               00000047
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
MPASM 03.50 Released                    I2C_TERMOMETRO_01.ASM   10-26-2003  17:51:46         PAGE 26


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX---------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   483
Program Memory Words Free:   541


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

