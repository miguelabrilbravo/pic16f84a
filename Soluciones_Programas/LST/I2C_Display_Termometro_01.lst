MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;******************************* I2C_Display_Termometro_01.asm ************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Programa de control para un termómetro digital con el sensor de temperatura DS1624,
                      00010 ; y visualización en cuatro displays.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 
2007   3FF1           00014         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00015         LIST       P=16F84A
                      00016         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00017 
                      00018         CBLOCK   0x0C
  0000000C            00019         Registro50ms                    ; Guarda los incrementos cada 50 ms.
                      00020         ENDC
                      00021 
  FFFFFF3D            00022 TMR0_Carga50ms  EQU     -d'195'         ; Para conseguir interrupción cada 50 ms.
  00000028            00023 Carga2s         EQU     d'40'           ; Leerá cada 2s = 40 x 50ms = 2000ms.
                      00024 
                      00025 ; ZONA DE CÓDIGOS ********************************************************************
                      00026 
0000                  00027         ORG     0
0000   2805           00028         goto    Inicio
0004                  00029         ORG     4
0004   2811           00030         goto    Termometro
0005                  00031 Inicio
0005   20E3           00032         call    DS1624_Inicializa               ; Configura el DS1624 e inicia la conversión.
0006   1683           00033         bsf     STATUS,RP0
0007   3007           00034         movlw   b'00000111'             ; Preescaler de 256 para el TMR0.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0008   0081           00035         movwf   OPTION_REG
0009   1283           00036         bcf     STATUS,RP0
000A   303D           00037         movlw   TMR0_Carga50ms          ; Carga el TMR0 en complemento a 2.
000B   0081           00038         movwf   TMR0
000C   3028           00039         movlw   Carga2s                 ; Y el registro cuyo decremento contará los 2 s.
000D   008C           00040         movwf   Registro50ms
000E   30A0           00041         movlw   b'10100000'             ; Activa interrupción del TMR0 (TOIE),
000F   008B           00042         movwf   INTCON                  ; y la general (GIE).
0010                  00043 Principal
0010   2810           00044         goto    Principal
                      00045 
                      00046 ; Subrutina "Termometro" ----------------------------------------------------------------
                      00047 ;
                      00048 ; Esta subrutina lee y visualiza el termómetro cada 2 segundos aproximadamente. Se ejecuta
                      00049 ; debido a la petición de interrupción del Timer 0, cada 50 ms. Para conseguir una
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00050 ; temporización de 2 s habrá que repetir 40 veces el lazo de 50 ms (40x50ms=2000ms=2s).
                      00051 ;
0011                  00052 Termometro
0011   303D           00053         movlw   TMR0_Carga50ms
0012   0081           00054         movwf   TMR0                    ; Recarga el TMR0.
0013   0B8C           00055         decfsz  Registro50ms,F          ; Decrementa el contador.
0014   281A           00056         goto    Fin_Termometro          ; No han pasado 2 segundos y por tanto sale.
0015   3028           00057         movlw   Carga2s                 ; Repone el contador nuevamente.
0016   008C           00058         movwf   Registro50ms
0017   20F1           00059         call    DS1624_LeeTemperatura   ; Lee la temperatura.
0018   20EA           00060         call    DS1624_IniciaConversion ; Comienza conversión para la siguiente lectura.
0019   201C           00061         call    VisualizaTermometro     ; Visualiza el resultado de la lectura.
001A                  00062 Fin_Termometro
001A   110B           00063         bcf     INTCON,T0IF
001B   0009           00064         retfie
                      00065 
                      00066 ; Subrutina "VisualizaTermometro" -----------------------------------------------------------------
                      00067 ;
                      00068 ; Visualiza la temperatura en los cuatro displays de siete segmentos controlados por el SAA1064.
                      00069 ; Se escribe comenzando por el final, por el display de la derecha.
                      00070 ;
                      00071 ; Entradas:     - (DS1624_Temperatura), temperatura medida en valor absoluto.
                      00072 ;               - (DS1624_Decimal), parte decimal de la temperatura medida.
                      00073 ;               - (DS1624_Signo), indica signo de la temperatura.
                      00074 
  00000070            00075 SAA1064_Direccion       EQU     b'01110000'     ; SAA1064 como esclavo en bus I2C
                      00076 
001C                  00077 VisualizaTermometro
001C   0811           00078         movf    DS1624_Temperatura,W    ; Hay que visualizar el valor absoluto de la
001D   2110           00079         call    BIN_a_BCD               ; temperatura en BCD.
001E   0091           00080         movwf   DS1624_Temperatura      ; Guarda el valor de la temperatura en BCD.
001F   209B           00081         call    I2C_EnviaStart          ; Envía condición de Start.
0020   3070           00082         movlw   SAA1064_Direccion       ; Apunta al SAA1064.
0021   20A9           00083         call    I2C_EnviaByte
0022   0103           00084         clrw                            ; El registro de control está en la posición 0.
0023   20A9           00085         call    I2C_EnviaByte
0024   3047           00086         movlw   b'01000111'             ; Palabra de control para luminosidad media
0025   20A9           00087         call    I2C_EnviaByte           ; (12 mA) y visualización dinámica multiplexada.
0026   30BA           00088         movlw   'º'                     ; Escribe el símbolo de grados.
0027   2042           00089         call    ASCII_a_7Segmentos      ; Última letra debido a la disposición de los
0028   20A9           00090         call    I2C_EnviaByte           ; displays.
0029   1F93           00091         btfss   DS1624_Signo,7          ; ¿Temperatura negativa?
002A   2835           00092         goto    TemperaturaPositiva             ; No, la temperatura es positiva.
002B                  00093 TemperaturaNegativa
002B   0811           00094         movf    DS1624_Temperatura,W    ; Recupera el valor de la temperatura en BCD.   
002C   2040           00095         call    Numero_a_7Segmentos     ; Las unidades se pasan a código siete segmentos.
002D   20A9           00096         call    I2C_EnviaByte           ; Lo envía al display.
002E   0E11           00097         swapf   DS1624_Temperatura,W    ; Las decenas se pasan a código de siete
002F   2040           00098         call    Numero_a_7Segmentos     ; segmentos.
0030   20A9           00099         call    I2C_EnviaByte           ; Lo envía al display.
0031   302D           00100         movlw   '-'                     ; Visualiza el signo "-" de temperatura negativa.
0032   2042           00101         call    ASCII_a_7Segmentos      ; Lo pasa a siete segmentos.
0033   20A9           00102         call    I2C_EnviaByte           ; Lo envía al display.
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0034   283F           00103         goto    Fin_VisualizaTemperatura
0035                  00104 TemperaturaPositiva
0035   0812           00105         movf    DS1624_Decimal,W        ; Visualiza la parte decimal.
0036   2040           00106         call    Numero_a_7Segmentos
0037   20A9           00107         call    I2C_EnviaByte           ; Lo envía al display.
0038   0811           00108         movf    DS1624_Temperatura,W    ; Recupera el valor de la temperatura en BCD.   
0039   2040           00109         call    Numero_a_7Segmentos     ; Las unidades se pasan a código siete segmentos.
003A   3880           00110         iorlw   b'10000000'             ; Le añade el punto decimal.
003B   20A9           00111         call    I2C_EnviaByte           ; Lo envía al display.
003C   0E11           00112         swapf   DS1624_Temperatura,W    ; Las decenas se pasan a código de siete
003D   2040           00113         call    Numero_a_7Segmentos     ; segmentos.
003E   20A9           00114         call    I2C_EnviaByte           ; Lo envía al display.
003F                  00115 Fin_VisualizaTemperatura
003F   0008           00116         return
                      00117 
                      00118         INCLUDE  <DISPLAY_7S.INC>
                      00001 ;**************************** Librería "DISPLAY_7S.INC **********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Subrutinas para convertir un código ASCII en su valor equivalente en 7 segmentos y así
                      00010 ; poder activar displays.
                      00011 ;
                      00012 ; Si el código ASCII es menor que el signo más '+' o mayor  que la letra zeta 'Z' obtiene
                      00013 ; el código erróneo b'10000000' para encender sólo el punto decimal del display.
                      00014 ;
                      00015 ; Si se trata de un número hay que ejecutar la subrutina "Numero_a_7Segmentos" que convierte
                      00016 ; un numero (de 0 a 9) en su equivalente en código de 7 segmentos.
                      00017 ;
                      00018 ; Entrada: En registro W, el dato en código ASCII a convertir.
                      00019 ; Salida : En registro W, el código 7 segmentos.
                      00020 
                      00021         CBLOCK
  0000000D            00022         Display7s_Dato                  ; Aquí se reservará el valor del dato de entrada.
                      00023         ENDC
                      00024         
0040                  00025 Numero_a_7Segmentos
0040   390F           00026         andlw   b'00001111'             ; Se queda con el nibble bajo.
0041   3E30           00027         addlw   '0'                     ; Se pasa a ASCII sumándole el valor ASCII
                      00028                                         ; del "0" y ejecuta "ASCII_7_Segmentos".
0042                  00029 ASCII_a_7Segmentos
0042   008D           00030         movwf   Display7s_Dato          ; Guarda el valor del carácter.
0043   3C20           00031         sublw   ' '                     ; Comprueba si es " " (espacio).
0044   1903           00032         btfsc   STATUS,Z                ; ¿Es distinta de " " (espacio)?, ¿Z=0?
0045   3400           00033         retlw   00h                     ; Es " ". Devuelve el código 7-Segmentos del " ".
0046   080D           00034         movf    Display7s_Dato,W                ; Recupera el valor del dato de entrada.
0047   3CD1           00035         sublw   'Ñ'                     ; Comprueba si es "Ñ".
0048   1903           00036         btfsc   STATUS,Z                ; ¿Es distinta de "Ñ"?, ¿Z=0?
0049   3455           00037         retlw   55h                     ; Es "Ñ". Devuelve el código 7-Segmentos de "Ñ".
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

004A   080D           00038         movf    Display7s_Dato,W                ; Recupera el valor del dato de entrada.
004B   3CBA           00039         sublw   'º'                     ; Comprueba si es "º".
004C   1903           00040         btfsc   STATUS,Z                ; ¿Es distinta de "º"?, ¿Z=0?
004D   3463           00041         retlw   63h                     ; Es "º". Devuelve el código 7-Segmentos de "º".
                      00042 ;
004E   080D           00043         movf    Display7s_Dato,W                ; Comprueba si el código ASCII es mayor que la "Z".
004F   3C5A           00044         sublw   'Z'                     ; (W)='Z'-(Display7s_Dato)
0050   1C03           00045         btfss   STATUS,C                ; ¿C=1?, ¿(W) positivo?, ¿'Z'>=(Display7s_Dato)?
0051   3480           00046         retlw   b'10000000'             ; Si el código ASCII es mayor que 'Z' es un error.
0052   302B           00047         movlw   '+'                     ; Averigua en qué orden está el carácter leído
0053   020D           00048         subwf   Display7s_Dato,W                ; dentro de la tabla de conversión, respecto del
0054   1C03           00049         btfss   STATUS,C                ; primero que es '+'.
0055   3480           00050         retlw   b'10000000'             ; Si el código ASCII es menor que '+' es un error.
                      00051 ;
0056   0782           00052         addwf   PCL,F                   ; Obtiene el código 7 segmentos.
0057                  00053 InicioTablaASCII
0057   3446 3404 3440 00054         DT      46h, 04h, 40h, 80h, 00h, 3Fh, 06h, 5Bh, 4Fh, 66h, 6Dh   ; Signos y
       3480 3400 343F 
       3406 345B 344F 
       3466 346D 
0062   347D 3407 347F 00055         DT      7Dh, 07h, 7Fh, 67h, 41h, 88h, 00h, 48h, 00h, 00h, 00h   ; números.
       3467 3441 3488 
       3400 3448 3400 
       3400 3400 
006D   3477 347C 3439 00056         DT      77h, 7Ch, 39h, 5Eh, 79h, 71h, 6Fh, 76h, 19h, 1Eh, 7Ah, 38h, 37h ; Letras.
       345E 3479 3471 
       346F 3476 3419 
       341E 347A 3438 
       3437 
007A   3454 343F 3473 00057         DT      54h, 3Fh, 73h, 67h, 50h, 6Dh, 78h, 1Ch, 3Eh, 1Dh, 70h, 6Eh, 49h
       3467 3450 346D 
       3478 341C 343E 
       341D 3470 346E 
       3449 
0087                  00058 FinTablaASCII
                      00059 ;
                      00060 ; Esta es la tabla para la visualización en display de siete segmentos (Ver figura 11-3).
                      00061 
                      00062         IF (FinTablaASCII > 0xFF)
                      00063                 ERROR   "¡CUIDADO!: La tabla ha superado el tamaño de la página de los"
                      00064                 MESSG   "primeros 256 bytes de memoria ROM. NO funcionará correctamente."
                      00065         ENDIF
                      00066 
                      00067 ;       ===================================================================
                      00068 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00069 ;         E. Palacios, F. Remiro y L. López.
                      00070 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00071 ;       ===================================================================
                      00119         INCLUDE  <BUS_I2C.INC>
                      00001 ;**************************** Librería "BUS_I2C.INC" ************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control del bus serie I2C, 
                      00010 ; por parte de un solo microcontrolador maestro.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 ;
                      00014         CBLOCK
  0000000E            00015         I2C_ContadorBits                ; Cuenta los bits a transmitir o a recibir.
  0000000F            00016         I2C_Dato                        ; Dato a transmitir o recibido.
  00000010            00017         I2C_Flags                       ; Guarda la información del estado del bus I2C.
                      00018         ENDC
                      00019 
                      00020 #DEFINE I2C_UltimoByteLeer      I2C_Flags,0
                      00021 ;    -  (I2C_UltimoByteLeer)=0, NO es el último byte a leer por el maestro.
                      00022 ;    -  (I2C_UltimoByteLeer)=1, SÍ es el último byte a leer por el maestro.
                      00023 
                      00024 ; La definición de las líneas SCL y SDA del bus I2C se puede cambiar según las
                      00025 ; necesidades del hardware.
                      00026 
                      00027 #DEFINE SCL     PORTA,3                 ; Línea SCL del bus I2C.
                      00028 #DEFINE SDA     PORTA,4                 ; Línea SDA del bus I2C.
                      00029 ;
                      00030 ; Subrutina "SDA_Bajo" -------------------------------------------------------------------------------
                      00031 ;
0087                  00032 SDA_Bajo
0087   1683           00033         bsf     STATUS,RP0              ; Configura la línea SDA como salida.
0088   1205           00034         bcf     SDA
0089   1283           00035         bcf     STATUS,RP0
008A   1205           00036         bcf     SDA                     ; SDA en bajo.
008B   0008           00037         return
                      00038 ;
                      00039 ; Subrutina "SDA_AltaImpedancia" --------------------------------------------------------
                      00040 ;
008C                  00041 SDA_AltaImpedancia
008C   1683           00042         bsf     STATUS,RP0              ; Configura la línea SDA entrada.
008D   1605           00043         bsf     SDA                     ; Lo pone en alta impedancia y, gracias a la
008E   1283           00044         bcf     STATUS,RP0              ; Rp de esta línea, se mantiene a nivel alto.
008F   0008           00045         return
                      00046 ;
                      00047 ; Subrutina "SCL_Bajo" ------------------------------------------------------------------
                      00048 ;
0090                  00049 SCL_Bajo
0090   1683           00050         bsf     STATUS,RP0
0091   1185           00051         bcf     SCL                     ; Configura la línea SCL como salida.
0092   1283           00052         bcf     STATUS,RP0
0093   1185           00053         bcf     SCL                     ; La línea de reloj SCL en bajo.
0094   0008           00054         return
                      00055 ;
                      00056 ; Subrutina "SCL_AltaImpedancia" --------------------------------------------------------
                      00057 ;
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0095                  00058 SCL_AltaImpedancia
0095   1683           00059         bsf     STATUS,RP0              ; Configura la línea SCL entrada.
0096   1585           00060         bsf     SCL                     ; Lo pone en alta impedancia y, gracias a la Rp
0097   1283           00061         bcf     STATUS,RP0              ; de esta línea, se mantiene a nivel alto.
0098                  00062 SCL_EsperaNivelAlto
0098   1D85           00063         btfss   SCL                     ; Si algún esclavo mantiene esta línea en bajo
0099   2898           00064         goto    SCL_EsperaNivelAlto     ; hay que esperar.
009A   0008           00065         return
                      00066 ;
                      00067 ; Subrutina "I2C_EnviaStart" ------------------------------------------------------------
                      00068 ;
                      00069 ; Esta subrutina envía una condición de Start o inicio.
                      00070 ;
009B                  00071 I2C_EnviaStart
009B   208C           00072         call    SDA_AltaImpedancia      ; Línea SDA en alto.
009C   2095           00073         call    SCL_AltaImpedancia      ; Línea SCL en alto.
009D   2129           00074         call    Retardo_4micros         ; Tiempo tBUF del protocolo.
009E   2087           00075         call    SDA_Bajo                ; Flanco de bajada de SDA mientras SCL está alto.
009F   2129           00076         call    Retardo_4micros         ; Tiempo tHD;STA del protocolo.
00A0   2090           00077         call    SCL_Bajo                ; Flanco de bajada del reloj SCL.
00A1   2129           00078         call    Retardo_4micros 
00A2   0008           00079         return
                      00080 ;
                      00081 ; Subrutina "I2C_EnviaStop" -------------------------------------------------------------
                      00082 ;
                      00083 ; Esta subrutina envía un condición de Stop o parada.
                      00084 ;
00A3                  00085 I2C_EnviaStop
00A3   2087           00086         call    SDA_Bajo
00A4   2095           00087         call    SCL_AltaImpedancia      ; Flanco de subida de SCL.
00A5   2129           00088         call    Retardo_4micros         ; Tiempo tSU;STO del protocolo.
00A6   208C           00089         call    SDA_AltaImpedancia      ; Flanco de subida de SDA.
00A7   2129           00090         call    Retardo_4micros         ; Tiempo tBUF del protocolo.
00A8   0008           00091         return
                      00092 ;
                      00093 ; Subrutina "I2C_EnviaByte" -------------------------------------------------------------
                      00094 ;
                      00095 ; El microcontrolador maestro transmite un byte por el bus I2C, comenzando por el bit
                      00096 ; MSB. El byte a transmitir debe estar cargado previamente en el registro de trabajo W.
                      00097 ; De la subrutina ejecutada anteriormente I2C_EnviaStart o esta misma I2C_EnviaByte, 
                      00098 ; la línea SCL se debe encontrar a nivel bajo al menos durante 5 µs.
                      00099 ;
00A9                  00100 I2C_EnviaByte
00A9   008F           00101         movwf   I2C_Dato                        ; Almacena el byte a transmitir.
00AA   3008           00102         movlw   0x08                    ; A transmitir 8 bits.
00AB   008E           00103         movwf   I2C_ContadorBits
00AC                  00104 I2C_EnviaBit
00AC   0D8F           00105         rlf     I2C_Dato,F              ; Chequea el bit, llevándolo previamente al Carry.
00AD   1803           00106         btfsc   STATUS,C
00AE   28B1           00107         goto    I2C_EnviaUno
00AF                  00108 I2C_EnviaCero
00AF   2087           00109         call    SDA_Bajo                ; Si es "0" envía un nivel bajo.
00B0   28B2           00110         goto    I2C_FlancoSCL
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B1                  00111 I2C_EnviaUno
00B1   208C           00112         call    SDA_AltaImpedancia      ; Si es "1" lo activará a alto.
00B2                  00113 I2C_FlancoSCL
00B2   2095           00114         call    SCL_AltaImpedancia      ; Flanco de subida del SCL.
00B3   2129           00115         call    Retardo_4micros         ; Tiempo tHIGH del protocolo.
00B4   2090           00116         call    SCL_Bajo                ; Termina el semiperiodo positivo del reloj.
00B5   2129           00117         call    Retardo_4micros         ; Tiempo tHD;DAT del protocolo.
00B6   0B8E           00118         decfsz  I2C_ContadorBits,F              ; Lazo para los ocho bits.
00B7   28AC           00119         goto    I2C_EnviaBit
                      00120 ;
00B8   208C           00121         call    SDA_AltaImpedancia      ; Libera la línea de datos.
00B9   2095           00122         call    SCL_AltaImpedancia      ; Pulso en alto de reloj para que el esclavo
00BA   2129           00123         call    Retardo_4micros         ; pueda enviar el bit ACK.
00BB   2090           00124         call    SCL_Bajo
00BC   2129           00125         call    Retardo_4micros
00BD   0008           00126         return
                      00127 ;
                      00128 ; Subrutina "I2C_LeeByte" ---------------------------------------------------------------
                      00129 ;
                      00130 ; El microcontrolador maestro lee un byte desde el esclavo conectado al bus I2C. El dato
                      00131 ; recibido se carga en el registro I2C_Dato y lo envía a la subrutina superior a través
                      00132 ; del registro W. Se empieza a leer por el bit de mayor peso MSB.
                      00133 ; De alguna de las subrutinas ejecutadas anteriormente I2C_EnviaStart, I2C_EnviaByte
                      00134 ; o esta misma I2C_LeeByte, la línea SCL lleva en bajo al menos 5 µs.
                      00135 
00BE                  00136 I2C_LeeByte
00BE   3008           00137         movlw   0x08                    ; A recibir 8 bits.
00BF   008E           00138         movwf   I2C_ContadorBits
00C0   208C           00139         call    SDA_AltaImpedancia      ; Deja libre la línea de datos.
00C1                  00140 I2C_LeeBit
00C1   2095           00141         call    SCL_AltaImpedancia      ; Flanco de subida del reloj.
00C2   1003           00142         bcf     STATUS,C                ; En principio supone que es "0".
00C3   1A05           00143         btfsc   SDA                     ; Lee el bit
00C4   1403           00144         bsf     STATUS,C                ; Si es "1" carga 1 en el Carry.
00C5   0D8F           00145         rlf     I2C_Dato,F              ; Lo introduce en el registro.
00C6   2090           00146         call    SCL_Bajo                ; Termina el semiperiodo positivo del reloj.
00C7   2129           00147         call    Retardo_4micros         ; Tiempo tHD;DAT del protocolo.
00C8   0B8E           00148         decfsz  I2C_ContadorBits,F              ; Lazo para los 8 bits.
00C9   28C1           00149         goto    I2C_LeeBit
                      00150 ;
                      00151 ; Chequea si este es el último byte a leer para enviar o no el bit de reconocimiento
                      00152 ; ACK en consecuencia.
                      00153 ;
00CA   1C10           00154         btfss   I2C_UltimoByteLeer      ; Si es el último, no debe enviar
                      00155                                         ; el bit de reconocimiento ACK.
00CB   2087           00156         call    SDA_Bajo                ; Envía el bit de reconocimiento ACK
                      00157                                         ; porque todavía no es el último byte a leer.
00CC   2095           00158         call    SCL_AltaImpedancia      ; Pulso en alto del SCL para transmitir el
00CD   2129           00159         call    Retardo_4micros         ; bit ACK de reconocimiento. Este es tHIGH.
00CE   2090           00160         call    SCL_Bajo                ; Pulso de bajada del SCL.
00CF   2129           00161         call    Retardo_4micros
00D0   080F           00162         movf    I2C_Dato,W              ; El resultado se manda en el registro de
00D1   0008           00163         return                          ; de trabajo W.
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00164         
                      00165 ;       ===================================================================
                      00166 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00167 ;         E. Palacios, F. Remiro y L. López.
                      00168 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00169 ;       ===================================================================
                      00120         INCLUDE  <DS1624.INC>
                      00001 ;**************************** Librería "DS1624.INC" *************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas de manejo del sensor de temperatura 
                      00010 ; DS1624. Este sensor transmite la información vía serie a través de un bus I2C.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 
                      00014         CBLOCK
  00000011            00015         DS1624_Temperatura                      ; Parte entera de la temperatura medida.
  00000012            00016         DS1624_Decimal                          ; Parte decimal de la temperatura medida.
  00000013            00017         DS1624_Signo                            ; Signo de la temperatura medida.
                      00018         ENDC
                      00019 
  00000090            00020 DS1624_DireccionEscritura               EQU     b'10010000'
  00000091            00021 DS1624_DireccionLectura         EQU     b'10010001'
                      00022 
  000000AA            00023 Comando_ReadTemperature         EQU     0AAh    ; Comandos del DS1624.
  000000EE            00024 Comando_StartConvert_T          EQU     0EEh
  000000AC            00025 Comando_AccessConfig            EQU     0ACh
                      00026 
                      00027 ; Subrutina "DS1624_RedondeaDecimal" ----------------------------------------------------
                      00028 ;
                      00029 ; Esta subrutina redondea el valor del contenido del registro de trabajo W al valor más cercano
                      00030 ; con un decimal indicado en una tabla.
                      00031 ;
00D2                  00032 DS1624_RedondeoDecimal
00D2   0782           00033         addwf   PCL,F   
00D3   3400           00034         retlw   d'0'    ; (DS1624_Decimal)=b'0000'. Mide 0,0000ºC. Redondeado a 0,0ºC.
00D4   3401           00035         retlw   d'1'    ; (DS1624_Decimal)=b'0001'. Mide 0,0625ºC. Redondeado a 0,1ºC.
00D5   3401           00036         retlw   d'1'    ; (DS1624_Decimal)=b'0010'. Mide 0,1250ºC. Redondeado a 0,1ºC.
00D6   3402           00037         retlw   d'2'    ; (DS1624_Decimal)=b'0011'. Mide 0,1875ºC. Redondeado a 0,2ºC.
00D7   3403           00038         retlw   d'3'    ; (DS1624_Decimal)=b'0100'. Mide 0,2500ºC. Redondeado a 0,3ºC.
00D8   3403           00039         retlw   d'3'    ; (DS1624_Decimal)=b'0101'. Mide 0,3125ºC. Redondeado a 0,3ºC.  
00D9   3404           00040         retlw   d'4'    ; (DS1624_Decimal)=b'0110'. Mide 0,3750ºC. Redondeado a 0,4ºC.
00DA   3404           00041         retlw   d'4'    ; (DS1624_Decimal)=b'0111'. Mide 0,4375ºC. Redondeado a 0,4ºC.
00DB   3405           00042         retlw   d'5'    ; (DS1624_Decimal)=b'1000'. Mide 0,5000ºC. Redondeado a 0,5ºC.
00DC   3406           00043         retlw   d'6'    ; (DS1624_Decimal)=b'1001'. Mide 0,5625ºC. Redondeado a 0,6ºC.
00DD   3406           00044         retlw   d'6'    ; (DS1624_Decimal)=b'1010'. Mide 0,6250ºC. Redondeado a 0,6ºC.
00DE   3407           00045         retlw   d'7'    ; (DS1624_Decimal)=b'1011'. Mide 0,6875ºC. Redondeado a 0,7ºC.  
00DF   3408           00046         retlw   d'8'    ; (DS1624_Decimal)=b'1100'. Mide 0,7500ºC. Redondeado a 0,8ºC.
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E0   3408           00047         retlw   d'8'    ; (DS1624_Decimal)=b'1101'. Mide 0,8125ºC. Redondeado a 0,8ºC.
00E1   3409           00048         retlw   d'9'    ; (DS1624_Decimal)=b'1110'. Mide 0,8750ºC. Redondeado a 0,9ºC.
00E2   3409           00049         retlw   d'9'    ; (DS1624_Decimal)=b'1111'. Mide 0,9375ºC. Redondeado a 0,9ºC.
00E3                  00050 DS1624_FinTablaRedondeo
                      00051 
                      00052         IF (DS1624_FinTablaRedondeo > 0xFF)
                      00053                 ERROR   "¡CUIDADO!: La tabla ha superado el tamaño de la página de los"
                      00054                 MESSG   "primeros 256 bytes de memoria ROM. NO funcionará correctamente."
                      00055         ENDIF
                      00056 
                      00057 ; Subrutina "DS1624_Inicializa" ---------------------------------------------------------
                      00058 ;
                      00059 ; Configura el DS1624 para que trabaje en modo One-Shot.
                      00060 
00E3                  00061 DS1624_Inicializa
00E3   3090           00062         movlw   DS1624_DireccionEscritura       ; Apunta al dispositivo.
00E4   20A9           00063         call    I2C_EnviaByte
00E5   30AC           00064         movlw   Comando_AccessConfig    ; Comando indicando que el próximo byte es la
00E6   20A9           00065         call    I2C_EnviaByte           ; palabra de control.
00E7   304B           00066         movlw   b'01001011'             ; Carga la palabra de control para modo One-Shot.
00E8   20A9           00067         call    I2C_EnviaByte
00E9   20A3           00068         call    I2C_EnviaStop
                      00069 ;       call    DS1624_IniciaConversion ; Inicia la conversión de temperatura.
                      00070 ;       return
                      00071 
                      00072 ; Subrutina "DS1624_IniciaConversion" ---------------------------------------------------------
                      00073 ;
                      00074 ; Inicializa el DS1624 para que comience la conversión de temperatura.
                      00075 ;
00EA                  00076 DS1624_IniciaConversion
00EA   209B           00077         call    I2C_EnviaStart          ; Configura el DS1624.
00EB   3090           00078         movlw   DS1624_DireccionEscritura       ; Apunta al dispositivo.
00EC   20A9           00079         call    I2C_EnviaByte
00ED   30EE           00080         movlw   Comando_StartConvert_T  ; Comando que ordena el comienzo de la conversión 
00EE   20A9           00081         call    I2C_EnviaByte           ; de la temperatura.
00EF   20A3           00082         call    I2C_EnviaStop
00F0   0008           00083         return
                      00084 
                      00085 ; Subrutina "DS1624_LeeTemperatura" -----------------------------------------------------
                      00086 ;
                      00087 ; El DS1624 lee la temperatura en un formato ejemplificado como sigue:
                      00088 ;
                      00089 ; +125.0000 ºC  01111101 00000000
                      00090 ; + 25.0625 ºC  00011001 00010000
                      00091 ; +  0.5000 ºC  00000000 10000000
                      00092 ; +  0.0000 ºC  00000000 00000000
                      00093 ; -  0.5000 ºC  11111111 10000000
                      00094 ; - 25.0625 ºC  11100110 11110000
                      00095 ; - 55.0000 ºC  11001001 00000000
                      00096 ;
                      00097 ; Se observa que:
                      00098 ;    -  El formato es de dos bytes. El primer byte es la parte entera y el segundo la 
                      00099 ;       parte decimal.
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00100 ;    -  Las temperaturas vienen dadas en complemento a 2.
                      00101 ;    -  Las temperaturas positivas comienzan con el bit MSB a cero: b'0xxxxxxx xxxxxxxx'.
                      00102 ;    -  Las temperaturas negativas comienzan con e1 bit MSB a uno:  b'1xxxxxxx xxxxxxxx'.
                      00103 ;
                      00104 ; Esta subrutina lee la temperatura, proporcionando tres datos: 
                      00105 ; Salida:       - En (DS1624_Temperatura) la parte entera del valor de la temperatura medida.
                      00106 ;               - En (DS1624_Decimal) la parte decimal del valor de la temperatura.
                      00107 ;               - En (DS1624_Signo)=b'11111111' si la temperatura es negativa y 
                      00108 ;                 (DS1624_Signo)=b'00000000' si es positiva.
                      00109 ;
00F1                  00110 DS1624_LeeTemperatura
00F1   1010           00111         bcf     I2C_UltimoByteLeer
00F2   209B           00112         call    I2C_EnviaStart
00F3   3090           00113         movlw   DS1624_DireccionEscritura       ; Apunta al dispositivo.
00F4   20A9           00114         call    I2C_EnviaByte
00F5   30AA           00115         movlw   Comando_ReadTemperature ; Comando de lectura de la temperatura.
00F6   20A9           00116         call    I2C_EnviaByte
00F7   209B           00117         call    I2C_EnviaStart          ; Comienza a leer.
00F8   3091           00118         movlw   DS1624_DireccionLectura ; Apunta al dispositivo.
00F9   20A9           00119         call    I2C_EnviaByte
00FA   20BE           00120         call    I2C_LeeByte             ; Lee el primer byte
00FB   0091           00121         movwf   DS1624_Temperatura      ; y lo guarda.
00FC   1410           00122         bsf     I2C_UltimoByteLeer      ; El próximo es el último byte a leer.
00FD   20BE           00123         call    I2C_LeeByte             ; Lee el segundo byte
00FE   0092           00124         movwf   DS1624_Decimal          ; y lo guarda.
00FF   20A3           00125         call    I2C_EnviaStop
                      00126 ;
                      00127 ; Ahora deduce si la temperatura es positiva o negativa y halla su valor absoluto.
                      00128 ;
0100   0193           00129         clrf    DS1624_Signo            ; Supone que la temperatura es positiva.
0101   1F91           00130         btfss   DS1624_Temperatura,7    ; Si el bit MSB es "1", la temperatura es negativa.
0102   290A           00131         goto    DS1624_FinLeeTemperatura        ; La temperatura es positiva y salta.
0103                  00132 DS1624_TemperaturaNegativa
0103   0993           00133         comf    DS1624_Signo,F          ; Indica que la temperatura es negativa.
0104   0992           00134         comf    DS1624_Decimal,F                ; Para hallar el valor absoluto de la
0105   0991           00135         comf    DS1624_Temperatura,F    ; temperatura invierte los dos registros y le
0106   3001           00136         movlw   .1                      ; suma una unidad.
0107   0792           00137         addwf   DS1624_Decimal,F
0108   1803           00138         btfsc   STATUS,C                ; Si hay acarreo tiene que llevarlo al byte superior.
0109   0A91           00139         incf    DS1624_Temperatura,F    ; Le suma 1.
010A                  00140 DS1624_FinLeeTemperatura                
010A   0E12           00141         swapf   DS1624_Decimal,W        ; Para las temperaturas es suficiente trabajar
010B   390F           00142         andlw   b'00001111'             ; con un solo digito decimal, por lo que
010C   20D2           00143         call    DS1624_RedondeoDecimal  ; primero se queda con los 4 bits menos 
010D   0092           00144         movwf   DS1624_Decimal          ; significativo y pasa a redondear su valor.
010E   0811           00145         movf    DS1624_Temperatura,W    ; En (W) la parte entera del valor absoluto de la
010F   0008           00146         return                          ; temperatura.
                      00147         
                      00148 ;       ===================================================================
                      00149 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00150 ;         E. Palacios, F. Remiro y L. López.
                      00151 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00152 ;       ===================================================================
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00121         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10, tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  00000014            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  00000015            00022         BCD_Decenas                     ; la última asignada.
  00000016            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
0110                  00026 BIN_a_BCD
0110   0194           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
0111   0195           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
0112   0096           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
0113                  00030 BCD_Resta10
0113   300A           00031         movlw   .10                     ; A las unidades se les va restando 10 en cada
0114   0216           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
0115   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?
0116   2920           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
0117                  00035 BCD_IncrementaDecenas
0117   0096           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
0118   0A95           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
0119   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
011A   0215           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
011B   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?
011C   2913           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
011D                  00042 BCD_IncrementaCentenas                  ; las unidades.
011D   0195           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
011E   0A94           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
011F   2913           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
0120                  00046 BIN_BCD_Fin
0120   0E15           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
0121   0716           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
0122   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal no aquí.
                      00052 
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00122         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000017            00021         R_ContA                         ; Contadores para los retardos.
  00000018            00022         R_ContB
  00000019            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0123                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0123   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0124   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0125   0000           00035         nop                             ; Aporta 1 ciclo máquina.
0126   0000           00036         nop                             ; Aporta 1 ciclo máquina.
0127   0000           00037         nop                             ; Aporta 1 ciclo máquina.
0128                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
0128   0000           00039         nop                             ; Aporta 1 ciclo máquina.
0129                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
0129   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
012A                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
012A   0000           00046         nop                             ; Aporta 1 ciclo máquina.
012B   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012C   2936           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
012D                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
012D   0000           00050         nop                             ; Aporta 1 ciclo máquina.
012E   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
012F   2936           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0130                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0130   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0131   2936           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0132                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0132   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0133   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0134   2936           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0135                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
0135   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0136                  00066 RetardoMicros
0136   0097           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
0137                  00068 Rmicros_Bucle
0137   0B97           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0138   2937           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
0139   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
013A                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
013A   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
013B   2949           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
013C                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
013C   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
013D   2949           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
013E                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
013E   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
013F   2949           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0140                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0140   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0141   2949           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0142                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0142   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0143   2949           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0144                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0144   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0145   2949           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0146                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0146   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0147   2949           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0148                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
0148   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
0149                  00111 Retardos_ms
0149   0098           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
014A                  00113 R1ms_BucleExterno
014A   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
014B   0097           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
014C                  00116 R1ms_BucleInterno
014C   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
014D   0B97           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
014E   294C           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
014F   0B98           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0150   294A           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0151   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0152                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0152   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0153   295D           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0154                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0154   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0155   295D           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0156                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0156   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0157   295D           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0158                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
0158   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0159   295D           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
015A                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
015A   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
015B   295D           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
015C                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
015C   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
015D                  00160 Retardo_1Decima
015D   0099           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
015E                  00162 R1Decima_BucleExterno2
015E   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
015F   0098           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0160                  00165 R1Decima_BucleExterno
0160   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0161   0097           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0162                  00168 R1Decima_BucleInterno          
0162   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0163   0B97           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0164   2962           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0165   0B98           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0166   2960           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0167   0B99           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0168   295E           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
0169   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00191 
                      00192 ;       ===================================================================
                      00193 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00194 ;         E. Palacios, F. Remiro y L. López.
                      00195 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00196 ;       ===================================================================
                      00197 
                      00198 
                      00199 
                      00200 
                      00123         END
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

ASCII_a_7Segmentos                00000042
BCD_Centenas                      00000014
BCD_Decenas                       00000015
BCD_IncrementaCentenas            0000011D
BCD_IncrementaDecenas             00000117
BCD_Resta10                       00000113
BCD_Unidades                      00000016
BIN_BCD_Fin                       00000120
BIN_a_BCD                         00000110
C                                 00000000
Carga2s                           00000028
Comando_AccessConfig              000000AC
Comando_ReadTemperature           000000AA
Comando_StartConvert_T            000000EE
DC                                00000001
DS1624_Decimal                    00000012
DS1624_DireccionEscritura         00000090
DS1624_DireccionLectura           00000091
DS1624_FinLeeTemperatura          0000010A
DS1624_FinTablaRedondeo           000000E3
DS1624_IniciaConversion           000000EA
DS1624_Inicializa                 000000E3
DS1624_LeeTemperatura             000000F1
DS1624_RedondeoDecimal            000000D2
DS1624_Signo                      00000013
DS1624_Temperatura                00000011
DS1624_TemperaturaNegativa        00000103
Display7s_Dato                    0000000D
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
FinTablaASCII                     00000087
Fin_Termometro                    0000001A
Fin_VisualizaTemperatura          0000003F
GIE                               00000007
I2C_ContadorBits                  0000000E
I2C_Dato                          0000000F
I2C_EnviaBit                      000000AC
I2C_EnviaByte                     000000A9
I2C_EnviaCero                     000000AF
I2C_EnviaStart                    0000009B
I2C_EnviaStop                     000000A3
I2C_EnviaUno                      000000B1
I2C_Flags                         00000010
I2C_FlancoSCL                     000000B2
I2C_LeeBit                        000000C1
I2C_LeeByte                       000000BE
I2C_UltimoByteLeer                I2C_Flags,0
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000005
InicioTablaASCII                  00000057
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
Numero_a_7Segmentos               00000040
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000010
R1Decima_BucleExterno             00000160
R1Decima_BucleExterno2            0000015E
R1Decima_BucleInterno             00000162
R1ms_BucleExterno                 0000014A
R1ms_BucleInterno                 0000014C
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000017
R_ContB                           00000018
R_ContC                           00000019
Registro50ms                      0000000C
RetardoMicros                     00000136
Retardo_100micros                 00000130
Retardo_100ms                     0000013C
Retardo_10micros                  00000123
Retardo_10ms                      00000142
Retardo_10s                       00000154
Retardo_1Decima                   0000015D
Retardo_1ms                       00000148
Retardo_1s                        0000015A
Retardo_200micros                 0000012D
Retardo_200ms                     0000013A
Retardo_20micros                  00000135
Retardo_20ms                      00000140
Retardo_20s                       00000152
Retardo_2ms                       00000146
Retardo_2s                        00000158
Retardo_4micros                   00000129
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 18


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_500micros                 0000012A
Retardo_500ms                     0000015C
Retardo_50micros                  00000132
Retardo_50ms                      0000013E
Retardo_5micros                   00000128
Retardo_5ms                       00000144
Retardo_5s                        00000156
Retardos_ms                       00000149
Rmicros_Bucle                     00000137
SAA1064_Direccion                 00000070
SCL                               PORTA,3
SCL_AltaImpedancia                00000095
SCL_Bajo                          00000090
SCL_EsperaNivelAlto               00000098
SDA                               PORTA,4
SDA_AltaImpedancia                0000008C
SDA_Bajo                          00000087
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0_Carga50ms                    FFFFFF3D
TRISA                             00000085
TRISB                             00000086
TemperaturaNegativa               0000002B
TemperaturaPositiva               00000035
Termometro                        00000011
VisualizaTermometro               0000001C
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
MPASM 03.50 Released            I2C_DISPLAY_TERMOMETRO_01.ASM   10-26-2003  19:30:44         PAGE 19


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXX------ ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   359
Program Memory Words Free:   665


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

