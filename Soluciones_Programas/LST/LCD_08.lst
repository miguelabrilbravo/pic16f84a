MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************** LCD_08.asm ************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Mientras se mantenga presionado el pulsador conectado al pin RA4, se incrementa un contador
                      00010 ; visualizado en la pantalla en tres formatos: decimal, hexadecimal y binario. Un ejemplo:
                      00011 ; Primera Línea:        "CE   206"
                      00012 ; Segunda Línea:        "11001110"
                      00013 ;
                      00014 ; ZONA DE DATOS **********************************************************************
                      00015 
2007   3FF1           00016         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00017         LIST       P=16F84A
                      00018         INCLUDE <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00019 
                      00020         CBLOCK  0x0C
  0000000C            00021         Contador                        ; El contador a visualizar.
  0000000D            00022         Auxiliar
  0000000E            00023         Desplaza
                      00024         ENDC
                      00025 
                      00026 #DEFINE  Pulsador PORTA,4               ; Línea donde se conecta el pulsador.
                      00027 
                      00028 ; ZONA DE CÓDIGOS ********************************************************************
                      00029 
0000                  00030         ORG     0                       ; El programa comienza en la dirección 0.
0000                  00031 Inicio
0000   2027           00032         call    LCD_Inicializa
0001   1683           00033         bsf     STATUS,RP0
0002   1605           00034         bsf     Pulsador                ; Línea del pulsador configurada como entrada. 
0003   1283           00035         bcf     STATUS,RP0
0004   018C           00036         clrf    Contador                ; Inicializa el contador y
0005   200F           00037         call    VisualizaContador       ; lo visualiza.
0006                  00038 Principal
0006   1A05           00039         btfsc   Pulsador                ; Lee el pulsador.
0007   280E           00040         goto    Fin                     ; Si no pulsa salta a final.
0008   20C8           00041         call    Retardo_20ms            ; Espera a que se estabilicen los niveles de tensión.
0009   1A05           00042         btfsc   Pulsador                ; Vuelve a leer el pulsador.
000A   280E           00043         goto    Fin
000B   0A8C           00044         incf    Contador,F              ; Incrementa el contador.
000C   200F           00045         call    VisualizaContador
000D   20C2           00046         call    Retardo_200ms           ; Se incrementará de nuevo cuando pase este 
000E   2806           00047 Fin     goto    Principal               ; tiempo.
                      00048 
                      00049 ; Subrutina "VisualizaContador" --------------------------------------------------------
                      00050 
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F                  00051 VisualizaContador
000F   2066           00052         call    LCD_Borra               ; Borra la pantalla.
0010   080C           00053         movf    Contador,W              ; A continuación visualiza el contador.
0011   209C           00054         call    LCD_ByteCompleto        ; Visualiza en hexadecimal.
0012   208E           00055         call    LCD_TresEspaciosBlancos ; Como separador.
0013   080C           00056         movf    Contador,W              ; Ahora se visualiza en decimal.
0014   20F2           00057         call    BIN_a_BCD               ; Primero se convierte a BCD.
0015   008D           00058         movwf   Auxiliar                ; Guarda las decenas y unidades.
0016   0817           00059         movf    BCD_Centenas,W          ; Visualiza centenas.
0017   20A0           00060         call    LCD_Nibble
0018   080D           00061         movf    Auxiliar,W              ; Visualiza las decenas y unidades.
0019   209C           00062         call    LCD_ByteCompleto
                      00063 ;
001A   205A           00064         call    LCD_Linea2              ; En la segunda línea para visualizar en binario.
001B   3008           00065         movlw   .8                      ; Utiliza el registro auxiliar como contador del
001C   008D           00066         movwf   Auxiliar                ; número de bits que se va visualizando por la 
001D   080C           00067         movf    Contador,W              ; pantalla.
001E   008E           00068         movwf   Desplaza
001F                  00069 VisualizaBit
001F   0D8E           00070         rlf     Desplaza,F              ; El bit a visualizar pasa al Carry .
0020   3031           00071         movlw   '1'                     ; En principio supone que es un uno.
0021   1C03           00072         btfss   STATUS,C                ; Comprueba su valor.
0022   3030           00073         movlw   '0'                     ; Ha sido cero.
0023   206B           00074         call    LCD_Caracter            ; Lo visualiza.
0024   0B8D           00075         decfsz  Auxiliar,F              ; ¿Ha terminado de visualizar los 8 bits?
0025   281F           00076         goto    VisualizaBit            ; No, sigue visualizando otro bit.
0026   0008           00077         return
                      00078 
                      00079         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000F            00025         LCD_Dato
  00000010            00026         LCD_GuardaDato
  00000011            00027         LCD_GuardaTRISB
  00000012            00028         LCD_Auxiliar1
  00000013            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
0027                  00045 LCD_Inicializa
0027   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0028   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0029   1105           00048         bcf     LCD_PinEnable
002A   1085           00049         bcf     LCD_PinRW
002B   1283           00050         bcf     STATUS,RP0
002C   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado le indica
                      00052                                         ; que se va a escribir en el LCD.
002D   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD poniendo E=0.
002E   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando poniendo RS=0.
002F   20C8           00055         call    Retardo_20ms
0030   3030           00056         movlw   b'00110000'     
0031   203F           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0032   20CC           00058         call    Retardo_5ms     
0033   3030           00059         movlw   b'00110000'     
0034   203F           00060         call    LCD_EscribeLCD
0035   20B5           00061         call    Retardo_200micros
0036   3030           00062         movlw   b'00110000'     
0037   203F           00063         call    LCD_EscribeLCD
0038   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
0039   203F           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
003A   2068           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
003B   2066           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
003C   2064           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
003D   2056           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
003E   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el pin
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00078 ; Enable del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B que
                      00079 ; no son utilizadas para el LCD (pines RB3:RB0), primero se lee estas líneas y después se
                      00080 ; vuelve a enviar este dato sin cambiarlo.
                      00081 
003F                  00082 LCD_EscribeLCD
003F   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
0040   008F           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
0041   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
0042   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
0043   048F           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
0044   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0045   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
0046   0091           00091         movwf   LCD_GuardaTRISB
0047   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
0048   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
0049   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
004A   080F           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
004B   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
004C   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD mediante un pequeño
004D   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
004E   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
004F   20CE           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
0050   20BA           00102         call    Retardo_50micros
0051   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
0052   0811           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
0053   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
0054   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
0055   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
0056                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
0056   3006           00114         movlw   b'00000110'
0057   2869           00115         goto    LCD_EnviaComando
0058                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
0058   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
0059   2869           00118         goto    LCD_EnviaComando
005A                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
005A   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
005B   2869           00121         goto    LCD_EnviaComando
005C                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
005C   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
005D   2869           00124         goto    LCD_EnviaComando        ; registro W.
005E                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
005E   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
005F   2869           00127         goto    LCD_EnviaComando        ; registro W.
0060                  00128 LCD_OFF                         ; Pantalla apagada.
0060   3008           00129         movlw   b'00001000'
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0061   2869           00130         goto    LCD_EnviaComando
0062                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
0062   300E           00132         movlw   b'00001110'
0063   2869           00133         goto    LCD_EnviaComando
0064                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
0064   300C           00135         movlw   b'00001100'
0065   2869           00136         goto    LCD_EnviaComando
0066                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
0066   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
0067   2869           00139         goto    LCD_EnviaComando
0068                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
0068   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando". Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter". Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
0069                  00151 LCD_EnviaComando
0069   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
006A   286D           00153         goto    LCD_Envia
006B                  00154 LCD_Caracter
006B   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
006C   2072           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
006D                  00157 LCD_Envia
006D   0090           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
006E   203F           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
006F   0E10           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
0070   203F           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
0071   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
0072                  00177 LCD_CodigoCGROM
0072   008F           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
0073                  00179 LCD_EnheMinuscula                       ; un carácter especial.
0073   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
0074   1D03           00181         btfss   STATUS,Z
0075   2879           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0076   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
0077   008F           00184         movwf   LCD_Dato
0078   2886           00185         goto    LCD_FinCGROM
0079                  00186 LCD_EnheMayuscula
0079   080F           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
007A   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
007B   1D03           00189         btfss   STATUS,Z
007C   2880           00190         goto    LCD_Grado               ; No es "Ñ".
007D   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
007E   008F           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
007F   2886           00193         goto    LCD_FinCGROM    
0080                  00194 LCD_Grado
0080   080F           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0081   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
0082   1D03           00197         btfss   STATUS,Z
0083   2886           00198         goto    LCD_FinCGROM            ; No es "º".
0084   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
0085   008F           00200         movwf   LCD_Dato
0086                  00201 LCD_FinCGROM
0086   080F           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
0087   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
0088                  00209 LCD_LineaEnBlanco
0088   3010           00210         movlw   LCD_CaracteresPorLinea
0089   288F           00211         goto    LCD_EnviaBlancos
008A                  00212 LCD_UnEspacioBlanco
008A   3001           00213         movlw   .1
008B   288F           00214         goto    LCD_EnviaBlancos
008C                  00215 LCD_DosEspaciosBlancos
008C   3002           00216         movlw   .2
008D   288F           00217         goto    LCD_EnviaBlancos
008E                  00218 LCD_TresEspaciosBlancos
008E   3003           00219         movlw   .3
008F                  00220 LCD_EnviaBlancos
008F   0092           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
0090                  00222 LCD_EnviaOtroBlanco     
0090   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
0091   206B           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
0092   0B92           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
0093   2890           00226         goto    LCD_EnviaOtroBlanco
0094   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
0095                  00240 LCD_Byte
0095   0093           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0096   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
0097   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0098   289D           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0099   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
009A   206B           00246         call    LCD_Caracter
009B   289F           00247         goto    LCD_VisualizaBajo
                      00248 
009C                  00249 LCD_ByteCompleto
009C   0093           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
009D                  00251 LCD_VisualizaAlto
009D   0E13           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
009E   20A0           00253         call    LCD_Nibble              ; Lo visualiza.
009F                  00254 LCD_VisualizaBajo
009F   0813           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
00A0                  00266 LCD_Nibble
00A0   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
00A1   0092           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
00A2   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
00A3   1C03           00270         btfss   STATUS,C        
00A4   28A8           00271         goto    LCD_EnviaByteLetra
00A5   0812           00272         movf    LCD_Auxiliar1,W
00A6   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00A7   28AA           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00A8                  00275 LCD_EnviaByteLetra
00A8   0812           00276         movf    LCD_Auxiliar1,W
00A9   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
00AA                  00278 LCD_FinVisualizaDigito
00AA   286B           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00080         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000014            00021         R_ContA                         ; Contadores para los retardos.
  00000015            00022         R_ContB
  00000016            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
00AB                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
00AB   0000           00033         nop                             ; Aporta 1 ciclo máquina.
00AC   0000           00034         nop                             ; Aporta 1 ciclo máquina.
00AD   0000           00035         nop                             ; Aporta 1 ciclo máquina.
00AE   0000           00036         nop                             ; Aporta 1 ciclo máquina.
00AF   0000           00037         nop                             ; Aporta 1 ciclo máquina.
00B0                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
00B0   0000           00039         nop                             ; Aporta 1 ciclo máquina.
00B1                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
00B1   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
00B2                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
00B2   0000           00046         nop                             ; Aporta 1 ciclo máquina.
00B3   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
00B4   28BE           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00B5                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
00B5   0000           00050         nop                             ; Aporta 1 ciclo máquina.
00B6   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00B7   28BE           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00B8                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
00B8   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00B9   28BE           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00BA                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
00BA   0000           00057         nop                             ; Aporta 1 ciclo máquina.
00BB   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00BC   28BE           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00BD                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00BD   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
00BE                  00066 RetardoMicros
00BE   0094           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
00BF                  00068 Rmicros_Bucle
00BF   0B94           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00C0   28BF           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
00C1   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
00C2                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
00C2   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C3   28D1           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C4                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
00C4   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C5   28D1           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C6                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
00C6   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C7   28D1           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00C8                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
00C8   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00C9   28D1           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00CA                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
00CA   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00CB   28D1           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00CC                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
00CC   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00CD   28D1           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00CE                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
00CE   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00CF   28D1           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00D0                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
00D0   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
00D1                  00111 Retardos_ms
00D1   0095           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
00D2                  00113 R1ms_BucleExterno
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D2   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
00D3   0094           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
00D4                  00116 R1ms_BucleInterno
00D4   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
00D5   0B94           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
00D6   28D4           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
00D7   0B95           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00D8   28D2           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
00D9   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
00DA                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
00DA   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00DB   28E5           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00DC                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
00DC   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00DD   28E5           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00DE                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
00DE   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00DF   28E5           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00E0                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
00E0   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00E1   28E5           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00E2                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
00E2   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00E3   28E5           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00E4                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
00E4   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
00E5                  00160 Retardo_1Decima
00E5   0096           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
00E6                  00162 R1Decima_BucleExterno2
00E6   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
00E7   0095           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
00E8                  00165 R1Decima_BucleExterno
00E8   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E9   0094           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
00EA                  00168 R1Decima_BucleInterno          
00EA   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
00EB   0B94           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
00EC   28EA           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
00ED   0B95           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
00EE   28E8           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
00EF   0B96           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00F0   28E6           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
00F1   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00191 
                      00192 ;       ===================================================================
                      00193 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00194 ;         E. Palacios, F. Remiro y L. López.
                      00195 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00196 ;       ===================================================================
                      00197 
                      00198 
                      00199 
                      00200 
                      00081         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10, tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  00000017            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  00000018            00022         BCD_Decenas                     ; la última asignada.
  00000019            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
00F2                  00026 BIN_a_BCD
00F2   0197           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
00F3   0198           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
00F4   0099           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
00F5                  00030 BCD_Resta10
00F5   300A           00031         movlw   .10                     ; A las unidades se les va restando 10 en cada
00F6   0219           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
00F7   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?
00F8   2902           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
00F9                  00035 BCD_IncrementaDecenas
00F9   0099           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
00FA   0A98           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
00FB   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
00FC   0218           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
00FD   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?
00FE   28F5           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
00FF                  00042 BCD_IncrementaCentenas                  ; las unidades.
00FF   0198           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
0100   0A97           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
0101   28F5           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
0102                  00046 BIN_BCD_Fin
0102   0E18           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
0103   0719           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
0104   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00082         END
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

Auxiliar                          0000000D
BCD_Centenas                      00000017
BCD_Decenas                       00000018
BCD_IncrementaCentenas            000000FF
BCD_IncrementaDecenas             000000F9
BCD_Resta10                       000000F5
BCD_Unidades                      00000019
BIN_BCD_Fin                       00000102
BIN_a_BCD                         000000F2
C                                 00000000
Contador                          0000000C
DC                                00000001
Desplaza                          0000000E
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
Fin                               0000000E
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000000
LCD_2Lineas4Bits5x7               00000068
LCD_Auxiliar1                     00000012
LCD_Auxiliar2                     00000013
LCD_Borra                         00000066
LCD_BusDatos                      PORTB
LCD_Byte                          00000095
LCD_ByteCompleto                  0000009C
LCD_Caracter                      0000006B
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   00000072
LCD_CursorIncr                    00000056
LCD_CursorOFF                     00000064
LCD_CursorON                      00000062
LCD_Dato                          0000000F
LCD_DosEspaciosBlancos            0000008C
LCD_EnheMayuscula                 00000079
LCD_EnheMinuscula                 00000073
LCD_Envia                         0000006D
LCD_EnviaBlancos                  0000008F
LCD_EnviaByteLetra                000000A8
LCD_EnviaComando                  00000069
LCD_EnviaOtroBlanco               00000090
LCD_EscribeLCD                    0000003F
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

LCD_FinCGROM                      00000086
LCD_FinVisualizaDigito            000000AA
LCD_Grado                         00000080
LCD_GuardaDato                    00000010
LCD_GuardaTRISB                   00000011
LCD_Inicializa                    00000027
LCD_Linea1                        00000058
LCD_Linea2                        0000005A
LCD_LineaEnBlanco                 00000088
LCD_Nibble                        000000A0
LCD_OFF                           00000060
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                0000005C
LCD_PosicionLinea2                0000005E
LCD_TresEspaciosBlancos           0000008E
LCD_UnEspacioBlanco               0000008A
LCD_VisualizaAlto                 0000009D
LCD_VisualizaBajo                 0000009F
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000006
Pulsador                          PORTA,4
R1Decima_BucleExterno             000000E8
R1Decima_BucleExterno2            000000E6
R1Decima_BucleInterno             000000EA
R1ms_BucleExterno                 000000D2
R1ms_BucleInterno                 000000D4
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000014
R_ContB                           00000015
R_ContC                           00000016
RetardoMicros                     000000BE
Retardo_100micros                 000000B8
Retardo_100ms                     000000C4
Retardo_10micros                  000000AB
Retardo_10ms                      000000CA
Retardo_10s                       000000DC
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_1Decima                   000000E5
Retardo_1ms                       000000D0
Retardo_1s                        000000E2
Retardo_200micros                 000000B5
Retardo_200ms                     000000C2
Retardo_20micros                  000000BD
Retardo_20ms                      000000C8
Retardo_20s                       000000DA
Retardo_2ms                       000000CE
Retardo_2s                        000000E0
Retardo_4micros                   000000B1
Retardo_500micros                 000000B2
Retardo_500ms                     000000E4
Retardo_50micros                  000000BA
Retardo_50ms                      000000C6
Retardo_5micros                   000000B0
Retardo_5ms                       000000CC
Retardo_5s                        000000DE
Retardos_ms                       000000D1
Rmicros_Bucle                     000000BF
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
VisualizaBit                      0000001F
VisualizaContador                 0000000F
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
MPASM 03.50 Released                               LCD_08.ASM   10-24-2003  23:37:14         PAGE 16


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXX----------- ---------------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   261
Program Memory Words Free:   763


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

