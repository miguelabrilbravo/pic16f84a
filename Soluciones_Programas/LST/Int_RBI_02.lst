MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************ Int_RBI_02.asm **********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Al presionar sobre el pulsador conectado al pin RB6, se incrementa un minutero. Es decir,
                      00010 ; cuenta de 0 a 59. Mientras se mantenga pulsado se incrementará cada 100 ms. Cada vez que
                      00011 ; pulse se oíra pequeño pitido procedente de un zumbador.
                      00012 ;
                      00013 ; ZONA DE DATOS *********************************************************************
                      00014 
2007   3FF1           00015         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00016         LIST       P=16F84A
                      00017         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 ; P16F84A.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                      00134         LIST
                      00018 
                      00019         CBLOCK   0x0C
  0000000C            00020         Minuto
                      00021         ENDC
                      00022 
                      00023 #DEFINE   Pulsador      PORTB,6         ; Línea donde se conecta el pulsador.
                      00024 #DEFINE   Zumbador      PORTB,2         ; Línea donde se conecta el zumbador.
                      00025 
                      00026 ; ZONA DE CÓDIGOS ********************************************************************
                      00027 
0000                  00028         ORG     0
0000   2805           00029         goto    Inicio
0004                  00030         ORG     4                       ; Vector de interrupción
0004   2813           00031         goto    ServicioInterrupcion
0005                  00032 Inicio
0005   2092           00033         call    LCD_Inicializa
0006   302C           00034         movlw   MensajePulsacion                ; Aparece el texto "   minutos.".
0007   2116           00035         call    LCD_Mensaje
0008   1683           00036         bsf     STATUS,RP0
0009   1706           00037         bsf     Pulsador
000A   1106           00038         bcf     Zumbador
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
000B   1381           00039         bcf     OPTION_REG,NOT_RBPU
000C   1283           00040         bcf     STATUS,RP0
000D   018C           00041         clrf    Minuto                  ; Inicializa el minutero y lo visualiza.
000E   2018           00042         call    VisualizaContador
000F   3088           00043         movlw   b'10001000'             ; Habilita la interrupción por cambio de nivel en
0010   008B           00044         movwf   INTCON                  ; línea del Puerto B (RBIE)  y la general (GIE).
0011                  00045 Principal
0011   0063           00046         sleep                           ; Pasa a modo de bajo consumo y espera las
0012   2811           00047         goto    Principal               ; interrupciones.
                      00048 
                      00049 ; Subrutina "ServicioInterrupcion" ------------------------------------------------------
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00050 ;
                      00051 ; Subrutina de atención a la interrupción. Incrementa el contador y lo visualiza.
                      00052 ;
0013                  00053 ServicioInterrupcion
0013   2055           00054         call    Retardo_20ms            ; Espera se estabilicen los niveles de tensión.
0014   1B06           00055         btfsc   Pulsador                ; ¿Es el pulsador conectado a RB6?
0015   281F           00056         goto    FinInterrupcion
0016   2027           00057         call    PitidoCorto
0017   2021           00058         call    IncrementaMinutos
0018                  00059 VisualizaContador
0018   20C3           00060         call    LCD_Linea1              ; Se sitúa al principio de la línea 1.
0019   080C           00061         movf    Minuto,W
001A   207F           00062         call    BIN_a_BCD               ; Debe visualizar en BCD.
001B   2100           00063         call    LCD_Byte
001C   2051           00064         call    Retardo_100ms           ; Si se mantiene pulsado incrementará cada 100
001D   1F06           00065         btfss   Pulsador                ; milisegundos.
001E   2813           00066         goto    ServicioInterrupcion
001F                  00067 FinInterrupcion
001F   100B           00068         bcf     INTCON,RBIF             ; Limpia flags de reconocimiento (RBIF) y
0020   0009           00069         retfie                          ; rehabilita las interrupciones (GIE=1).
                      00070         
                      00071 ; Subrutina "IncrementaMinutos" ---------------------------------------------------------
                      00072 ;
                      00073 ; Incrementa el valor de la variable "Minuto". Si llega al valor máximo de 60, lo resetea
                      00074 ; y sale con el Carry a 1.
                      00075 ;
0021                  00076 IncrementaMinutos
0021   0A8C           00077         incf    Minuto,F                ; Incrementa los Minutos.
0022   303C           00078         movlw   .60
0023   020C           00079         subwf   Minuto,W                ; ¿Ha superado su valor máximo?. (W)=(Minuto)-60.
0024   1803           00080         btfsc   STATUS,C                ; ¿C=0?, ¿(W) negativo?, ¿(Minuto) < 60?
0025   018C           00081         clrf    Minuto                  ; Lo inicializa si ha superado su valor máximo.
0026   0008           00082         return
                      00083         
                      00084 ; Subrutina "PitidoCorto" ---------------------------------------------------------------
                      00085 
0027                  00086 PitidoCorto
0027   1506           00087         bsf     Zumbador
0028   2055           00088         call    Retardo_20ms
0029   1106           00089         bcf     Zumbador
002A   0008           00090         return  
                      00091 
                      00092 ; "Mensajes" ----------------------------------------------------------------------------
                      00093 ;
002B                  00094 Mensajes
002B   0782           00095         addwf   PCL,F
002C                  00096 MensajePulsacion
002C   3420 3420 3420 00097         DT "   minutos.", 0x00
       346D 3469 346E 
       3475 3474 346F 
       3473 342E 3400 
                      00098 ;
                      00099         INCLUDE   <RETARDOS.INC>
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  0000000D            00021         R_ContA                         ; Contadores para los retardos.
  0000000E            00022         R_ContB
  0000000F            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0038                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0038   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0039   0000           00034         nop                             ; Aporta 1 ciclo máquina.
003A   0000           00035         nop                             ; Aporta 1 ciclo máquina.
003B   0000           00036         nop                             ; Aporta 1 ciclo máquina.
003C   0000           00037         nop                             ; Aporta 1 ciclo máquina.
003D                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
003D   0000           00039         nop                             ; Aporta 1 ciclo máquina.
003E                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
003E   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
003F                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
003F   0000           00046         nop                             ; Aporta 1 ciclo máquina.
0040   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
0041   284B           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0042                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
0042   0000           00050         nop                             ; Aporta 1 ciclo máquina.
0043   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0044   284B           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0045                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0045   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0046   284B           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0047                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0047   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0048   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0049   284B           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
004A                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
004A   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
004B                  00066 RetardoMicros
004B   008D           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
004C                  00068 Rmicros_Bucle
004C   0B8D           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
004D   284C           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
004E   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
004F                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
004F   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0050   285E           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0051                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
0051   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
0052   285E           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0053                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
0053   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0054   285E           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0055                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0055   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0056   285E           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0057                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0057   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0058   285E           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0059                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0059   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
005A   285E           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
005B                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
005B   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
005C   285E           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
005D                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
005D   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
005E                  00111 Retardos_ms
005E   008E           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
005F                  00113 R1ms_BucleExterno
005F   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
0060   008D           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
0061                  00116 R1ms_BucleInterno
0061   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
0062   0B8D           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
0063   2861           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
0064   0B8E           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0065   285F           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0066   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0067                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0067   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0068   2872           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0069                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0069   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
006A   2872           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
006B                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
006B   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
006C   2872           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
006D                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
006D   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
006E   2872           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
006F                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
006F   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0070   2872           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0071                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
0071   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0072                  00160 Retardo_1Decima
0072   008F           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
0073                  00162 R1Decima_BucleExterno2
0073   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
0074   008E           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0075                  00165 R1Decima_BucleExterno
0075   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0076   008D           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0077                  00168 R1Decima_BucleInterno          
0077   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0078   0B8D           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0079   2877           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
007A   0B8E           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
007B   2875           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
007C   0B8F           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
007D   2873           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
007E   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00100         INCLUDE   <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10 tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  00000010            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000011            00022         BCD_Decenas                     ; la última asignada.
  00000012            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
007F                  00026 BIN_a_BCD
007F   0190           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
0080   0191           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
0081   0092           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
0082                  00030 BCD_Resta10
0082   300A           00031         movlw   .10                     ; A las unidades se le va restando 10 en cada
0083   0212           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
0084   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?.
0085   288F           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
0086                  00035 BCD_IncrementaDecenas
0086   0092           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
0087   0A91           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
0088   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
0089   0211           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
008A   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?.
008B   2882           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
008C                  00042 BCD_IncrementaCentenas                  ; las unidades.
008C   0191           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
008D   0A90           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
008E   2882           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
008F                  00046 BIN_BCD_Fin
008F   0E11           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
0090   0712           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
0091   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
                      00051 ; La directiva "END" se debe poner en el programa principal, no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00101         INCLUDE   <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000013            00025         LCD_Dato
  00000014            00026         LCD_GuardaDato
  00000015            00027         LCD_GuardaTRISB
  00000016            00028         LCD_Auxiliar1
  00000017            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
0092                  00045 LCD_Inicializa
0092   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0093   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0094   1105           00048         bcf     LCD_PinEnable
0095   1085           00049         bcf     LCD_PinRW
0096   1283           00050         bcf     STATUS,RP0
0097   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado, le indica
                      00052                                         ; que se va a escribir en el LCD.
0098   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD, poniendo E=0.
0099   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
009A   2055           00055         call    Retardo_20ms
009B   3030           00056         movlw   b'00110000'     
009C   20AA           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
009D   2059           00058         call    Retardo_5ms     
009E   3030           00059         movlw   b'00110000'     
009F   20AA           00060         call    LCD_EscribeLCD
00A0   2042           00061         call    Retardo_200micros
00A1   3030           00062         movlw   b'00110000'     
00A2   20AA           00063         call    LCD_EscribeLCD
00A3   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
00A4   20AA           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
00A5   20D3           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00A6   20D1           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
00A7   20CF           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
00A8   20C1           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
00A9   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el
                      00078 ; pin "Enable" del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B
                      00079 ; que no son utilizadas para el LCD (pines RB3.. RB0), primero se lee estas líneas y después
                      00080 ; se vuelve a enviar este dato sin cambiarlo.
                      00081 
00AA                  00082 LCD_EscribeLCD
00AA   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
00AB   0093           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
00AC   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
00AD   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
00AE   0493           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
00AF   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00B0   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
00B1   0095           00091         movwf   LCD_GuardaTRISB
00B2   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
00B3   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
00B4   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
                      00095 ;
00B5   0813           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
00B6   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
00B7   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD, mediante un pequeño
00B8   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
00B9   1C05           00100         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00BA   205B           00101         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00BB   2047           00102         call    Retardo_50micros
00BC   1683           00103         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
00BD   0815           00104         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
00BE   0086           00105         movwf   PORTB                   ; Realmente es TRISB.
00BF   1283           00106         bcf     STATUS,RP0              ; Acceso al Banco 0.
00C0   0008           00107         return
                      00108 
                      00109 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00110 ;
                      00111 ;Los comandos que pueden ser ejecutados son:
                      00112 ;
00C1                  00113 LCD_CursorIncr                          ; Cursor en modo incrementar.
00C1   3006           00114         movlw   b'00000110'
00C2   28D4           00115         goto    LCD_EnviaComando
00C3                  00116 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00C3   3080           00117         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00C4   28D4           00118         goto    LCD_EnviaComando
00C5                  00119 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00C5   30C0           00120         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00C6   28D4           00121         goto    LCD_EnviaComando
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C7                  00122 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00C7   3880           00123         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00C8   28D4           00124         goto    LCD_EnviaComando        ; registro W.
00C9                  00125 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00C9   38C0           00126         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00CA   28D4           00127         goto    LCD_EnviaComando        ; registro W.
00CB                  00128 LCD_OFF                         ; Pantalla apagada.
00CB   3008           00129         movlw   b'00001000'
00CC   28D4           00130         goto    LCD_EnviaComando
00CD                  00131 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00CD   300E           00132         movlw   b'00001110'
00CE   28D4           00133         goto    LCD_EnviaComando
00CF                  00134 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00CF   300C           00135         movlw   b'00001100'
00D0   28D4           00136         goto    LCD_EnviaComando
00D1                  00137 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00D1   3001           00138         movlw   b'00000001'             ; cursor a principio de la línea 1.
00D2   28D4           00139         goto    LCD_EnviaComando
00D3                  00140 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00D3   3028           00141         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00142 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00143 
                      00144 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00145 ;
                      00146 ; "LCD_EnviaComando": Escribe un comando en el registro del módulo LCD. La palabra de
                      00147 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00148 ; "LCD_Caracter": Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00149 ; a través del registro W. Trabaja en Modo Dato.
                      00150 ;
00D4                  00151 LCD_EnviaComando
00D4   1005           00152         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00D5   28D8           00153         goto    LCD_Envia
00D6                  00154 LCD_Caracter
00D6   1405           00155         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00D7   20DD           00156         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00D8                  00157 LCD_Envia
00D8   0094           00158         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00D9   20AA           00159         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00DA   0E14           00160         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00161                                         ; nibble bajo del dato a enviar a parte alta del byte.
00DB   20AA           00162         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00DC   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127, los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00DD                  00177 LCD_CodigoCGROM
00DD   0093           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00DE                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00DE   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00DF   1D03           00181         btfss   STATUS,Z
00E0   28E4           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00E1   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00E2   0093           00184         movwf   LCD_Dato
00E3   28F1           00185         goto    LCD_FinCGROM
00E4                  00186 LCD_EnheMayuscula
00E4   0813           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00E5   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00E6   1D03           00189         btfss   STATUS,Z
00E7   28EB           00190         goto    LCD_Grado               ; No es "Ñ".
00E8   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00E9   0093           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00EA   28F1           00193         goto    LCD_FinCGROM    
00EB                  00194 LCD_Grado
00EB   0813           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00EC   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00ED   1D03           00197         btfss   STATUS,Z
00EE   28F1           00198         goto    LCD_FinCGROM            ; No es "º".
00EF   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00F0   0093           00200         movwf   LCD_Dato
00F1                  00201 LCD_FinCGROM
00F1   0813           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
00F2   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
00F3                  00209 LCD_LineaEnBlanco
00F3   3010           00210         movlw   LCD_CaracteresPorLinea
00F4   28FA           00211         goto    LCD_EnviaBlancos
00F5                  00212 LCD_UnEspacioBlanco
00F5   3001           00213         movlw   .1
00F6   28FA           00214         goto    LCD_EnviaBlancos
00F7                  00215 LCD_DosEspaciosBlancos
00F7   3002           00216         movlw   .2
00F8   28FA           00217         goto    LCD_EnviaBlancos
00F9                  00218 LCD_TresEspaciosBlancos
00F9   3003           00219         movlw   .3
00FA                  00220 LCD_EnviaBlancos
00FA   0096           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00FB                  00222 LCD_EnviaOtroBlanco     
00FB   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
00FC   20D6           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00FD   0B96           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00FE   28FB           00226         goto    LCD_EnviaOtroBlanco
00FF   0008           00227         return
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto": Visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero, 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
0100                  00240 LCD_Byte
0100   0097           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0101   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
0102   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
0103   2908           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
0104   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
0105   20D6           00246         call    LCD_Caracter
0106   290A           00247         goto    LCD_VisualizaBajo
                      00248 
0107                  00249 LCD_ByteCompleto
0107   0097           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0108                  00251 LCD_VisualizaAlto
0108   0E17           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0109   210B           00253         call    LCD_Nibble              ; Lo visualiza.
010A                  00254 LCD_VisualizaBajo
010A   0817           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
010B                  00266 LCD_Nibble
010B   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
010C   0096           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
010D   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
010E   1C03           00270         btfss   STATUS,C        
010F   2913           00271         goto    LCD_EnviaByteLetra
0110   0816           00272         movf    LCD_Auxiliar1,W
0111   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
0112   2915           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0113                  00275 LCD_EnviaByteLetra
0113   0816           00276         movf    LCD_Auxiliar1,W
0114   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
0115                  00278 LCD_FinVisualizaDigito
0115   28D6           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00102         INCLUDE   <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84A. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  00000018            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  00000019            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
0116                  00042 LCD_Mensaje
0116   0098           00043         movwf   LCD_ApuntaCaracter      ; Posición de primer carácter del mensaje.
0117   302B           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0118   0298           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
0119   0398           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
011A                  00047 LCD_VisualizaOtroCaracter
011A   0818           00048         movf    LCD_ApuntaCaracter,W
011B   202B           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
011C   0099           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
011D   0899           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
011E   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

011F   2923           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
0120                  00054 LCD_NoUltimoCaracter
0120   20D6           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
0121   0A98           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
0122   291A           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
0123                  00058 LCD_FinMensaje
0123   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  0000001A            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
0124                  00073 LCD_MensajeMovimiento
0124   0098           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
0125   302B           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
0126   0298           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
0127   0398           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
0128                  00078 LCD_PrimeraPosicion
0128   019A           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
0129   20D1           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
012A                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
012A   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
012B   021A           00083         subwf   LCD_CursorPosicion,W
012C   1D03           00084         btfss   STATUS,Z
012D   2933           00085         goto    LCD_NoEsFinalLinea
012E                  00086 LCD_EsFinalLinea
012E   204F           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
012F   204F           00088         call    Retardo_200ms
0130   300F           00089         movlw   LCD_CaracteresPorLinea-1        ; Apunta a la posición del segundo carácter visualizado
0131   0298           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla y que será el primero en la siguiente
0132   2928           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
0133                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
0133   0818           00093         movf    LCD_ApuntaCaracter,W
0134   202B           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
0135   0099           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
0136   0899           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
0137   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
0138   293D           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
0139                  00099 LCD_NoUltimoCaracter2
0139   20D6           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
013A   0A9A           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
013B   0A98           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
013C   292A           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
013D                  00105 LCD_FinMovimiento                       ; de la línea.
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

013D   0008           00106         return                          ; Vuelve al programa principal.
                      00103         END
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

BCD_Centenas                      00000010
BCD_Decenas                       00000011
BCD_IncrementaCentenas            0000008C
BCD_IncrementaDecenas             00000086
BCD_Resta10                       00000082
BCD_Unidades                      00000012
BIN_BCD_Fin                       0000008F
BIN_a_BCD                         0000007F
C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
FinInterrupcion                   0000001F
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
IncrementaMinutos                 00000021
Inicio                            00000005
LCD_2Lineas4Bits5x7               000000D3
LCD_ApuntaCaracter                00000018
LCD_Auxiliar1                     00000016
LCD_Auxiliar2                     00000017
LCD_Borra                         000000D1
LCD_BusDatos                      PORTB
LCD_Byte                          00000100
LCD_ByteCompleto                  00000107
LCD_Caracter                      000000D6
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000DD
LCD_CursorIncr                    000000C1
LCD_CursorOFF                     000000CF
LCD_CursorON                      000000CD
LCD_CursorPosicion                0000001A
LCD_Dato                          00000013
LCD_DosEspaciosBlancos            000000F7
LCD_EnheMayuscula                 000000E4
LCD_EnheMinuscula                 000000DE
LCD_Envia                         000000D8
LCD_EnviaBlancos                  000000FA
LCD_EnviaByteLetra                00000113
LCD_EnviaComando                  000000D4
LCD_EnviaOtroBlanco               000000FB
LCD_EsFinalLinea                  0000012E
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

LCD_EscribeLCD                    000000AA
LCD_FinCGROM                      000000F1
LCD_FinMensaje                    00000123
LCD_FinMovimiento                 0000013D
LCD_FinVisualizaDigito            00000115
LCD_Grado                         000000EB
LCD_GuardaDato                    00000014
LCD_GuardaTRISB                   00000015
LCD_Inicializa                    00000092
LCD_Linea1                        000000C3
LCD_Linea2                        000000C5
LCD_LineaEnBlanco                 000000F3
LCD_Mensaje                       00000116
LCD_MensajeMovimiento             00000124
LCD_Nibble                        0000010B
LCD_NoEsFinalLinea                00000133
LCD_NoUltimoCaracter              00000120
LCD_NoUltimoCaracter2             00000139
LCD_OFF                           000000CB
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000C7
LCD_PosicionLinea2                000000C9
LCD_PrimeraPosicion               00000128
LCD_TresEspaciosBlancos           000000F9
LCD_UnEspacioBlanco               000000F5
LCD_ValorCaracter                 00000019
LCD_VisualizaAlto                 00000108
LCD_VisualizaBajo                 0000010A
LCD_VisualizaCaracter             0000012A
LCD_VisualizaOtroCaracter         0000011A
MensajePulsacion                  0000002C
Mensajes                          0000002B
Minuto                            0000000C
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PitidoCorto                       00000027
Principal                         00000011
Pulsador                          PORTB,6
R1Decima_BucleExterno             00000075
R1Decima_BucleExterno2            00000073
R1Decima_BucleInterno             00000077
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 18


SYMBOL TABLE
  LABEL                             VALUE 

R1ms_BucleExterno                 0000005F
R1ms_BucleInterno                 00000061
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           0000000D
R_ContB                           0000000E
R_ContC                           0000000F
RetardoMicros                     0000004B
Retardo_100micros                 00000045
Retardo_100ms                     00000051
Retardo_10micros                  00000038
Retardo_10ms                      00000057
Retardo_10s                       00000069
Retardo_1Decima                   00000072
Retardo_1ms                       0000005D
Retardo_1s                        0000006F
Retardo_200micros                 00000042
Retardo_200ms                     0000004F
Retardo_20micros                  0000004A
Retardo_20ms                      00000055
Retardo_20s                       00000067
Retardo_2ms                       0000005B
Retardo_2s                        0000006D
Retardo_4micros                   0000003E
Retardo_500micros                 0000003F
Retardo_500ms                     00000071
Retardo_50micros                  00000047
Retardo_50ms                      00000053
Retardo_5micros                   0000003D
Retardo_5ms                       00000059
Retardo_5s                        0000006B
Retardos_ms                       0000005E
Rmicros_Bucle                     0000004C
STATUS                            00000003
ServicioInterrupcion              00000013
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
TRISB                             00000086
VisualizaContador                 00000018
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
Zumbador                          PORTB,2
_CP_OFF                           00003FFF
MPASM 03.50 Released                           INT_RBI_02.ASM   10-10-2003  13:04:34         PAGE 19


SYMBOL TABLE
  LABEL                             VALUE 

_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXX--
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   315
Program Memory Words Free:   709


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

