MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************** LCD_05.asm *************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Cada vez que presiona el pulsador conectado al pin RA4 incrementa un contador
                      00010 ; visualizado en el centro de la primera línea de la pantalla.
                      00011 ;
                      00012 ; ZONA DE DATOS **********************************************************************
                      00013 
2007   3FF1           00014         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00015         LIST       P=16F84A
                      00016         INCLUDE  <P16F84A.INC>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F84A processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00208         LIST
                      00017 
                      00018         CBLOCK  0x0C
  0000000C            00019         Contador                        ; El contador a visualizar.
                      00020         ENDC
                      00021 
                      00022 #DEFINE  Pulsador PORTA,4               ; Línea donde se conecta el pulsador.
                      00023 
                      00024 ; ZONA DE CÓDIGOS ********************************************************************
                      00025 
0000                  00026         ORG     0
0000                  00027 Inicio
0000   206F           00028         call    LCD_Inicializa
0001   1683           00029         bsf     STATUS,RP0
0002   1605           00030         bsf     Pulsador                ; Línea del pulsador se configura como entrada. 
0003   1283           00031         bcf     STATUS,RP0
0004   018C           00032         clrf    Contador                ; Inicializa contador y los visualiza por 1ª vez,
0005   200D           00033         call    Visualiza
0006                  00034 Principal
0006   1E05           00035         btfss   Pulsador                ; Lee el pulsador.
0007   2009           00036         call    IncrementaVisualiza     ; Si pulsa salta a incrementar y visualizar el
0008   2806           00037         goto    Principal               ; contador
                      00038         
                      00039 ; Subrutina "IncrementaVisualiza" -------------------------------------------------------
                      00040 ;
0009                  00041 IncrementaVisualiza
0009   2032           00042         call    Retardo_20ms            ; Espera a que se estabilicen los niveles de tensión.
000A   1A05           00043         btfsc   Pulsador                ; Vuelve a leer el pulsador.
000B   2814           00044         goto    Fin_Incrementa
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C   0A8C           00045         incf    Contador,F              ; Incrementa el contador y después lo visualiza.
000D                  00046 Visualiza
000D   3007           00047         movlw   .7                      ; Se sitúa en el centro de la línea 1.
000E   20A4           00048         call    LCD_PosicionLinea1
000F   080C           00049         movf    Contador,W
0010   205C           00050         call    BIN_a_BCD               ; Se debe visualizar en decimal.
0011   20E0           00051         call    LCD_Byte
0012                  00052 EsperaDejePulsar
0012   1E05           00053         btfss   Pulsador
0013   2812           00054         goto    EsperaDejePulsar
0014                  00055 Fin_Incrementa
0014   0008           00056         return
                      00057 
                      00058         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  0000000D            00021         R_ContA                         ; Contadores para los retardos.
  0000000E            00022         R_ContB
  0000000F            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
0015                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
0015   0000           00033         nop                             ; Aporta 1 ciclo máquina.
0016   0000           00034         nop                             ; Aporta 1 ciclo máquina.
0017   0000           00035         nop                             ; Aporta 1 ciclo máquina.
0018   0000           00036         nop                             ; Aporta 1 ciclo máquina.
0019   0000           00037         nop                             ; Aporta 1 ciclo máquina.
001A                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
001A   0000           00039         nop                             ; Aporta 1 ciclo máquina.
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
001B   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
001C                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
001C   0000           00046         nop                             ; Aporta 1 ciclo máquina.
001D   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
001E   2828           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
001F                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
001F   0000           00050         nop                             ; Aporta 1 ciclo máquina.
0020   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0021   2828           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0022                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
0022   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0023   2828           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0024                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
0024   0000           00057         nop                             ; Aporta 1 ciclo máquina.
0025   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
0026   2828           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
0027                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
0027   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
0028                  00066 RetardoMicros
0028   008D           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
0029                  00068 Rmicros_Bucle
0029   0B8D           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
002A   2829           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
002B   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
002C                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
002C   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
002D   283B           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
002E                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
002E   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
002F   283B           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0030                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
0030   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0031   283B           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0032                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
0032   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0033   283B           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0034                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
0034   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
0035   283B           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0036                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
0036   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0037   283B           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
0038                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
0038   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
0039   283B           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
003A                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
003A   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
003B                  00111 Retardos_ms
003B   008E           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
003C                  00113 R1ms_BucleExterno
003C   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
003D   008D           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
003E                  00116 R1ms_BucleInterno
003E   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
003F   0B8D           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
0040   283E           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
0041   0B8E           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0042   283C           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
0043   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0044                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
0044   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0045   284F           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0046                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
0046   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
0047   284F           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0048                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
0048   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
0049   284F           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
004A                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

004A   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
004B   284F           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
004C                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
004C   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
004D   284F           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
004E                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
004E   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
004F                  00160 Retardo_1Decima
004F   008F           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
0050                  00162 R1Decima_BucleExterno2
0050   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
0051   008E           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0052                  00165 R1Decima_BucleExterno
0052   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0053   008D           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0054                  00168 R1Decima_BucleInterno          
0054   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0055   0B8D           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0056   2854           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
0057   0B8E           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
0058   2852           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
0059   0B8F           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
005A   2850           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
005B   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00191 
                      00192 ;       ===================================================================
                      00193 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00194 ;         E. Palacios, F. Remiro y L. López.
                      00195 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00196 ;       ===================================================================
                      00197 
                      00198 
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00199 
                      00200 
                      00059         INCLUDE  <BIN_BCD.INC>
                      00001 ;******************************** Librería "BIN_BCD.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Un número binario natural de 8 bits es convertido a BCD. El resultado se guarda en tres
                      00010 ; posiciones de memorias llamadas: BCD_Centenas, BCD_Decenas y BCD_Unidades.
                      00011 ;
                      00012 ; El procedimiento utilizado es mediante restas de 10, tal como se explicó en el capítulo 9.
                      00013 ;
                      00014 ; Entrada:      En el registro W el número binario natural a convertir.
                      00015 ; Salidas:      En (BCD_Centenas), (BCD_Decenas) y (BCD_Unidades).
                      00016 ;               En el registro W también las decenas (nibble alto) y unidades (nibble bajo).
                      00017 
                      00018 ; Subrutina "BIN_a_BCD" -----------------------------------------------------------------
                      00019 
                      00020         CBLOCK                          ; En las subrutinas no se debe fijar la dirección
  00000010            00021         BCD_Centenas                    ; de la RAM de usuario. Se toma a continuación de
  00000011            00022         BCD_Decenas                     ; la última asignada.
  00000012            00023         BCD_Unidades    
                      00024         ENDC
                      00025 ;
005C                  00026 BIN_a_BCD
005C   0190           00027         clrf    BCD_Centenas            ; Carga los registros con el resultado inicial.
005D   0191           00028         clrf    BCD_Decenas             ; En principio las centenas y decenas a cero.
005E   0092           00029         movwf   BCD_Unidades            ; Se carga el número binario a convertir.
005F                  00030 BCD_Resta10
005F   300A           00031         movlw   .10                     ; A las unidades se les va restando 10 en cada
0060   0212           00032         subwf   BCD_Unidades,W          ; pasada. (W)=(BCD_Unidades) -10.
0061   1C03           00033         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Unidades)>=10?
0062   286C           00034         goto    BIN_BCD_Fin             ; No, es menor de 10. Se acabó.
0063                  00035 BCD_IncrementaDecenas
0063   0092           00036         movwf   BCD_Unidades            ; Recupera lo que queda por restar.
0064   0A91           00037         incf    BCD_Decenas,F           ; Incrementa las decenas y comprueba si ha llegado
0065   300A           00038         movlw   .10                     ; a 10. Lo hace mediante una resta.
0066   0211           00039         subwf   BCD_Decenas,W           ; (W)=(BCD_Decenas)-10).
0067   1C03           00040         btfss   STATUS,C                ; ¿C = 1?, ¿(W) positivo?, ¿(BCD_Decenas)>=10?
0068   285F           00041         goto    BCD_Resta10             ; No. Vuelve a dar otra pasada, restándole 10 a
0069                  00042 BCD_IncrementaCentenas                  ; las unidades.
0069   0191           00043         clrf    BCD_Decenas             ; Pone a cero las decenas 
006A   0A90           00044         incf    BCD_Centenas,F          ; e incrementa las centenas.
006B   285F           00045         goto    BCD_Resta10             ; Otra pasada: Resta 10 al número a convertir.
006C                  00046 BIN_BCD_Fin
006C   0E11           00047         swapf   BCD_Decenas,W           ; En el nibble alto de (W) también las decenas.
006D   0712           00048         addwf   BCD_Unidades,W          ; En el nibble bajo de (W) las unidades.
006E   0008           00049         return                          ; Vuelve al programa principal.
                      00050         
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051 ; La directiva "END" se debe poner en el programa principal no aquí.
                      00052 
                      00053 ;       ===================================================================
                      00054 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00055 ;         E. Palacios, F. Remiro y L. López.
                      00056 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00057 ;       ===================================================================
                      00060         INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  00000013            00025         LCD_Dato
  00000014            00026         LCD_GuardaDato
  00000015            00027         LCD_GuardaTRISB
  00000016            00028         LCD_Auxiliar1
  00000017            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
006F                  00045 LCD_Inicializa
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

006F   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0070   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0071   1105           00048         bcf     LCD_PinEnable
0072   1085           00049         bcf     LCD_PinRW
0073   1283           00050         bcf     STATUS,RP0
0074   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado le indica
                      00052                                         ; que se va a escribir en el LCD.
0075   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD poniendo E=0.
0076   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando poniendo RS=0.
0077   2032           00055         call    Retardo_20ms
0078   3030           00056         movlw   b'00110000'     
0079   2087           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
007A   2036           00058         call    Retardo_5ms     
007B   3030           00059         movlw   b'00110000'     
007C   2087           00060         call    LCD_EscribeLCD
007D   201F           00061         call    Retardo_200micros
007E   3030           00062         movlw   b'00110000'     
007F   2087           00063         call    LCD_EscribeLCD
0080   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
0081   2087           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
0082   20B0           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
0083   20AE           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
0084   20AC           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
0085   209E           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
0086   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el pin
                      00078 ; Enable del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B que
                      00079 ; no son utilizadas para el LCD (pines RB3:RB0), primero se lee estas líneas y después se
                      00080 ; vuelve a enviar este dato sin cambiarlo.
                      00081 
                      00082 
0087                  00083 LCD_EscribeLCD
0087   39F0           00084    andlw   b'11110000'            ; Se queda con el nibble alto del dato que es el
0088   0093           00085    movwf   LCD_Dato            ; que hay que enviar y lo guarda.
0089   0806           00086    movf   LCD_BusDatos,W         ; Lee la información actual de la parte baja
008A   390F           00087    andlw   b'00001111'            ; del Puerto B, que no se debe alterar.
008B   0493           00088    iorwf   LCD_Dato,F            ; Enviará la parte alta del dato de entrada
                      00089                            ; y en la parte baja lo que había antes.
008C   1683           00090    bsf      STATUS,RP0            ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
008D   0806           00091    movf   TRISB,W               ; Guarda la configuración que tenía antes TRISB.
008E   0095           00092    movwf   LCD_GuardaTRISB
008F   300F           00093    movlw   b'00001111'            ; Las 4 líneas inferiores del Puerto B se dejan
0090   0586           00094    andwf   PORTB,F               ; como estaban y las 4 superiores como salida.
0091   1283           00095    bcf      STATUS,RP0            ; Acceso al Banco 0.
                      00096 ;LINEAS MODIFICADAS PARA QUE FUNCIONE 
0092   1C05           00097    btfss   LCD_PinRS            ; Debe garantizar una correcta escritura manteniendo
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0093   2038           00098    call   Retardo_2ms            ; 2 ms en modo comando y 50 µs en modo cáracter.
0094   2024           00099    call   Retardo_50micros
                      00100 ;LINEAS MODIFICADAS PARA QUE FUNCIONE
                      00101  
0095   0813           00102    movf   LCD_Dato,W            ; Recupera el dato a enviar.
0096   0086           00103    movwf   LCD_BusDatos         ; Envía el dato al módulo LCD.
0097   1505           00104    bsf      LCD_PinEnable         ; Permite funcionamiento del LCD mediante un pequeño
0098   1105           00105    bcf      LCD_PinEnable         ; pulso y termina impidiendo el funcionamiento del LCD.
0099   1683           00106    bsf      STATUS,RP0            ; Acceso al Banco 1. Restaura el antiguo valor en
009A   0815           00107    movf   LCD_GuardaTRISB,W      ; la configuración del Puerto B.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
009B   0086           00108    movwf   TRISB                                        ;REALMENTE ES TRISB 
                      00109 ;       movwf   PORTB                                   ;REALMENTE ES TRISB 
009C   1283           00110    bcf      STATUS,RP0            ; Acceso al Banco 0.
009D   0008           00111    return
                      00112 
                      00113 
                      00114 
                      00115 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00116 ;
                      00117 ;Los comandos que pueden ser ejecutados son:
                      00118 ;
009E                  00119 LCD_CursorIncr                          ; Cursor en modo incrementar.
009E   3006           00120         movlw   b'00000110'
009F   28B1           00121         goto    LCD_EnviaComando
00A0                  00122 LCD_Linea1                              ; Cursor al principio de la Línea 1.
00A0   3080           00123         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00A1   28B1           00124         goto    LCD_EnviaComando
00A2                  00125 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00A2   30C0           00126         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00A3   28B1           00127         goto    LCD_EnviaComando
00A4                  00128 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00A4   3880           00129         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00A5   28B1           00130         goto    LCD_EnviaComando        ; registro W.
00A6                  00131 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00A6   38C0           00132         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00A7   28B1           00133         goto    LCD_EnviaComando        ; registro W.
00A8                  00134 LCD_OFF                         ; Pantalla apagada.
00A8   3008           00135         movlw   b'00001000'
00A9   28B1           00136         goto    LCD_EnviaComando
00AA                  00137 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00AA   300E           00138         movlw   b'00001110'
00AB   28B1           00139         goto    LCD_EnviaComando
00AC                  00140 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00AC   300C           00141         movlw   b'00001100'
00AD   28B1           00142         goto    LCD_EnviaComando
00AE                  00143 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00AE   3001           00144         movlw   b'00000001'             ; cursor a principio de la línea 1.
00AF   28B1           00145         goto    LCD_EnviaComando
00B0                  00146 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00B0   3028           00147         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00148 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00149 
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00150 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00151 ;
                      00152 ; "LCD_EnviaComando". Escribe un comando en el registro del módulo LCD. La palabra de
                      00153 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00154 ; "LCD_Caracter". Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00155 ; a través del registro W. Trabaja en Modo Dato.
                      00156 ;
00B1                  00157 LCD_EnviaComando
00B1   1005           00158         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00B2   28B5           00159         goto    LCD_Envia
00B3                  00160 LCD_Caracter
00B3   1405           00161         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00B4   20BD           00162         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00B5                  00163 LCD_Envia
00B5   0094           00164         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00B6   2087           00165         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00B7   0E14           00166         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00167                                         ; nibble bajo del dato a enviar a parte alta del byte.
00B8   2087           00168         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00B9   1C05           00169         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00BA   2038           00170         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00BB   2024           00171         call    Retardo_50micros
00BC   0008           00172         return  
                      00173 
                      00174 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00175 ;
                      00176 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00177 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00178 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00179 ;
                      00180 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00181 ; que puedan ser visualizado en el módulo LM016L.
                      00182 ; 
                      00183 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00184 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00185 
00BD                  00186 LCD_CodigoCGROM
00BD   0093           00187         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00BE                  00188 LCD_EnheMinuscula                       ; un carácter especial.
00BE   3CF1           00189         sublw   'ñ'                     ; ¿Es la "ñ"?
00BF   1D03           00190         btfss   STATUS,Z
00C0   28C4           00191         goto    LCD_EnheMayuscula       ; No es "ñ".
00C1   30EE           00192         movlw   b'11101110'             ; Código CGROM de la "ñ".
00C2   0093           00193         movwf   LCD_Dato
00C3   28D1           00194         goto    LCD_FinCGROM
00C4                  00195 LCD_EnheMayuscula
00C4   0813           00196         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00C5   3CD1           00197         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00C6   1D03           00198         btfss   STATUS,Z
00C7   28CB           00199         goto    LCD_Grado               ; No es "Ñ".
00C8   30EE           00200         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00C9   0093           00201         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00CA   28D1           00202         goto    LCD_FinCGROM    
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CB                  00203 LCD_Grado
00CB   0813           00204         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00CC   3CBA           00205         sublw   'º'                     ; ¿Es el símbolo "º"?
00CD   1D03           00206         btfss   STATUS,Z
00CE   28D1           00207         goto    LCD_FinCGROM            ; No es "º".
00CF   30DF           00208         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00D0   0093           00209         movwf   LCD_Dato
00D1                  00210 LCD_FinCGROM
00D1   0813           00211         movf    LCD_Dato,W              ; En (W) el código buscado.
00D2   0008           00212         return
                      00213 
                      00214 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00215 ;
                      00216 ; Visualiza espacios en blanco.
                      00217 
00D3                  00218 LCD_LineaEnBlanco
00D3   3010           00219         movlw   LCD_CaracteresPorLinea
00D4   28DA           00220         goto    LCD_EnviaBlancos
00D5                  00221 LCD_UnEspacioBlanco
00D5   3001           00222         movlw   .1
00D6   28DA           00223         goto    LCD_EnviaBlancos
00D7                  00224 LCD_DosEspaciosBlancos
00D7   3002           00225         movlw   .2
00D8   28DA           00226         goto    LCD_EnviaBlancos
00D9                  00227 LCD_TresEspaciosBlancos
00D9   3003           00228         movlw   .3
00DA                  00229 LCD_EnviaBlancos
00DA   0096           00230         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00DB                  00231 LCD_EnviaOtroBlanco     
00DB   3020           00232         movlw   ' '                     ; Esto es un espacio en blanco.
00DC   20B3           00233         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00DD   0B96           00234         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00DE   28DB           00235         goto    LCD_EnviaOtroBlanco
00DF   0008           00236         return
                      00237 
                      00238 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00239 ;
                      00240 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00241 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00242 ;
                      00243 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00244 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00245 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00246 ;
                      00247 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00248 ;
00E0                  00249 LCD_Byte
00E0   0097           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00E1   39F0           00251         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
00E2   1D03           00252         btfss   STATUS,Z                ; Si es cero lo apaga.
00E3   28E8           00253         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
00E4   3020           00254         movlw   ' '                     ; Visualiza un espacio en blanco.
00E5   20B3           00255         call    LCD_Caracter
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E6   28EA           00256         goto    LCD_VisualizaBajo
                      00257 
00E7                  00258 LCD_ByteCompleto
00E7   0097           00259         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00E8                  00260 LCD_VisualizaAlto
00E8   0E17           00261         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
00E9   20EB           00262         call    LCD_Nibble              ; Lo visualiza.
00EA                  00263 LCD_VisualizaBajo
00EA   0817           00264         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00265 ;       call    LCD_Nibble              ; Lo visualiza.
                      00266 ;       return
                      00267 
                      00268 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00269 ;
                      00270 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00271 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00272 ; - Si (W)=b'01010110', se visualizará "6". 
                      00273 ; - Si (W)=b'10101110', se visualizará "E". 
                      00274 ;
00EB                  00275 LCD_Nibble
00EB   390F           00276         andlw   b'00001111'             ; Se queda con la parte baja.
00EC   0096           00277         movwf   LCD_Auxiliar1           ; Lo guarda.
00ED   3C09           00278         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
00EE   1C03           00279         btfss   STATUS,C        
00EF   28F3           00280         goto    LCD_EnviaByteLetra
00F0   0816           00281         movf    LCD_Auxiliar1,W
00F1   3E30           00282         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00F2   28F5           00283         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00F3                  00284 LCD_EnviaByteLetra
00F3   0816           00285         movf    LCD_Auxiliar1,W
00F4   3E37           00286         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
00F5                  00287 LCD_FinVisualizaDigito
00F5   28B3           00288         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00289                                         ; para no sobrecargar la pila.
                      00290                                         
                      00291 ;       ===================================================================
                      00292 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00293 ;         E. Palacios, F. Remiro y L. López.
                      00294 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00295 ;       ===================================================================
                      00061         END
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

BCD_Centenas                      00000010
BCD_Decenas                       00000011
BCD_IncrementaCentenas            00000069
BCD_IncrementaDecenas             00000063
BCD_Resta10                       0000005F
BCD_Unidades                      00000012
BIN_BCD_Fin                       0000006C
BIN_a_BCD                         0000005C
C                                 00000000
Contador                          0000000C
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
EsperaDejePulsar                  00000012
F                                 00000001
FSR                               00000004
Fin_Incrementa                    00000014
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
IncrementaVisualiza               00000009
Inicio                            00000000
LCD_2Lineas4Bits5x7               000000B0
LCD_Auxiliar1                     00000016
LCD_Auxiliar2                     00000017
LCD_Borra                         000000AE
LCD_BusDatos                      PORTB
LCD_Byte                          000000E0
LCD_ByteCompleto                  000000E7
LCD_Caracter                      000000B3
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000BD
LCD_CursorIncr                    0000009E
LCD_CursorOFF                     000000AC
LCD_CursorON                      000000AA
LCD_Dato                          00000013
LCD_DosEspaciosBlancos            000000D7
LCD_EnheMayuscula                 000000C4
LCD_EnheMinuscula                 000000BE
LCD_Envia                         000000B5
LCD_EnviaBlancos                  000000DA
LCD_EnviaByteLetra                000000F3
LCD_EnviaComando                  000000B1
LCD_EnviaOtroBlanco               000000DB
LCD_EscribeLCD                    00000087
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

LCD_FinCGROM                      000000D1
LCD_FinVisualizaDigito            000000F5
LCD_Grado                         000000CB
LCD_GuardaDato                    00000014
LCD_GuardaTRISB                   00000015
LCD_Inicializa                    0000006F
LCD_Linea1                        000000A0
LCD_Linea2                        000000A2
LCD_LineaEnBlanco                 000000D3
LCD_Nibble                        000000EB
LCD_OFF                           000000A8
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000A4
LCD_PosicionLinea2                000000A6
LCD_TresEspaciosBlancos           000000D9
LCD_UnEspacioBlanco               000000D5
LCD_VisualizaAlto                 000000E8
LCD_VisualizaBajo                 000000EA
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Principal                         00000006
Pulsador                          PORTA,4
R1Decima_BucleExterno             00000052
R1Decima_BucleExterno2            00000050
R1Decima_BucleInterno             00000054
R1ms_BucleExterno                 0000003C
R1ms_BucleInterno                 0000003E
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           0000000D
R_ContB                           0000000E
R_ContC                           0000000F
RetardoMicros                     00000028
Retardo_100micros                 00000022
Retardo_100ms                     0000002E
Retardo_10micros                  00000015
Retardo_10ms                      00000034
Retardo_10s                       00000046
Retardo_1Decima                   0000004F
Retardo_1ms                       0000003A
Retardo_1s                        0000004C
Retardo_200micros                 0000001F
Retardo_200ms                     0000002C
Retardo_20micros                  00000027
Retardo_20ms                      00000032
Retardo_20s                       00000044
Retardo_2ms                       00000038
Retardo_2s                        0000004A
Retardo_4micros                   0000001B
Retardo_500micros                 0000001C
Retardo_500ms                     0000004E
Retardo_50micros                  00000024
Retardo_50ms                      00000030
Retardo_5micros                   0000001A
Retardo_5ms                       00000036
Retardo_5s                        00000048
Retardos_ms                       0000003B
Rmicros_Bucle                     00000029
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
Visualiza                         0000000D
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CONFIG                           00002007
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
__DEBUG                           1


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX----------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   246
Program Memory Words Free:   778


MPASM  5.51                        LCD_05.ASM   6-4-2023  20:13:26         PAGE 17





Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

