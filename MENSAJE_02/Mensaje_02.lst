MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************************ Mensaje_02.asm ************************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; En la pantalla del módulo LCD se visualiza un mensaje de menos de 16 caracteres grabado
                      00010 ; en la memoria ROM mediante la directiva DT. Utiliza la subrutina LCD_Mensaje de la
                      00011 ; librería LCD_MENS.INC
                      00012 ;
                      00013 ; ZONA DE DATOS **********************************************************************
                      00014 
2007   3FF1           00015         __CONFIG   _CP_OFF &  _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00016         LIST       P=16F84A
                      00017         INCLUDE <P16F84A.INC>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F84A processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00208         LIST
                      00018 
                      00019         CBLOCK  0x0C
                      00020         ENDC
                      00021 
                      00022 ; ZONA DE CÓDIGOS ********************************************************************
                      00023 
0000                  00024         ORG     0
0000                  00025 Inicio
0000   2018           00026         call    LCD_Inicializa
0001   3005           00027         movlw   Mensaje0                        ; Apunta dónde se encuentra el mensaje.
0002   209F           00028         call    LCD_Mensaje             ; Visualiza el mensaje.
0003   0063           00029         sleep                           ; Pasa a modo bajo consumo.
                      00030 
                      00031 ; Mensajes ------------------------------------------------------------------------------
                      00032 ;
0004                  00033 Mensajes
0004   0782           00034         addwf   PCL,F
0005                  00035 Mensaje0
0005   3448 346F 346C 00036         DT "Hola!, que tal?   ", 0x00   
       3461 3421 342C 
       3420 3471 3475 
       3465 3420 3474 
       3461 346C 343F 
       3420 3420 3420 
       3400 
                      00037 
                      00038         INCLUDE  <LCD_4BIT.INC>
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  0000000C            00025         LCD_Dato
  0000000D            00026         LCD_GuardaDato
  0000000E            00027         LCD_GuardaTRISB
  0000000F            00028         LCD_Auxiliar1
  00000010            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
0018                  00045 LCD_Inicializa
0018   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0019   1005           00047         bcf     LCD_PinRS               ; R/W y E.
001A   1105           00048         bcf     LCD_PinEnable
001B   1085           00049         bcf     LCD_PinRW
001C   1283           00050         bcf     STATUS,RP0
001D   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado le indica
                      00052                                         ; que se va a escribir en el LCD.
001E   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD poniendo E=0.
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001F   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando poniendo RS=0.
0020   20E4           00055         call    Retardo_20ms
0021   3030           00056         movlw   b'00110000'     
0022   2030           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
0023   20E8           00058         call    Retardo_5ms     
0024   3030           00059         movlw   b'00110000'     
0025   2030           00060         call    LCD_EscribeLCD
0026   20D1           00061         call    Retardo_200micros
0027   3030           00062         movlw   b'00110000'     
0028   2030           00063         call    LCD_EscribeLCD
0029   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
002A   2030           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
002B   2059           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
002C   2057           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
002D   2055           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
002E   2047           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
002F   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el pin
                      00078 ; Enable del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B que
                      00079 ; no son utilizadas para el LCD (pines RB3:RB0), primero se lee estas líneas y después se
                      00080 ; vuelve a enviar este dato sin cambiarlo.
                      00081 
                      00082 
0030                  00083 LCD_EscribeLCD
0030   39F0           00084    andlw   b'11110000'            ; Se queda con el nibble alto del dato que es el
0031   008C           00085    movwf   LCD_Dato            ; que hay que enviar y lo guarda.
0032   0806           00086    movf   LCD_BusDatos,W         ; Lee la información actual de la parte baja
0033   390F           00087    andlw   b'00001111'            ; del Puerto B, que no se debe alterar.
0034   048C           00088    iorwf   LCD_Dato,F            ; Enviará la parte alta del dato de entrada
                      00089                            ; y en la parte baja lo que había antes.
0035   1683           00090    bsf      STATUS,RP0            ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0036   0806           00091    movf   TRISB,W               ; Guarda la configuración que tenía antes TRISB.
0037   008E           00092    movwf   LCD_GuardaTRISB
0038   300F           00093    movlw   b'00001111'            ; Las 4 líneas inferiores del Puerto B se dejan
0039   0586           00094    andwf   PORTB,F               ; como estaban y las 4 superiores como salida.
003A   1283           00095    bcf      STATUS,RP0            ; Acceso al Banco 0.
                      00096 ;LINEAS MODIFICADAS PARA QUE FUNCIONE 
003B   1C05           00097    btfss   LCD_PinRS            ; Debe garantizar una correcta escritura manteniendo
003C   20EA           00098    call   Retardo_2ms            ; 2 ms en modo comando y 50 µs en modo cáracter.
003D   20D6           00099    call   Retardo_50micros
                      00100 ;LINEAS MODIFICADAS PARA QUE FUNCIONE
                      00101  
003E   080C           00102    movf   LCD_Dato,W            ; Recupera el dato a enviar.
003F   0086           00103    movwf   LCD_BusDatos         ; Envía el dato al módulo LCD.
0040   1505           00104    bsf      LCD_PinEnable         ; Permite funcionamiento del LCD mediante un pequeño
0041   1105           00105    bcf      LCD_PinEnable         ; pulso y termina impidiendo el funcionamiento del LCD.
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0042   1683           00106    bsf      STATUS,RP0            ; Acceso al Banco 1. Restaura el antiguo valor en
0043   080E           00107    movf   LCD_GuardaTRISB,W      ; la configuración del Puerto B.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0044   0086           00108    movwf   TRISB                                        ;REALMENTE ES TRISB 
                      00109 ;       movwf   PORTB                                   ;REALMENTE ES TRISB 
0045   1283           00110    bcf      STATUS,RP0            ; Acceso al Banco 0.
0046   0008           00111    return
                      00112 
                      00113 
                      00114 
                      00115 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00116 ;
                      00117 ;Los comandos que pueden ser ejecutados son:
                      00118 ;
0047                  00119 LCD_CursorIncr                          ; Cursor en modo incrementar.
0047   3006           00120         movlw   b'00000110'
0048   285A           00121         goto    LCD_EnviaComando
0049                  00122 LCD_Linea1                              ; Cursor al principio de la Línea 1.
0049   3080           00123         movlw   b'10000000'             ; Dirección 00h de la DDRAM
004A   285A           00124         goto    LCD_EnviaComando
004B                  00125 LCD_Linea2                              ; Cursor al principio de la Línea 2.
004B   30C0           00126         movlw   b'11000000'             ; Dirección 40h de la DDRAM
004C   285A           00127         goto    LCD_EnviaComando
004D                  00128 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
004D   3880           00129         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
004E   285A           00130         goto    LCD_EnviaComando        ; registro W.
004F                  00131 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
004F   38C0           00132         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
0050   285A           00133         goto    LCD_EnviaComando        ; registro W.
0051                  00134 LCD_OFF                         ; Pantalla apagada.
0051   3008           00135         movlw   b'00001000'
0052   285A           00136         goto    LCD_EnviaComando
0053                  00137 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
0053   300E           00138         movlw   b'00001110'
0054   285A           00139         goto    LCD_EnviaComando
0055                  00140 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
0055   300C           00141         movlw   b'00001100'
0056   285A           00142         goto    LCD_EnviaComando
0057                  00143 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
0057   3001           00144         movlw   b'00000001'             ; cursor a principio de la línea 1.
0058   285A           00145         goto    LCD_EnviaComando
0059                  00146 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
0059   3028           00147         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00148 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00149 
                      00150 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00151 ;
                      00152 ; "LCD_EnviaComando". Escribe un comando en el registro del módulo LCD. La palabra de
                      00153 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00154 ; "LCD_Caracter". Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00155 ; a través del registro W. Trabaja en Modo Dato.
                      00156 ;
005A                  00157 LCD_EnviaComando
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005A   1005           00158         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
005B   285E           00159         goto    LCD_Envia
005C                  00160 LCD_Caracter
005C   1405           00161         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
005D   2066           00162         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
005E                  00163 LCD_Envia
005E   008D           00164         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
005F   2030           00165         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
0060   0E0D           00166         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00167                                         ; nibble bajo del dato a enviar a parte alta del byte.
0061   2030           00168         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
0062   1C05           00169         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
0063   20EA           00170         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
0064   20D6           00171         call    Retardo_50micros
0065   0008           00172         return  
                      00173 
                      00174 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00175 ;
                      00176 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00177 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00178 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00179 ;
                      00180 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00181 ; que puedan ser visualizado en el módulo LM016L.
                      00182 ; 
                      00183 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00184 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00185 
0066                  00186 LCD_CodigoCGROM
0066   008C           00187         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
0067                  00188 LCD_EnheMinuscula                       ; un carácter especial.
0067   3CF1           00189         sublw   'ñ'                     ; ¿Es la "ñ"?
0068   1D03           00190         btfss   STATUS,Z
0069   286D           00191         goto    LCD_EnheMayuscula       ; No es "ñ".
006A   30EE           00192         movlw   b'11101110'             ; Código CGROM de la "ñ".
006B   008C           00193         movwf   LCD_Dato
006C   287A           00194         goto    LCD_FinCGROM
006D                  00195 LCD_EnheMayuscula
006D   080C           00196         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
006E   3CD1           00197         sublw   'Ñ'                     ; ¿Es la "Ñ"?
006F   1D03           00198         btfss   STATUS,Z
0070   2874           00199         goto    LCD_Grado               ; No es "Ñ".
0071   30EE           00200         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
0072   008C           00201         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
0073   287A           00202         goto    LCD_FinCGROM    
0074                  00203 LCD_Grado
0074   080C           00204         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
0075   3CBA           00205         sublw   'º'                     ; ¿Es el símbolo "º"?
0076   1D03           00206         btfss   STATUS,Z
0077   287A           00207         goto    LCD_FinCGROM            ; No es "º".
0078   30DF           00208         movlw   b'11011111'             ; Código CGROM del símbolo "º".
0079   008C           00209         movwf   LCD_Dato
007A                  00210 LCD_FinCGROM
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007A   080C           00211         movf    LCD_Dato,W              ; En (W) el código buscado.
007B   0008           00212         return
                      00213 
                      00214 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00215 ;
                      00216 ; Visualiza espacios en blanco.
                      00217 
007C                  00218 LCD_LineaEnBlanco
007C   3010           00219         movlw   LCD_CaracteresPorLinea
007D   2883           00220         goto    LCD_EnviaBlancos
007E                  00221 LCD_UnEspacioBlanco
007E   3001           00222         movlw   .1
007F   2883           00223         goto    LCD_EnviaBlancos
0080                  00224 LCD_DosEspaciosBlancos
0080   3002           00225         movlw   .2
0081   2883           00226         goto    LCD_EnviaBlancos
0082                  00227 LCD_TresEspaciosBlancos
0082   3003           00228         movlw   .3
0083                  00229 LCD_EnviaBlancos
0083   008F           00230         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
0084                  00231 LCD_EnviaOtroBlanco     
0084   3020           00232         movlw   ' '                     ; Esto es un espacio en blanco.
0085   205C           00233         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
0086   0B8F           00234         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
0087   2884           00235         goto    LCD_EnviaOtroBlanco
0088   0008           00236         return
                      00237 
                      00238 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00239 ;
                      00240 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00241 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00242 ;
                      00243 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00244 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00245 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00246 ;
                      00247 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00248 ;
0089                  00249 LCD_Byte
0089   0090           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
008A   39F0           00251         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
008B   1D03           00252         btfss   STATUS,Z                ; Si es cero lo apaga.
008C   2891           00253         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
008D   3020           00254         movlw   ' '                     ; Visualiza un espacio en blanco.
008E   205C           00255         call    LCD_Caracter
008F   2893           00256         goto    LCD_VisualizaBajo
                      00257 
0090                  00258 LCD_ByteCompleto
0090   0090           00259         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
0091                  00260 LCD_VisualizaAlto
0091   0E10           00261         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
0092   2094           00262         call    LCD_Nibble              ; Lo visualiza.
0093                  00263 LCD_VisualizaBajo
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0093   0810           00264         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00265 ;       call    LCD_Nibble              ; Lo visualiza.
                      00266 ;       return
                      00267 
                      00268 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00269 ;
                      00270 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00271 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00272 ; - Si (W)=b'01010110', se visualizará "6". 
                      00273 ; - Si (W)=b'10101110', se visualizará "E". 
                      00274 ;
0094                  00275 LCD_Nibble
0094   390F           00276         andlw   b'00001111'             ; Se queda con la parte baja.
0095   008F           00277         movwf   LCD_Auxiliar1           ; Lo guarda.
0096   3C09           00278         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
0097   1C03           00279         btfss   STATUS,C        
0098   289C           00280         goto    LCD_EnviaByteLetra
0099   080F           00281         movf    LCD_Auxiliar1,W
009A   3E30           00282         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
009B   289E           00283         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
009C                  00284 LCD_EnviaByteLetra
009C   080F           00285         movf    LCD_Auxiliar1,W
009D   3E37           00286         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
009E                  00287 LCD_FinVisualizaDigito
009E   285C           00288         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00289                                         ; para no sobrecargar la pila.
                      00290                                         
                      00291 ;       ===================================================================
                      00292 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00293 ;         E. Palacios, F. Remiro y L. López.
                      00294 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00295 ;       ===================================================================
                      00039         INCLUDE  <LCD_MENS.INC>
                      00001 ;**************************** Librería "LCD_MENS.INC" ********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería de subrutinas para el manejo de mensajes a visualizar en un visualizador LCD.
                      00010 
                      00011         CBLOCK
  00000011            00012         LCD_ApuntaCaracter              ; Indica la posición del carácter a visualizar
                      00013                                         ; respecto del comienzo de todos los mensajes,
                      00014                                         ; (posición de la etiqueta "Mensajes").
  00000012            00015         LCD_ValorCaracter                       ; Código ASCII del carácter a 
                      00016         ENDC                            ; visualizar.
                      00017 
                      00018 ; Los mensajes tienen que estar situados dentro de las 256 primeras posiciones de la 
                      00019 ; memoria de programa, es decir, no pueden superar la dirección 0FFh.
                      00020 
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00021 ; Subrutina "LCD_Mensaje" ---------------------------------------------------------------
                      00022 ;
                      00023 ; Visualiza por pantalla el mensaje apuntado por el registro W.
                      00024 ;
                      00025 ; Los mensajes deben localizarse dentro de una zona encabezada por la etiqueta "Mensajes" y que
                      00026 ; tenga la siguiente estructura:
                      00027 ;
                      00028 ; Mensajes                              ; ¡Etiqueta obligatoria!
                      00029 ;       addwf   PCL,F
                      00030 ; Mensaje0                              ; Posición inicial del mensaje.
                      00031 ;       DT ".. ..", 0x00                        ; Mensaje terminado en 0x00.
                      00032 ; Mensaje1
                      00033 ;       ...     
                      00034 ;       ...
                      00035 ; FinMensajes
                      00036 ;
                      00037 ; La llamada a esta subrutina se realizará siguiendo este ejemplo:
                      00038 ;
                      00039 ;       movlw   Mensaje0                        ; Carga la posición del mensaje.
                      00040 ;       call    LCD_Mensaje             ; Visualiza el mensaje.
                      00041 ;
009F                  00042 LCD_Mensaje
009F   0091           00043         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
00A0   3004           00044         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
00A1   0291           00045         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de etiqueta "Mensajes".
00A2   0391           00046         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
00A3                  00047 LCD_VisualizaOtroCaracter
00A3   0811           00048         movf    LCD_ApuntaCaracter,W
00A4   2004           00049         call    Mensajes                        ; Obtiene el código ASCII del carácter apuntado.
00A5   0092           00050         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
00A6   0892           00051         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
00A7   1903           00052         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
00A8   28AC           00053         goto    LCD_FinMensaje          ; de mensaje, sale fuera.
00A9                  00054 LCD_NoUltimoCaracter
00A9   205C           00055         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
00AA   0A91           00056         incf    LCD_ApuntaCaracter,F    ; Apunta a la posición del siguiente carácter 
00AB   28A3           00057         goto    LCD_VisualizaOtroCaracter       ; dentro del mensaje.
00AC                  00058 LCD_FinMensaje
00AC   0008           00059         return                          ; Vuelve al programa principal.
                      00060 
                      00061 ; Subrutina "LCD_MensajeMovimiento" -----------------------------------------------------
                      00062 ;
                      00063 ; Visualiza un mensaje de mayor longitud que los 16 caracteres que pueden representarse
                      00064 ; en una línea, por tanto se desplaza a través de la pantalla.
                      00065 ;
                      00066 ; En el mensaje debe dejarse 16 espacios en blanco, al principio y al final para
                      00067 ; conseguir que el desplazamiento del mensaje sea lo más legible posible.
                      00068 ;
                      00069         CBLOCK  
  00000013            00070         LCD_CursorPosicion              ; Contabiliza la posición del cursor dentro de la
                      00071         ENDC                            ; pantalla LCD
                      00072 
00AD                  00073 LCD_MensajeMovimiento
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00AD   0091           00074         movwf   LCD_ApuntaCaracter      ; Posición del primer carácter del mensaje.
00AE   3004           00075         movlw   Mensajes                        ; Halla la posición relativa del primer carácter
00AF   0291           00076         subwf   LCD_ApuntaCaracter,F    ; del mensaje respecto de la etiqueta "Mensajes".
00B0   0391           00077         decf    LCD_ApuntaCaracter,F    ; Compensa la posición que ocupa "addwf PCL,F".
00B1                  00078 LCD_PrimeraPosicion
00B1   0193           00079         clrf    LCD_CursorPosicion      ; El cursor en la posición 0 de la línea.
00B2   2057           00080         call    LCD_Borra               ; Se sitúa en la primera posición de la línea 1 y
00B3                  00081 LCD_VisualizaCaracter                   ; borra la pantalla.
00B3   3010           00082         movlw   LCD_CaracteresPorLinea  ; ¿Ha llegado a final de línea?
00B4   0213           00083         subwf   LCD_CursorPosicion,W
00B5   1D03           00084         btfss   STATUS,Z
00B6   28BC           00085         goto    LCD_NoEsFinalLinea
00B7                  00086 LCD_EsFinalLinea
00B7   20DE           00087         call    Retardo_200ms           ; Lo mantiene visualizado durante este tiempo.
00B8   20DE           00088         call    Retardo_200ms
00B9   300F           00089         movlw   LCD_CaracteresPorLinea-1; Apunta a la posición del segundo carácter visualizado
00BA   0291           00090         subwf   LCD_ApuntaCaracter,F    ; en pantalla, que será el primero en la siguiente
00BB   28B1           00091         goto    LCD_PrimeraPosicion      ; visualización de línea, para producir el efecto
00BC                  00092 LCD_NoEsFinalLinea                      ; de desplazamiento hacia la izquierda.
00BC   0811           00093         movf    LCD_ApuntaCaracter,W
00BD   2004           00094         call    Mensajes                        ; Obtiene el ASCII del carácter apuntado.
00BE   0092           00095         movwf   LCD_ValorCaracter               ; Guarda el valor de carácter.
00BF   0892           00096         movf    LCD_ValorCaracter,F     ; Lo único que hace es posicionar flag Z. En caso
00C0   1903           00097         btfsc   STATUS,Z                ; que sea "0x00", que es código indicador final 
00C1   28C6           00098         goto    LCD_FinMovimiento       ; de mensaje, sale fuera.
00C2                  00099 LCD_NoUltimoCaracter2
00C2   205C           00100         call    LCD_Caracter            ; Visualiza el carácter ASCII leído.
00C3   0A93           00101         incf    LCD_CursorPosicion,F    ; Contabiliza el incremento de posición del 
                      00102                                         ; cursor en la pantalla.
00C4   0A91           00103         incf    LCD_ApuntaCaracter,F    ; Apunta a la siguiente posición por visualizar.
00C5   28B3           00104         goto    LCD_VisualizaCaracter   ; Vuelve a visualizar el siguiente carácter
00C6                  00105 LCD_FinMovimiento                       ; de la línea.
00C6   0008           00106         return                          ; Vuelve al programa principal.
                      00107         
                      00108 ;       ===================================================================
                      00109 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00110 ;         E. Palacios, F. Remiro y L. López.
                      00111 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00112 ;       ===================================================================     
                      00113         
                      00040         INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librería "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librería con múltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Además se pueden implementar otras subrutinas muy fácilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00013 ; de cuarzo a 4 MHz. Como cada ciclo máquina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo máquina tarda 4 x 1/4MHz = 1 µs.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos máquina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK
  00000014            00021         R_ContA                         ; Contadores para los retardos.
  00000015            00022         R_ContB
  00000016            00023         R_ContC
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
                      00028 ; A continuación retardos pequeños teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos máquina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos máquina y cada instrucción "nop" tarda 1 ciclo máquina.
                      00031 ;
00C7                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos máquina.
00C7   0000           00033         nop                             ; Aporta 1 ciclo máquina.
00C8   0000           00034         nop                             ; Aporta 1 ciclo máquina.
00C9   0000           00035         nop                             ; Aporta 1 ciclo máquina.
00CA   0000           00036         nop                             ; Aporta 1 ciclo máquina.
00CB   0000           00037         nop                             ; Aporta 1 ciclo máquina.
00CC                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos máquina.
00CC   0000           00039         nop                             ; Aporta 1 ciclo máquina.
00CD                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos máquina.
00CD   0008           00041         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
00CE                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos máquina.
00CE   0000           00046         nop                             ; Aporta 1 ciclo máquina.
00CF   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo máquina. Este es el valor de "K".
00D0   28DA           00048         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00D1                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos máquina.
00D1   0000           00050         nop                             ; Aporta 1 ciclo máquina.
00D2   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00D3   28DA           00052         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00D4                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos máquina.
00D4   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00D5   28DA           00055         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00D6                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos máquina.
00D6   0000           00057         nop                             ; Aporta 1 ciclo máquina.
00D7   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo máquina. Este es el valor de "K".
00D8   28DA           00059         goto    RetardoMicros           ; Aporta 2 ciclos máquina.
00D9                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos máquina.
00D9   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "K".
                      00062 ;
                      00063 ; El próximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos máquina.
                      00065 ;
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DA                  00066 RetardoMicros
00DA   0094           00067         movwf   R_ContA                 ; Aporta 1 ciclo máquina.
00DB                  00068 Rmicros_Bucle
00DB   0B94           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00DC   28DB           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos máquina.
00DD   0008           00071         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500 µs. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200 µs. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100 µs. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50 µs. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20 µs. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
                      00081 ;
00DE                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos máquina.
00DE   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00DF   28ED           00084         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00E0                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos máquina.
00E0   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "M".
00E1   28ED           00087         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00E2                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos máquina.
00E2   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00E3   28ED           00090         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00E4                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos máquina.
00E4   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00E5   28ED           00093         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00E6                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos máquina.
00E6   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "M".
00E7   28ED           00096         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00E8                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos máquina.
00E8   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00E9   28ED           00099         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00EA                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos máquina.
00EA   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
00EB   28ED           00102         goto    Retardos_ms             ; Aporta 2 ciclos máquina.
00EC                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos máquina.
00EC   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo máquina. Este es el valor de "M".
                      00105 ;
                      00106 ; El próximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos máquina. Para K=249 y M=1 supone 1002 ciclos máquina
                      00109 ; que a 4 MHz son 1002 µs = 1 ms.
                      00110 ;
00ED                  00111 Retardos_ms
00ED   0095           00112         movwf   R_ContB                 ; Aporta 1 ciclo máquina.
00EE                  00113 R1ms_BucleExterno
00EE   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos máquina. Este es el valor de "K".
00EF   0094           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos máquina.
00F0                  00116 R1ms_BucleInterno
00F0   0000           00117         nop                             ; Aporta KxMx1 ciclos máquina.
00F1   0B94           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F2   28F0           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos máquina.
00F3   0B95           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
00F4   28EE           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos máquina.
00F5   0008           00122         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
00F6                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos máquina.
00F6   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00F7   2901           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00F8                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos máquina.
00F8   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo máquina. Este es el valor de "N".
00F9   2901           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00FA                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos máquina.
00FA   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00FB   2901           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00FC                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos máquina.
00FC   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00FD   2901           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
00FE                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos máquina.
00FE   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo máquina. Este es el valor de "N".
00FF   2901           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos máquina.
0100                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos máquina.
0100   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo máquina. Este es el valor de "N".
                      00153 ;
                      00154 ; El próximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos máquina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos máquina que a 4 MHz son 100011 µs = 100 ms = 0,1 s = 1 décima de segundo.
                      00159 ;
0101                  00160 Retardo_1Decima
0101   0096           00161         movwf   R_ContC                 ; Aporta 1 ciclo máquina.
0102                  00162 R1Decima_BucleExterno2
0102   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos máquina. Este es el valor de "M".
0103   0095           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos máquina.
0104                  00165 R1Decima_BucleExterno
0104   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos máquina. Este es el valor de "K".
0105   0094           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos máquina.
0106                  00168 R1Decima_BucleInterno          
0106   0000           00169         nop                             ; Aporta KxMxNx1 ciclos máquina.
0107   0B94           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
0108   2906           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos máquina.
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0109   0B95           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
010A   2904           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos máquina.
010B   0B96           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
010C   2902           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos máquina.
010D   0008           00176         return                          ; El salto del retorno aporta 2 ciclos máquina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00191 
                      00192 ;       ===================================================================
                      00193 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00194 ;         E. Palacios, F. Remiro y L. López.
                      00195 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00196 ;       ===================================================================
                      00197 
                      00198 
                      00199 
                      00200 
                      00041         END
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000000
LCD_2Lineas4Bits5x7               00000059
LCD_ApuntaCaracter                00000011
LCD_Auxiliar1                     0000000F
LCD_Auxiliar2                     00000010
LCD_Borra                         00000057
LCD_BusDatos                      PORTB
LCD_Byte                          00000089
LCD_ByteCompleto                  00000090
LCD_Caracter                      0000005C
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   00000066
LCD_CursorIncr                    00000047
LCD_CursorOFF                     00000055
LCD_CursorON                      00000053
LCD_CursorPosicion                00000013
LCD_Dato                          0000000C
LCD_DosEspaciosBlancos            00000080
LCD_EnheMayuscula                 0000006D
LCD_EnheMinuscula                 00000067
LCD_Envia                         0000005E
LCD_EnviaBlancos                  00000083
LCD_EnviaByteLetra                0000009C
LCD_EnviaComando                  0000005A
LCD_EnviaOtroBlanco               00000084
LCD_EsFinalLinea                  000000B7
LCD_EscribeLCD                    00000030
LCD_FinCGROM                      0000007A
LCD_FinMensaje                    000000AC
LCD_FinMovimiento                 000000C6
LCD_FinVisualizaDigito            0000009E
LCD_Grado                         00000074
LCD_GuardaDato                    0000000D
LCD_GuardaTRISB                   0000000E
LCD_Inicializa                    00000018
LCD_Linea1                        00000049
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

LCD_Linea2                        0000004B
LCD_LineaEnBlanco                 0000007C
LCD_Mensaje                       0000009F
LCD_MensajeMovimiento             000000AD
LCD_Nibble                        00000094
LCD_NoEsFinalLinea                000000BC
LCD_NoUltimoCaracter              000000A9
LCD_NoUltimoCaracter2             000000C2
LCD_OFF                           00000051
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                0000004D
LCD_PosicionLinea2                0000004F
LCD_PrimeraPosicion               000000B1
LCD_TresEspaciosBlancos           00000082
LCD_UnEspacioBlanco               0000007E
LCD_ValorCaracter                 00000012
LCD_VisualizaAlto                 00000091
LCD_VisualizaBajo                 00000093
LCD_VisualizaCaracter             000000B3
LCD_VisualizaOtroCaracter         000000A3
Mensaje0                          00000005
Mensajes                          00000004
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
R1Decima_BucleExterno             00000104
R1Decima_BucleExterno2            00000102
R1Decima_BucleInterno             00000106
R1ms_BucleExterno                 000000EE
R1ms_BucleInterno                 000000F0
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           00000014
R_ContB                           00000015
R_ContC                           00000016
RetardoMicros                     000000DA
Retardo_100micros                 000000D4
Retardo_100ms                     000000E0
Retardo_10micros                  000000C7
Retardo_10ms                      000000E6
Retardo_10s                       000000F8
Retardo_1Decima                   00000101
Retardo_1ms                       000000EC
Retardo_1s                        000000FE
Retardo_200micros                 000000D1
Retardo_200ms                     000000DE
Retardo_20micros                  000000D9
Retardo_20ms                      000000E4
Retardo_20s                       000000F6
Retardo_2ms                       000000EA
Retardo_2s                        000000FC
Retardo_4micros                   000000CD
Retardo_500micros                 000000CE
Retardo_500ms                     00000100
Retardo_50micros                  000000D6
Retardo_50ms                      000000E2
Retardo_5micros                   000000CC
Retardo_5ms                       000000E8
Retardo_5s                        000000FA
Retardos_ms                       000000ED
Rmicros_Bucle                     000000DB
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CONFIG                           00002007
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
__DEBUG                           1


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXX-- ---------------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   270
Program Memory Words Free:   754


MPASM  5.51                    MENSAJE_02.ASM   6-7-2023  19:19:45         PAGE 18





Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

